
adxl345_lib_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800bcc8  0800bcc8  0001bcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c11c  0800c11c  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c124  0800c124  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c128  0800c128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800c12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000360  0800c48c  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  0800c48c  00021f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019478  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385e  00000000  00000000  00039808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0003d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  0003dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025680  00000000  00000000  0003edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bdc  00000000  00000000  00064458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdfdf  00000000  00000000  00079034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  00147068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000360 	.word	0x20000360
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bcac 	.word	0x0800bcac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000364 	.word	0x20000364
 800020c:	0800bcac 	.word	0x0800bcac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <ADXL345_Initialise>:
#include "adxl345.h"

/* Conversion constant for 4g range and 10 bits resolution */
#define CONST4G10B			0.076640625f

uint8_t ADXL345_Initialise(ADXL345 *dev, I2C_HandleTypeDef *i2cHandle){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle 			= i2cHandle;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0] 		= 0.0f;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] 		= 0.0f;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] 		= 0.0f;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]


	/* Store number of transactions errors (to be returned at the end of the function) */
	uint8_t errNum = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check DEV_ID (p.25)
	 */
	uint8_t regData;
	status = ADXL345_ReadRegister(dev, ADXL345_REG_DEVID, &regData);
 8000f0c:	f107 030d 	add.w	r3, r7, #13
 8000f10:	461a      	mov	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f8d9 	bl	80010cc <ADXL345_ReadRegister>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4413      	add	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]


	/* Exit if status different */
	if(regData != ADXL345_DEVID){
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	2be5      	cmp	r3, #229	; 0xe5
 8000f36:	d001      	beq.n	8000f3c <ADXL345_Initialise+0x5c>
		return 255;
 8000f38:	23ff      	movs	r3, #255	; 0xff
 8000f3a:	e069      	b.n	8001010 <ADXL345_Initialise+0x130>
	 * D0-D3 : Rate bits ODR (p.15)
	 * 			100Hz ODR = 0xA
	 * 			200Hz ODR = 0xB
	 * 			400HZ ODR = 0xC
	 */
	regData = 0x0C;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(dev, ADXL345_REG_BW_RATE, &regData);
 8000f40:	f107 030d 	add.w	r3, r7, #13
 8000f44:	461a      	mov	r2, r3
 8000f46:	212c      	movs	r1, #44	; 0x2c
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f8f9 	bl	8001140 <ADXL345_WriteRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4413      	add	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	 * D2 : Sleep (1 puts ADXL into sleep mode)
	 * D0-D1 : Wakeup bits
	 *
	 * Selected D3 = 1 - measuring mode on
	 */
	regData = 0x08;
 8000f66:	2308      	movs	r3, #8
 8000f68:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(dev, ADXL345_REG_POWER_CTL, &regData);
 8000f6a:	f107 030d 	add.w	r3, r7, #13
 8000f6e:	461a      	mov	r2, r3
 8000f70:	212d      	movs	r1, #45	; 0x2d
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f8e4 	bl	8001140 <ADXL345_WriteRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	73fb      	strb	r3, [r7, #15]

	/* SET on which bit to have the DATA_READY interrupt (INT_MAP)
	 * D7 (0): If 0 -> it will be on INT1, if set on INT2
	 *
	 */
	regData = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(dev, ADXL345_REG_INT_MAP, &regData);
 8000f94:	f107 030d 	add.w	r3, r7, #13
 8000f98:	461a      	mov	r2, r3
 8000f9a:	212f      	movs	r1, #47	; 0x2f
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f8cf 	bl	8001140 <ADXL345_WriteRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf14      	ite	ne
 8000fac:	2301      	movne	r3, #1
 8000fae:	2300      	moveq	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	73fb      	strb	r3, [r7, #15]
	 * 			00 : +-2g
	 * 			01 : +-4g
	 * 			10 : +-8g
	 * 			11 : +-16g
	 */
	regData = 0x05;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(dev, ADXL345_REG_DATA_FORMAT, &regData);
 8000fbe:	f107 030d 	add.w	r3, r7, #13
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2131      	movs	r1, #49	; 0x31
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f8ba 	bl	8001140 <ADXL345_WriteRegister>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	73fb      	strb	r3, [r7, #15]
	/*
	 * Enable DATA_READY Interrupt (INT_ENABLE) (p.26)
	 * D7 : DATA_READY interrupt function (set to 1 if active)
	 * It is recommended that interrupts be configured before enabling their outputs
	 */
	regData = 0x80;
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	737b      	strb	r3, [r7, #13]
	status = ADXL345_WriteRegister(dev, ADXL345_REG_INT_ENABLE, &regData);
 8000fe8:	f107 030d 	add.w	r3, r7, #13
 8000fec:	461a      	mov	r2, r3
 8000fee:	212e      	movs	r1, #46	; 0x2e
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8a5 	bl	8001140 <ADXL345_WriteRegister>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4413      	add	r3, r2
 800100c:	73fb      	strb	r3, [r7, #15]

	/* END OF INITIALISATION */


	/* Return the number of errors (0 if successful initialization)*/
	return errNum;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <ADXL345_ReadAcceleration>:


/*
 * DATA AQUISITION
 */
HAL_StatusTypeDef ADXL345_ReadAcceleration(ADXL345 *dev){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	 * Read raw values from acceleration (x,y,z -> 10 bits each)
	 */
	uint8_t regData[6];

	/* Read 6 registers starting with 0x32 to 0x37 */
	HAL_StatusTypeDef status = ADXL345_ReadRegisters(dev, ADXL345_REG_DATAX0, regData, 6);
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	2306      	movs	r3, #6
 8001026:	2132      	movs	r1, #50	; 0x32
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f86a 	bl	8001102 <ADXL345_ReadRegisters>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
	 */

	int16_t accRawSigned[3];

	/* DATAX0 is the LSB and DATAX1 is the MSB */
	accRawSigned[0] = ((((int16_t) regData[1] << 16) | ((int16_t) (regData[0] & 0x03)) << 8) >> 6); // X-axis
 8001032:	7c7b      	ldrb	r3, [r7, #17]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	7c3b      	ldrb	r3, [r7, #16]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800103e:	4313      	orrs	r3, r2
 8001040:	119b      	asrs	r3, r3, #6
 8001042:	b21b      	sxth	r3, r3
 8001044:	813b      	strh	r3, [r7, #8]
	accRawSigned[1] = ((((int16_t) regData[3] << 16) | ((int16_t) (regData[2] & 0x03)) << 8) >> 6); // Y-axis
 8001046:	7cfb      	ldrb	r3, [r7, #19]
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001052:	4313      	orrs	r3, r2
 8001054:	119b      	asrs	r3, r3, #6
 8001056:	b21b      	sxth	r3, r3
 8001058:	817b      	strh	r3, [r7, #10]
	accRawSigned[2] = ((((int16_t) regData[5] << 16) | ((int16_t) (regData[4] & 0x03)) << 8) >> 6); // X-axis
 800105a:	7d7b      	ldrb	r3, [r7, #21]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	7d3b      	ldrb	r3, [r7, #20]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001066:	4313      	orrs	r3, r2
 8001068:	119b      	asrs	r3, r3, #6
 800106a:	b21b      	sxth	r3, r3
 800106c:	81bb      	strh	r3, [r7, #12]


	/* Convert to mps^2 (given range setting of +-4g) */
	dev->acc_mps2[0] = CONST4G10B * accRawSigned[0];
 800106e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010c8 <ADXL345_ReadAcceleration+0xb0>
 800107e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = CONST4G10B * accRawSigned[1];
 8001088:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010c8 <ADXL345_ReadAcceleration+0xb0>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = CONST4G10B * accRawSigned[2];
 80010a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010c8 <ADXL345_ReadAcceleration+0xb0>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edc3 7a03 	vstr	s15, [r3, #12]

	return status;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	3d9cf5c3 	.word	0x3d9cf5c3

080010cc <ADXL345_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef ADXL345_ReadRegister(ADXL345 *dev, uint8_t reg, uint8_t *data){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	213a      	movs	r1, #58	; 0x3a
 80010f4:	f001 f970 	bl	80023d8 <HAL_I2C_Mem_Read>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <ADXL345_ReadRegisters>:
HAL_StatusTypeDef ADXL345_ReadRegisters(ADXL345 *dev, uint8_t reg, uint8_t *data, uint8_t len){
 8001102:	b580      	push	{r7, lr}
 8001104:	b088      	sub	sp, #32
 8001106:	af04      	add	r7, sp, #16
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	461a      	mov	r2, r3
 800110e:	460b      	mov	r3, r1
 8001110:	72fb      	strb	r3, [r7, #11]
 8001112:	4613      	mov	r3, r2
 8001114:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7abb      	ldrb	r3, [r7, #10]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001126:	9102      	str	r1, [sp, #8]
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	213a      	movs	r1, #58	; 0x3a
 8001132:	f001 f951 	bl	80023d8 <HAL_I2C_Mem_Read>
 8001136:	4603      	mov	r3, r0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <ADXL345_WriteRegister>:

HAL_StatusTypeDef ADXL345_WriteRegister(ADXL345 *dev, uint8_t reg, uint8_t *data){
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	460b      	mov	r3, r1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	b29a      	uxth	r2, r3
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	213a      	movs	r1, #58	; 0x3a
 8001168:	f001 f83c 	bl	80021e4 <HAL_I2C_Mem_Write>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ACC_INT_Pin){
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d102      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0x16>

		/* Set data ready flag (checked in main while() loop) */
		accDataReady = 1;
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_GPIO_EXTI_Callback+0x24>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
	}
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000610 	.word	0x20000610

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011a4:	b09a      	sub	sp, #104	; 0x68
 80011a6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 fb50 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f86c 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f000 f904 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80011b4:	f000 f8d4 	bl	8001360 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011b8:	f007 f90c 	bl	80083d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize accelerometer */
  uint8_t comErrors = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  comErrors = ADXL345_Initialise(&acc, &hi2c1);
 80011c2:	492c      	ldr	r1, [pc, #176]	; (8001274 <main+0xd4>)
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <main+0xd8>)
 80011c6:	f7ff fe8b 	bl	8000ee0 <ADXL345_Initialise>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  accDataReady = 0;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <main+0xdc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Sample accelerometer if data ready flag has been set via interrupt */
	  if(accDataReady){
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <main+0xdc>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <main+0x44>

		  /* Clear flag */
		  accDataReady = 0;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <main+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	  }

	  /* Send accelerometer readings via virtual COM port (USB) */
	  if ((HAL_GetTick() - timerLog) >= SAMPLE_TIME_LOG_MS){
 80011e4:	f000 fb98 	bl	8001918 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b63      	cmp	r3, #99	; 0x63
 80011f0:	d930      	bls.n	8001254 <main+0xb4>

		  ADXL345_ReadAcceleration(&acc);
 80011f2:	4821      	ldr	r0, [pc, #132]	; (8001278 <main+0xd8>)
 80011f4:	f7ff ff10 	bl	8001018 <ADXL345_ReadAcceleration>

		  // Logging via COM PORT
		  uint8_t usbBufLen = snprintf(usbBuf, 64, "%.2f,%.2f,%.2f\r\n",
				  acc.acc_mps2[0], acc.acc_mps2[1], acc.acc_mps2[2]);
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <main+0xd8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
		  uint8_t usbBufLen = snprintf(usbBuf, 64, "%.2f,%.2f,%.2f\r\n",
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9c3 	bl	8000588 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
				  acc.acc_mps2[0], acc.acc_mps2[1], acc.acc_mps2[2]);
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <main+0xd8>)
 8001208:	689b      	ldr	r3, [r3, #8]
		  uint8_t usbBufLen = snprintf(usbBuf, 64, "%.2f,%.2f,%.2f\r\n",
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9bc 	bl	8000588 <__aeabi_f2d>
 8001210:	4680      	mov	r8, r0
 8001212:	4689      	mov	r9, r1
				  acc.acc_mps2[0], acc.acc_mps2[1], acc.acc_mps2[2]);
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <main+0xd8>)
 8001216:	68db      	ldr	r3, [r3, #12]
		  uint8_t usbBufLen = snprintf(usbBuf, 64, "%.2f,%.2f,%.2f\r\n",
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9b5 	bl	8000588 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	1d38      	adds	r0, r7, #4
 8001224:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001228:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800122c:	e9cd 4500 	strd	r4, r5, [sp]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <main+0xe0>)
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	f008 fafa 	bl	800982c <sniprintf>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  CDC_Transmit_FS((uint8_t *) usbBuf, usbBufLen);
 800123e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001242:	b29a      	uxth	r2, r3
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f007 f981 	bl	8008550 <CDC_Transmit_FS>

		  timerLog += SAMPLE_TIME_LOG_MS;
 800124e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001250:	3364      	adds	r3, #100	; 0x64
 8001252:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }

	  /* Toggle LED */
	  if ((HAL_GetTick() - timerLED) >= SAMPLE_TIME_LED_MS){
 8001254:	f000 fb60 	bl	8001918 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b63      	cmp	r3, #99	; 0x63
 8001260:	d9b9      	bls.n	80011d6 <main+0x36>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001262:	2120      	movs	r1, #32
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <main+0xe4>)
 8001266:	f000 fe46 	bl	8001ef6 <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 800126a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800126c:	3364      	adds	r3, #100	; 0x64
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
	  if(accDataReady){
 8001270:	e7b1      	b.n	80011d6 <main+0x36>
 8001272:	bf00      	nop
 8001274:	200005bc 	.word	0x200005bc
 8001278:	200005ac 	.word	0x200005ac
 800127c:	20000610 	.word	0x20000610
 8001280:	0800bcc8 	.word	0x0800bcc8
 8001284:	40020000 	.word	0x40020000

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2234      	movs	r2, #52	; 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fe56 	bl	8008f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <SystemClock_Config+0xd0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <SystemClock_Config+0xd0>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <SystemClock_Config+0xd0>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a22      	ldr	r2, [pc, #136]	; (800135c <SystemClock_Config+0xd4>)
 80012d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <SystemClock_Config+0xd4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ee:	2302      	movs	r3, #2
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001300:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001306:	2307      	movs	r3, #7
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130a:	2302      	movs	r3, #2
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fd92 	bl	8004e3c <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131e:	f000 f8e1 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001326:	2303      	movs	r3, #3
 8001328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2105      	movs	r1, #5
 8001340:	4618      	mov	r0, r3
 8001342:	f002 ff99 	bl	8004278 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800134c:	f000 f8ca 	bl	80014e4 <Error_Handler>
  }
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	; 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <MX_I2C1_Init+0x54>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_I2C1_Init+0x50>)
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x58>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_I2C1_Init+0x50>)
 800137e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_I2C1_Init+0x50>)
 800139e:	f000 fddd 	bl	8001f5c <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a8:	f000 f89c 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200005bc 	.word	0x200005bc
 80013b4:	40005400 	.word	0x40005400
 80013b8:	000186a0 	.word	0x000186a0

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <MX_GPIO_Init+0x11c>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_GPIO_Init+0x11c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MX_GPIO_Init+0x11c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <MX_GPIO_Init+0x11c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_GPIO_Init+0x11c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_GPIO_Init+0x11c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <MX_GPIO_Init+0x11c>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_GPIO_Init+0x11c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	4825      	ldr	r0, [pc, #148]	; (80014dc <MX_GPIO_Init+0x120>)
 8001448:	f000 fd3c 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	481f      	ldr	r0, [pc, #124]	; (80014e0 <MX_GPIO_Init+0x124>)
 8001464:	f000 fb9a 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001468:	2302      	movs	r3, #2
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <MX_GPIO_Init+0x120>)
 800147e:	f000 fb8d 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001482:	230c      	movs	r3, #12
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001492:	2307      	movs	r3, #7
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	480f      	ldr	r0, [pc, #60]	; (80014dc <MX_GPIO_Init+0x120>)
 800149e:	f000 fb7d 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014a2:	2320      	movs	r3, #32
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <MX_GPIO_Init+0x120>)
 80014ba:	f000 fb6f 	bl	8001b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2007      	movs	r0, #7
 80014c4:	f000 fb33 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014c8:	2007      	movs	r0, #7
 80014ca:	f000 fb4c 	bl	8001b66 <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020800 	.word	0x40020800

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152e:	2007      	movs	r0, #7
 8001530:	f000 faf2 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_I2C_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23c0      	movs	r3, #192	; 0xc0
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001582:	2312      	movs	r3, #18
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158e:	2304      	movs	r3, #4
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <HAL_I2C_MspInit+0x8c>)
 800159a:	f000 faff 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_I2C_MspInit+0x88>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f968 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001628:	2002      	movs	r0, #2
 800162a:	f000 fc7f 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <OTG_FS_IRQHandler+0x10>)
 800163a:	f001 fda5 	bl	8003188 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20001ae8 	.word	0x20001ae8

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001662:	f007 fc47 	bl	8008ef4 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800168a:	e7fe      	b.n	800168a <_exit+0x12>

0800168c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e00a      	b.n	80016b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169e:	f3af 8000 	nop.w
 80016a2:	4601      	mov	r1, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf0      	blt.n	800169e <_read+0x12>
	}

return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e009      	b.n	80016ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf1      	blt.n	80016d8 <_write+0x12>
	}
	return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_close>:

int _close(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001726:	605a      	str	r2, [r3, #4]
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_isatty>:

int _isatty(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
	return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f007 fbac 	bl	8008ef4 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	2000037c 	.word	0x2000037c
 80017d0:	20001f00 	.word	0x20001f00

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f007 fb6b 	bl	8008f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fcb9 	bl	80011a0 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 800183c:	0800c12c 	.word	0x0800c12c
  ldr r2, =_sbss
 8001840:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8001844:	20001f00 	.word	0x20001f00

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 f94f 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fe36 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f967 	bl	8001b82 <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018cc:	f000 f92f 	bl	8001b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	20000614 	.word	0x20000614

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000614 	.word	0x20000614

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff3e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff8e 	bl	8001a6c <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5d 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff31 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa2 	bl	8001ad4 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e165      	b.n	8001e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8154 	bne.w	8001e7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80ae 	beq.w	8001e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_GPIO_Init+0x300>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <HAL_GPIO_Init+0x300>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <HAL_GPIO_Init+0x300>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_GPIO_Init+0x308>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x216>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_GPIO_Init+0x310>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x212>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_GPIO_Init+0x314>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x20e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_GPIO_Init+0x318>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x20a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x31c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_GPIO_Init+0x320>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x202>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00c      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001d9e:	2307      	movs	r3, #7
 8001da0:	e00a      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x21c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc8:	4935      	ldr	r1, [pc, #212]	; (8001ea0 <HAL_GPIO_Init+0x304>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dfa:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	f67f ae96 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40021400 	.word	0x40021400
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	400b      	ands	r3, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f914 	bl	8001178 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e12b      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fadc 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f002 fa4c 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8001fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <HAL_I2C_Init+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d807      	bhi.n	8001fe0 <HAL_I2C_Init+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_I2C_Init+0x278>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e006      	b.n	8001fee <HAL_I2C_Init+0x92>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <HAL_I2C_Init+0x27c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0e7      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_I2C_Init+0x280>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d802      	bhi.n	8002030 <HAL_I2C_Init+0xd4>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	e009      	b.n	8002044 <HAL_I2C_Init+0xe8>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_I2C_Init+0x284>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	495c      	ldr	r1, [pc, #368]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002060:	428b      	cmp	r3, r1
 8002062:	d819      	bhi.n	8002098 <HAL_I2C_Init+0x13c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e59      	subs	r1, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002072:	1c59      	adds	r1, r3, #1
 8002074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_I2C_Init+0x138>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e59      	subs	r1, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fbb1 f3f3 	udiv	r3, r1, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	e051      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002094:	2304      	movs	r3, #4
 8002096:	e04f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_I2C_Init+0x168>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e012      	b.n	80020ea <HAL_I2C_Init+0x18e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x196>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e022      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_I2C_Init+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e58      	subs	r0, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	fbb0 f3f3 	udiv	r3, r0, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002116:	e00f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	6809      	ldr	r1, [r1, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6911      	ldr	r1, [r2, #16]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	000186a0 	.word	0x000186a0
 80021d4:	001e847f 	.word	0x001e847f
 80021d8:	003d08ff 	.word	0x003d08ff
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	817b      	strh	r3, [r7, #10]
 80021f6:	460b      	mov	r3, r1
 80021f8:	813b      	strh	r3, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fe:	f7ff fb8b 	bl	8001918 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	f040 80d9 	bne.w	80023c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2319      	movs	r3, #25
 8002218:	2201      	movs	r2, #1
 800221a:	496d      	ldr	r1, [pc, #436]	; (80023d0 <HAL_I2C_Mem_Write+0x1ec>)
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fc7f 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
 800222a:	e0cc      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2C_Mem_Write+0x56>
 8002236:	2302      	movs	r3, #2
 8002238:	e0c5      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d007      	beq.n	8002260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_I2C_Mem_Write+0x1f0>)
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a2:	88f8      	ldrh	r0, [r7, #6]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	8979      	ldrh	r1, [r7, #10]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4603      	mov	r3, r0
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fab6 	bl	8002824 <I2C_RequestMemoryWrite>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d052      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e081      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fd00 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_I2C_Mem_Write+0x180>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1aa      	bne.n	80022c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fcec 	bl	8002d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e016      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00100002 	.word	0x00100002
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff fa91 	bl	8001918 <HAL_GetTick>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 8208 	bne.w	8002816 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2319      	movs	r3, #25
 800240c:	2201      	movs	r2, #1
 800240e:	497b      	ldr	r1, [pc, #492]	; (80025fc <HAL_I2C_Mem_Read+0x224>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fb85 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	e1fb      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_I2C_Mem_Read+0x56>
 800242a:	2302      	movs	r3, #2
 800242c:	e1f4      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2222      	movs	r2, #34	; 0x22
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_I2C_Mem_Read+0x228>)
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002496:	88f8      	ldrh	r0, [r7, #6]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa52 	bl	8002950 <I2C_RequestMemoryRead>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1b0      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e184      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d11b      	bne.n	8002526 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e164      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b02      	cmp	r3, #2
 800252c:	d11b      	bne.n	8002566 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	e144      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800257c:	e138      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b03      	cmp	r3, #3
 8002584:	f200 80f1 	bhi.w	800276a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b01      	cmp	r3, #1
 800258e:	d123      	bne.n	80025d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fc1b 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e139      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d6:	e10b      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d14e      	bne.n	800267e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2200      	movs	r2, #0
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <HAL_I2C_Mem_Read+0x22c>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa98 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e10e      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000
 8002604:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800267c:	e0b8      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2200      	movs	r2, #0
 8002686:	4966      	ldr	r1, [pc, #408]	; (8002820 <HAL_I2C_Mem_Read+0x448>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fa49 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0bf      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2200      	movs	r2, #0
 80026e2:	494f      	ldr	r1, [pc, #316]	; (8002820 <HAL_I2C_Mem_Read+0x448>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa1b 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e091      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002768:	e042      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fb2e 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04c      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d118      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f aec2 	bne.w	800257e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	00010004 	.word	0x00010004

08002824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	460b      	mov	r3, r1
 8002838:	813b      	strh	r3, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f960 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d103      	bne.n	800287e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e05f      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	492d      	ldr	r1, [pc, #180]	; (800294c <I2C_RequestMemoryWrite+0x128>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f998 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04c      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa02 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02b      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e021      	b.n	8002940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f9dc 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e005      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00010002 	.word	0x00010002

08002950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2200      	movs	r2, #0
 8002992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8c2 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d103      	bne.n	80029ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0aa      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	4952      	ldr	r1, [pc, #328]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f8fa 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e097      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f964 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e076      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e021      	b.n	8002a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f93e 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e050      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a72:	893b      	ldrh	r3, [r7, #8]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f923 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d107      	bne.n	8002aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e035      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f82b 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d103      	bne.n	8002ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f863 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010002 	.word	0x00010002

08002b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	e025      	b.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	d021      	beq.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe feed 	bl	8001918 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e023      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10d      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	e00c      	b.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d0b6      	beq.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bdc:	e051      	b.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d123      	bne.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e046      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3c:	d021      	beq.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe fe6b 	bl	8001918 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e020      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10c      	bne.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e00b      	b.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d18d      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd8:	e02d      	b.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8ce 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf0:	d021      	beq.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7fe fe11 	bl	8001918 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d1ca      	bne.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5a:	e02d      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f88d 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d72:	d021      	beq.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7fe fdd0 	bl	8001918 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d1ca      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ddc:	e042      	b.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d119      	bne.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e029      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe fd7a 	bl	8001918 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d1b5      	bne.n	8002dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d11b      	bne.n	8002ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002edc:	b08f      	sub	sp, #60	; 0x3c
 8002ede:	af0a      	add	r7, sp, #40	; 0x28
 8002ee0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e116      	b.n	800311a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f005 fc7c 	bl	8008804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fb39 	bl	80055a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	687e      	ldr	r6, [r7, #4]
 8002f38:	466d      	mov	r5, sp
 8002f3a:	f106 0410 	add.w	r4, r6, #16
 8002f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f4e:	1d33      	adds	r3, r6, #4
 8002f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f52:	6838      	ldr	r0, [r7, #0]
 8002f54:	f002 fa10 	bl	8005378 <USB_CoreInit>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0d7      	b.n	800311a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fb27 	bl	80055c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	e04a      	b.n	8003012 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	333d      	adds	r3, #61	; 0x3d
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	333c      	adds	r3, #60	; 0x3c
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	b298      	uxth	r0, r3
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3342      	adds	r3, #66	; 0x42
 8002fb8:	4602      	mov	r2, r0
 8002fba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	333f      	adds	r3, #63	; 0x3f
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3344      	adds	r3, #68	; 0x44
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3348      	adds	r3, #72	; 0x48
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3350      	adds	r3, #80	; 0x50
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	3301      	adds	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3af      	bcc.n	8002f7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e044      	b.n	80030ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	3301      	adds	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3b5      	bcc.n	8003022 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	687e      	ldr	r6, [r7, #4]
 80030be:	466d      	mov	r5, sp
 80030c0:	f106 0410 	add.w	r4, r6, #16
 80030c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d4:	1d33      	adds	r3, r6, #4
 80030d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d8:	6838      	ldr	r0, [r7, #0]
 80030da:	f002 fabf 	bl	800565c <USB_DevInit>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e014      	b.n	800311a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f001 f891 	bl	8004230 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fb2e 	bl	8006774 <USB_DevDisconnect>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_PCD_Start+0x1c>
 800313a:	2302      	movs	r3, #2
 800313c:	e020      	b.n	8003180 <HAL_PCD_Start+0x5e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	2b01      	cmp	r3, #1
 800314c:	d109      	bne.n	8003162 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003152:	2b01      	cmp	r3, #1
 8003154:	d005      	beq.n	8003162 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f002 fa0a 	bl	8005580 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fade 	bl	8006732 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b08d      	sub	sp, #52	; 0x34
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 fb9c 	bl	80068dc <USB_GetMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 83ca 	bne.w	8003940 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fb00 	bl	80067b6 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 83c0 	beq.w	800393e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 faf7 	bl	80067b6 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 0202 	and.w	r2, r2, #2
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fae5 	bl	80067b6 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d161      	bne.n	80032ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0210 	bic.w	r2, r2, #16
 8003204:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	0c5b      	lsrs	r3, r3, #17
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2b02      	cmp	r3, #2
 8003230:	d124      	bne.n	800327c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d035      	beq.n	80032aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6a38      	ldr	r0, [r7, #32]
 8003252:	f003 f91c 	bl	800648e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	441a      	add	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003274:	441a      	add	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	619a      	str	r2, [r3, #24]
 800327a:	e016      	b.n	80032aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	0c5b      	lsrs	r3, r3, #17
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	2b06      	cmp	r3, #6
 8003286:	d110      	bne.n	80032aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800328e:	2208      	movs	r2, #8
 8003290:	4619      	mov	r1, r3
 8003292:	6a38      	ldr	r0, [r7, #32]
 8003294:	f003 f8fb 	bl	800648e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a4:	441a      	add	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0210 	orr.w	r2, r2, #16
 80032b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fa79 	bl	80067b6 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032ce:	d16e      	bne.n	80033ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fa7f 	bl	80067dc <USB_ReadDevAllOutEpInterrupt>
 80032de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032e0:	e062      	b.n	80033a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d057      	beq.n	800339c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 faa4 	bl	8006844 <USB_ReadDevOutEPInterrupt>
 80032fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	2301      	movs	r3, #1
 8003318:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800331a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fddd 	bl	8003edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2308      	movs	r3, #8
 800333c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800333e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fed7 	bl	80040f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2310      	movs	r3, #16
 8003360:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2320      	movs	r3, #32
 800337c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003394:	461a      	mov	r2, r3
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3301      	adds	r3, #1
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d199      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 f9ff 	bl	80067b6 <USB_ReadInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c2:	f040 80c0 	bne.w	8003546 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fa20 	bl	8006810 <USB_ReadDevAllInEpInterrupt>
 80033d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033d6:	e0b2      	b.n	800353e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a7 	beq.w	8003532 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fa46 	bl	8006880 <USB_ReadDevInEPInterrupt>
 80033f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d057      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	69f9      	ldr	r1, [r7, #28]
 800341c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003420:	4013      	ands	r3, r2
 8003422:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	461a      	mov	r2, r3
 8003432:	2301      	movs	r3, #1
 8003434:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d132      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3348      	adds	r3, #72	; 0x48
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	3344      	adds	r3, #68	; 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4419      	add	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4403      	add	r3, r0
 8003472:	3348      	adds	r3, #72	; 0x48
 8003474:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3350      	adds	r3, #80	; 0x50
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349c:	461a      	mov	r2, r3
 800349e:	2101      	movs	r1, #1
 80034a0:	f003 fa4e 	bl	8006940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f005 fa41 	bl	8008932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	461a      	mov	r2, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e2:	461a      	mov	r2, r3
 80034e4:	2310      	movs	r3, #16
 80034e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fe:	461a      	mov	r2, r3
 8003500:	2340      	movs	r3, #64	; 0x40
 8003502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	2302      	movs	r3, #2
 800351e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800352a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fc48 	bl	8003dc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f af49 	bne.w	80033d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f003 f933 	bl	80067b6 <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800355a:	d122      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003582:	2100      	movs	r1, #0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f005 fc23 	bl	8008dd0 <HAL_PCDEx_LPM_Callback>
 800358a:	e002      	b.n	8003592 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f005 fa47 	bl	8008a20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 f905 	bl	80067b6 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b6:	d112      	bne.n	80035de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f005 fa03 	bl	80089d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035dc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 f8e7 	bl	80067b6 <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d121      	bne.n	8003638 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003602:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d111      	bne.n	8003632 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003628:	2101      	movs	r1, #1
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f005 fbd0 	bl	8008dd0 <HAL_PCDEx_LPM_Callback>
 8003630:	e002      	b.n	8003638 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f005 f9ce 	bl	80089d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 f8ba 	bl	80067b6 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	f040 80c7 	bne.w	80037de <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2110      	movs	r1, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f002 f954 	bl	8005918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003670:	2300      	movs	r3, #0
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003674:	e056      	b.n	8003724 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003682:	461a      	mov	r2, r3
 8003684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800371c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	3301      	adds	r3, #1
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d3a3      	bcc.n	8003676 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003740:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375a:	f043 030b 	orr.w	r3, r3, #11
 800375e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003770:	f043 030b 	orr.w	r3, r3, #11
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	e015      	b.n	80037a4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800378a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800378e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f043 030b 	orr.w	r3, r3, #11
 80037a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c8:	461a      	mov	r2, r3
 80037ca:	f003 f8b9 	bl	8006940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 ffe7 	bl	80067b6 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d124      	bne.n	800383e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 f87d 	bl	80068f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f002 f8e5 	bl	80059d2 <USB_GetDevSpeed>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	f000 fe16 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8003818:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	4620      	mov	r0, r4
 8003824:	f001 fe0a 	bl	800543c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f005 f8aa 	bl	8008982 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f002 ffb7 	bl	80067b6 <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d10a      	bne.n	8003868 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 f887 	bl	8008966 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 0208 	and.w	r2, r2, #8
 8003866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f002 ffa2 	bl	80067b6 <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387c:	d10f      	bne.n	800389e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f005 f8e9 	bl	8008a60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800389c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 ff87 	bl	80067b6 <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b2:	d10f      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f005 f8bc 	bl	8008a3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 ff6c 	bl	80067b6 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d10a      	bne.n	8003900 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f005 f8ca 	bl	8008a84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 ff56 	bl	80067b6 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d115      	bne.n	8003940 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f005 f8ba 	bl	8008aa0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	e000      	b.n	8003940 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800393e:	bf00      	nop
    }
  }
}
 8003940:	3734      	adds	r7, #52	; 0x34
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}

08003946 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_PCD_SetAddress+0x1a>
 800395c:	2302      	movs	r3, #2
 800395e:	e013      	b.n	8003988 <HAL_PCD_SetAddress+0x42>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f002 feb4 	bl	80066e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	70fb      	strb	r3, [r7, #3]
 80039a2:	460b      	mov	r3, r1
 80039a4:	803b      	strh	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	da0f      	bge.n	80039d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3338      	adds	r3, #56	; 0x38
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	705a      	strb	r2, [r3, #1]
 80039d4:	e00f      	b.n	80039f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a02:	883a      	ldrh	r2, [r7, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	78ba      	ldrb	r2, [r7, #2]
 8003a0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a20:	78bb      	ldrb	r3, [r7, #2]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d102      	bne.n	8003a2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_PCD_EP_Open+0xaa>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e00e      	b.n	8003a58 <HAL_PCD_EP_Open+0xc8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 ffe7 	bl	8005a1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da0f      	bge.n	8003a94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	3338      	adds	r3, #56	; 0x38
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
 8003a92:	e00f      	b.n	8003ab4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_PCD_EP_Close+0x6e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e00e      	b.n	8003aec <HAL_PCD_EP_Close+0x8c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 f825 	bl	8005b2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	460b      	mov	r3, r1
 8003b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d102      	bne.n	8003b50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	f002 fb00 	bl	800616c <USB_EP0StartXfer>
 8003b6c:	e008      	b.n	8003b80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	f002 f8b2 	bl	8005ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bac:	681b      	ldr	r3, [r3, #0]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	f002 fa9e 	bl	800616c <USB_EP0StartXfer>
 8003c30:	e008      	b.n	8003c44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	f002 f850 	bl	8005ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d901      	bls.n	8003c6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e050      	b.n	8003d0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da0f      	bge.n	8003c94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3338      	adds	r3, #56	; 0x38
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	3304      	adds	r3, #4
 8003c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	705a      	strb	r2, [r3, #1]
 8003c92:	e00d      	b.n	8003cb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_PCD_EP_SetStall+0x82>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e01e      	b.n	8003d0e <HAL_PCD_EP_SetStall+0xc0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 fc2d 	bl	800653e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f002 fe1e 	bl	8006940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d901      	bls.n	8003d34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e042      	b.n	8003dba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	da0f      	bge.n	8003d5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3338      	adds	r3, #56	; 0x38
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	705a      	strb	r2, [r3, #1]
 8003d5a:	e00f      	b.n	8003d7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	f003 020f 	and.w	r2, r3, #15
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	3304      	adds	r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_EP_ClrStall+0x86>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e00e      	b.n	8003dba <HAL_PCD_EP_ClrStall+0xa4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f002 fc35 	bl	800661a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b08a      	sub	sp, #40	; 0x28
 8003dc6:	af02      	add	r7, sp, #8
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	3338      	adds	r3, #56	; 0x38
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	3304      	adds	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d901      	bls.n	8003dfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06c      	b.n	8003ed4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d902      	bls.n	8003e16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3303      	adds	r3, #3
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e1e:	e02b      	b.n	8003e78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d902      	bls.n	8003e3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3303      	adds	r3, #3
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68d9      	ldr	r1, [r3, #12]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4603      	mov	r3, r0
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f002 fad9 	bl	8006412 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	441a      	add	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d809      	bhi.n	8003ea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d203      	bcs.n	8003ea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1be      	bne.n	8003e20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d811      	bhi.n	8003ed2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ece:	4013      	ands	r3, r2
 8003ed0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	333c      	adds	r3, #60	; 0x3c
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 80a0 	bne.w	8004054 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a72      	ldr	r2, [pc, #456]	; (80040ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	f240 80dd 	bls.w	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80d7 	beq.w	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	e0cb      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	461a      	mov	r2, r3
 8003f62:	2320      	movs	r3, #32
 8003f64:	6093      	str	r3, [r2, #8]
 8003f66:	e0bc      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 80b7 	bne.w	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d90f      	bls.n	8003f9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	461a      	mov	r2, r3
 8003f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f98:	6093      	str	r3, [r2, #8]
 8003f9a:	e0a2      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003fc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4403      	add	r3, r0
 8003fd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4403      	add	r3, r0
 8003ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4419      	add	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4403      	add	r3, r0
 8004010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004014:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d114      	bne.n	8004046 <PCD_EP_OutXfrComplete_int+0x16a>
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800403e:	461a      	mov	r2, r3
 8004040:	2101      	movs	r1, #1
 8004042:	f002 fc7d 	bl	8006940 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f004 fc55 	bl	80088fc <HAL_PCD_DataOutStageCallback>
 8004052:	e046      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d124      	bne.n	80040a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	461a      	mov	r2, r3
 8004074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004078:	6093      	str	r3, [r2, #8]
 800407a:	e032      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	2320      	movs	r3, #32
 8004096:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f004 fc2c 	bl	80088fc <HAL_PCD_DataOutStageCallback>
 80040a4:	e01d      	b.n	80040e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d114      	bne.n	80040d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040ce:	461a      	mov	r2, r3
 80040d0:	2100      	movs	r1, #0
 80040d2:	f002 fc35 	bl	8006940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f004 fc0d 	bl	80088fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	4f54300a 	.word	0x4f54300a
 80040f0:	4f54310a 	.word	0x4f54310a

080040f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	333c      	adds	r3, #60	; 0x3c
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <PCD_EP_OutSetupPacket_int+0x88>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90e      	bls.n	8004148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f004 fbc5 	bl	80088d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <PCD_EP_OutSetupPacket_int+0x88>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d90c      	bls.n	8004170 <PCD_EP_OutSetupPacket_int+0x7c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d108      	bne.n	8004170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004168:	461a      	mov	r2, r3
 800416a:	2101      	movs	r1, #1
 800416c:	f002 fbe8 	bl	8006940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	4f54300a 	.word	0x4f54300a

08004180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
 800418c:	4613      	mov	r3, r2
 800418e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800419e:	883b      	ldrh	r3, [r7, #0]
 80041a0:	0419      	lsls	r1, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
 80041ac:	e028      	b.n	8004200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4413      	add	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e00d      	b.n	80041de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3340      	adds	r3, #64	; 0x40
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	3301      	adds	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d3ec      	bcc.n	80041c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041e8:	883b      	ldrh	r3, [r7, #0]
 80041ea:	0418      	lsls	r0, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4302      	orrs	r2, r0
 80041f8:	3340      	adds	r3, #64	; 0x40
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	f043 0303 	orr.w	r3, r3, #3
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cc      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b68      	ldr	r3, [pc, #416]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d90c      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b65      	ldr	r3, [pc, #404]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b63      	ldr	r3, [pc, #396]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b8      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a58      	ldr	r2, [pc, #352]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e4:	4b53      	ldr	r3, [pc, #332]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d044      	beq.n	8004398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d119      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e067      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4934      	ldr	r1, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7fd fad6 	bl	8001918 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fd fad2 	bl	8001918 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e04f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d20c      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4916      	ldr	r1, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 fb6b 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004402:	4602      	mov	r2, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490a      	ldr	r1, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fa36 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00
 8004434:	40023800 	.word	0x40023800
 8004438:	0800bd24 	.word	0x0800bd24
 800443c:	20000000 	.word	0x20000000
 8004440:	20000004 	.word	0x20000004

08004444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	0800bd34 	.word	0x0800bd34

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	496c      	ldr	r1, [pc, #432]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80044da:	2301      	movs	r3, #1
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d010      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80044ea:	4b64      	ldr	r3, [pc, #400]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	4960      	ldr	r1, [pc, #384]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004508:	2301      	movs	r3, #1
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d017      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004518:	4b58      	ldr	r3, [pc, #352]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800451a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4955      	ldr	r1, [pc, #340]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004536:	d101      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d017      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004554:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	4946      	ldr	r1, [pc, #280]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004572:	d101      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004580:	2301      	movs	r3, #1
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 808a 	beq.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a38      	ldr	r2, [pc, #224]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045ae:	4b34      	ldr	r3, [pc, #208]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a33      	ldr	r2, [pc, #204]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ba:	f7fd f9ad 	bl	8001918 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd f9a9 	bl	8001918 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e278      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02f      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d028      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fe:	4b1f      	ldr	r3, [pc, #124]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004606:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d114      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004626:	f7fd f977 	bl	8001918 <HAL_GetTick>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd f973 	bl	8001918 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e240      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ee      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d114      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	4902      	ldr	r1, [pc, #8]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]
 8004678:	e00c      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000
 8004684:	42470e40 	.word	0x42470e40
 8004688:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a49      	ldr	r2, [pc, #292]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800468e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004692:	6093      	str	r3, [r2, #8]
 8004694:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	4944      	ldr	r1, [pc, #272]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80046ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80046c8:	4b3a      	ldr	r3, [pc, #232]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	4937      	ldr	r1, [pc, #220]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	492e      	ldr	r1, [pc, #184]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800470c:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	4926      	ldr	r1, [pc, #152]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472a:	d101      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800472c:	2301      	movs	r3, #1
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	491a      	ldr	r1, [pc, #104]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	2b00      	cmp	r3, #0
 800475c:	d011      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004764:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	4911      	ldr	r1, [pc, #68]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800477e:	2301      	movs	r3, #1
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d005      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004790:	f040 80ff 	bne.w	8004992 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fd f8bd 	bl	8001918 <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a0:	e00e      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047a2:	f7fd f8b9 	bl	8001918 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d907      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e188      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	424711e0 	.word	0x424711e0
 80047bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c0:	4b7e      	ldr	r3, [pc, #504]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ea      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d028      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d124      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80047f4:	4b71      	ldr	r3, [pc, #452]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	3301      	adds	r3, #1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	431a      	orrs	r2, r3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4961      	ldr	r1, [pc, #388]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800485c:	2b00      	cmp	r3, #0
 800485e:	d035      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004868:	d130      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800486c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	3301      	adds	r3, #1
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800487c:	4b4f      	ldr	r3, [pc, #316]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004882:	0f1b      	lsrs	r3, r3, #28
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	019b      	lsls	r3, r3, #6
 8004894:	431a      	orrs	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	431a      	orrs	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	071b      	lsls	r3, r3, #28
 80048ac:	4943      	ldr	r1, [pc, #268]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ba:	f023 021f 	bic.w	r2, r3, #31
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	493d      	ldr	r1, [pc, #244]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d029      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e0:	d124      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	0f1b      	lsrs	r3, r3, #28
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	019b      	lsls	r3, r3, #6
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	3b01      	subs	r3, #1
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	431a      	orrs	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	071b      	lsls	r3, r3, #28
 8004924:	4925      	ldr	r1, [pc, #148]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004934:	2b00      	cmp	r3, #0
 8004936:	d016      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	071b      	lsls	r3, r3, #28
 800495e:	4917      	ldr	r1, [pc, #92]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800496c:	f7fc ffd4 	bl	8001918 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004974:	f7fc ffd0 	bl	8001918 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e09f      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b01      	cmp	r3, #1
 8004996:	f040 8095 	bne.w	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a0:	f7fc ffba 	bl	8001918 <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a6:	e00f      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fc ffb6 	bl	8001918 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d908      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e085      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	42470068 	.word	0x42470068
 80049c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049c8:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d4:	d0e8      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02b      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d127      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	3b01      	subs	r3, #1
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	4928      	ldr	r1, [pc, #160]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a34:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	3b01      	subs	r3, #1
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4922      	ldr	r1, [pc, #136]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01d      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a62:	d118      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	0e1b      	lsrs	r3, r3, #24
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	019b      	lsls	r3, r3, #6
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	3b01      	subs	r3, #1
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9c:	f7fc ff3c 	bl	8001918 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004aa4:	f7fc ff38 	bl	8001918 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e007      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac2:	d1ef      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3730      	adds	r7, #48	; 0x30
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	42470070 	.word	0x42470070

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b088      	sub	sp, #32
 8004ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af4:	4bce      	ldr	r3, [pc, #824]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	f200 818d 	bhi.w	8004e1c <HAL_RCC_GetSysClockFreq+0x344>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_RCC_GetSysClockFreq+0x30>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b3d 	.word	0x08004b3d
 8004b0c:	08004e1d 	.word	0x08004e1d
 8004b10:	08004e1d 	.word	0x08004e1d
 8004b14:	08004e1d 	.word	0x08004e1d
 8004b18:	08004b43 	.word	0x08004b43
 8004b1c:	08004e1d 	.word	0x08004e1d
 8004b20:	08004e1d 	.word	0x08004e1d
 8004b24:	08004e1d 	.word	0x08004e1d
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004e1d 	.word	0x08004e1d
 8004b30:	08004e1d 	.word	0x08004e1d
 8004b34:	08004e1d 	.word	0x08004e1d
 8004b38:	08004cbd 	.word	0x08004cbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b3c:	4bbd      	ldr	r3, [pc, #756]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b3e:	61bb      	str	r3, [r7, #24]
       break;
 8004b40:	e16f      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b42:	4bbd      	ldr	r3, [pc, #756]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x360>)
 8004b44:	61bb      	str	r3, [r7, #24]
      break;
 8004b46:	e16c      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b48:	4bb9      	ldr	r3, [pc, #740]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b52:	4bb7      	ldr	r3, [pc, #732]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d053      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5e:	4bb4      	ldr	r3, [pc, #720]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	461a      	mov	r2, r3
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	ea02 0400 	and.w	r4, r2, r0
 8004b76:	603c      	str	r4, [r7, #0]
 8004b78:	400b      	ands	r3, r1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b80:	4620      	mov	r0, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	014b      	lsls	r3, r1, #5
 8004b8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b92:	0142      	lsls	r2, r0, #5
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	4623      	mov	r3, r4
 8004b9a:	1ac0      	subs	r0, r0, r3
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	eb61 0103 	sbc.w	r1, r1, r3
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	018b      	lsls	r3, r1, #6
 8004bac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bb0:	0182      	lsls	r2, r0, #6
 8004bb2:	1a12      	subs	r2, r2, r0
 8004bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb8:	f04f 0000 	mov.w	r0, #0
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	00d9      	lsls	r1, r3, #3
 8004bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc6:	00d0      	lsls	r0, r2, #3
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4621      	mov	r1, r4
 8004bce:	1852      	adds	r2, r2, r1
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb43 0101 	adc.w	r1, r3, r1
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	0259      	lsls	r1, r3, #9
 8004be2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004be6:	0250      	lsls	r0, r2, #9
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f7fb fff6 	bl	8000be8 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4613      	mov	r3, r2
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e04c      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c06:	4b8a      	ldr	r3, [pc, #552]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	ea02 0a00 	and.w	sl, r2, r0
 8004c1e:	ea03 0b01 	and.w	fp, r3, r1
 8004c22:	4650      	mov	r0, sl
 8004c24:	4659      	mov	r1, fp
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	014b      	lsls	r3, r1, #5
 8004c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c34:	0142      	lsls	r2, r0, #5
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	ebb0 000a 	subs.w	r0, r0, sl
 8004c3e:	eb61 010b 	sbc.w	r1, r1, fp
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	018b      	lsls	r3, r1, #6
 8004c4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c50:	0182      	lsls	r2, r0, #6
 8004c52:	1a12      	subs	r2, r2, r0
 8004c54:	eb63 0301 	sbc.w	r3, r3, r1
 8004c58:	f04f 0000 	mov.w	r0, #0
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	00d9      	lsls	r1, r3, #3
 8004c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c66:	00d0      	lsls	r0, r2, #3
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	eb12 020a 	adds.w	r2, r2, sl
 8004c70:	eb43 030b 	adc.w	r3, r3, fp
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	0299      	lsls	r1, r3, #10
 8004c7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c82:	0290      	lsls	r0, r2, #10
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	f7fb ffa8 	bl	8000be8 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ca0:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	3301      	adds	r3, #1
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
      break;
 8004cba:	e0b2      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc6:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04d      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd2:	4b57      	ldr	r3, [pc, #348]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	ea02 0800 	and.w	r8, r2, r0
 8004cea:	ea03 0901 	and.w	r9, r3, r1
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	014b      	lsls	r3, r1, #5
 8004cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d00:	0142      	lsls	r2, r0, #5
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	ebb0 0008 	subs.w	r0, r0, r8
 8004d0a:	eb61 0109 	sbc.w	r1, r1, r9
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d1c:	0182      	lsls	r2, r0, #6
 8004d1e:	1a12      	subs	r2, r2, r0
 8004d20:	eb63 0301 	sbc.w	r3, r3, r1
 8004d24:	f04f 0000 	mov.w	r0, #0
 8004d28:	f04f 0100 	mov.w	r1, #0
 8004d2c:	00d9      	lsls	r1, r3, #3
 8004d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d32:	00d0      	lsls	r0, r2, #3
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	eb12 0208 	adds.w	r2, r2, r8
 8004d3c:	eb43 0309 	adc.w	r3, r3, r9
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	0259      	lsls	r1, r3, #9
 8004d4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d4e:	0250      	lsls	r0, r2, #9
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	f7fb ff42 	bl	8000be8 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e04a      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6e:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	099b      	lsrs	r3, r3, #6
 8004d74:	461a      	mov	r2, r3
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d7e:	f04f 0100 	mov.w	r1, #0
 8004d82:	ea02 0400 	and.w	r4, r2, r0
 8004d86:	ea03 0501 	and.w	r5, r3, r1
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	014b      	lsls	r3, r1, #5
 8004d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d9c:	0142      	lsls	r2, r0, #5
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	1b00      	subs	r0, r0, r4
 8004da4:	eb61 0105 	sbc.w	r1, r1, r5
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	018b      	lsls	r3, r1, #6
 8004db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004db6:	0182      	lsls	r2, r0, #6
 8004db8:	1a12      	subs	r2, r2, r0
 8004dba:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	00d9      	lsls	r1, r3, #3
 8004dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dcc:	00d0      	lsls	r0, r2, #3
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	1912      	adds	r2, r2, r4
 8004dd4:	eb45 0303 	adc.w	r3, r5, r3
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	0299      	lsls	r1, r3, #10
 8004de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004de6:	0290      	lsls	r0, r2, #10
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f7fb fef6 	bl	8000be8 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0f1b      	lsrs	r3, r3, #28
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	61bb      	str	r3, [r7, #24]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e1e:	61bb      	str	r3, [r7, #24]
      break;
 8004e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e22:	69bb      	ldr	r3, [r7, #24]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	007a1200 	.word	0x007a1200

08004e3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e28d      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8083 	beq.w	8004f62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e5c:	4b94      	ldr	r3, [pc, #592]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d019      	beq.n	8004e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e68:	4b91      	ldr	r3, [pc, #580]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e74:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e80:	d00c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e82:	4b8b      	ldr	r3, [pc, #556]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d112      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8e:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	4b84      	ldr	r3, [pc, #528]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05b      	beq.n	8004f60 <HAL_RCC_OscConfig+0x124>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e25a      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x90>
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7b      	ldr	r2, [pc, #492]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xcc>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xb4>
 8004ed6:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a75      	ldr	r2, [pc, #468]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b73      	ldr	r3, [pc, #460]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xcc>
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6e      	ldr	r2, [pc, #440]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6b      	ldr	r2, [pc, #428]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc fd02 	bl	8001918 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fc fcfe 	bl	8001918 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e21f      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b61      	ldr	r3, [pc, #388]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xdc>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fcee 	bl	8001918 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc fcea 	bl	8001918 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e20b      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	4b57      	ldr	r3, [pc, #348]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x104>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d06f      	beq.n	800504e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f6e:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f7a:	4b4d      	ldr	r3, [pc, #308]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d11c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x186>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e1d3      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4937      	ldr	r1, [pc, #220]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	e03a      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d020      	beq.n	8005022 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x278>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc fc97 	bl	8001918 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fc fc93 	bl	8001918 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e1b4      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4925      	ldr	r1, [pc, #148]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
 8005020:	e015      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCC_OscConfig+0x278>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fc fc76 	bl	8001918 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005030:	f7fc fc72 	bl	8001918 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e193      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d036      	beq.n	80050c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fc fc56 	bl	8001918 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005070:	f7fc fc52 	bl	8001918 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e173      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x234>
 800508e:	e01b      	b.n	80050c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fc fc3f 	bl	8001918 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	e00e      	b.n	80050bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509e:	f7fc fc3b 	bl	8001918 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d907      	bls.n	80050bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e15c      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
 80050b0:	40023800 	.word	0x40023800
 80050b4:	42470000 	.word	0x42470000
 80050b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	4b8a      	ldr	r3, [pc, #552]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ea      	bne.n	800509e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8097 	beq.w	8005204 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050da:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b7f      	ldr	r3, [pc, #508]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4a7e      	ldr	r2, [pc, #504]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6413      	str	r3, [r2, #64]	; 0x40
 80050f6:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b79      	ldr	r3, [pc, #484]	; (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a75      	ldr	r2, [pc, #468]	; (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7fc fbfb 	bl	8001918 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7fc fbf7 	bl	8001918 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e118      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b6c      	ldr	r3, [pc, #432]	; (80052ec <HAL_RCC_OscConfig+0x4b0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x31e>
 800514c:	4b66      	ldr	r3, [pc, #408]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a65      	ldr	r2, [pc, #404]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	e01c      	b.n	8005194 <HAL_RCC_OscConfig+0x358>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x340>
 8005162:	4b61      	ldr	r3, [pc, #388]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a60      	ldr	r2, [pc, #384]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
 800516e:	4b5e      	ldr	r3, [pc, #376]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a5d      	ldr	r2, [pc, #372]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0x358>
 800517c:	4b5a      	ldr	r3, [pc, #360]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4a59      	ldr	r2, [pc, #356]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	; 0x70
 8005188:	4b57      	ldr	r3, [pc, #348]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	4a56      	ldr	r2, [pc, #344]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800518e:	f023 0304 	bic.w	r3, r3, #4
 8005192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fc fbbc 	bl	8001918 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fc fbb8 	bl	8001918 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0d7      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ee      	beq.n	80051a4 <HAL_RCC_OscConfig+0x368>
 80051c6:	e014      	b.n	80051f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fc fba6 	bl	8001918 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fc fba2 	bl	8001918 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0c1      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e6:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ee      	bne.n	80051d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f8:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	4a3a      	ldr	r2, [pc, #232]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80ad 	beq.w	8005368 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b08      	cmp	r3, #8
 8005218:	d060      	beq.n	80052dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d145      	bne.n	80052ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b33      	ldr	r3, [pc, #204]	; (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fb76 	bl	8001918 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc fb72 	bl	8001918 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e093      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	071b      	lsls	r3, r3, #28
 800527a:	491b      	ldr	r1, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fc fb47 	bl	8001918 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528e:	f7fc fb43 	bl	8001918 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e064      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x452>
 80052ac:	e05c      	b.n	8005368 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc fb30 	bl	8001918 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fc fb2c 	bl	8001918 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e04d      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x480>
 80052da:	e045      	b.n	8005368 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e040      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40007000 	.word	0x40007000
 80052f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <HAL_RCC_OscConfig+0x538>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d030      	beq.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d129      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d122      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800532a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800532c:	4293      	cmp	r3, r2
 800532e:	d119      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	3b01      	subs	r3, #1
 800533e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d10f      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 001c 	add.w	r0, r7, #28
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b01      	cmp	r3, #1
 800538e:	d122      	bne.n	80053d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 fb16 	bl	80069fc <USB_CoreReset>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e01a      	b.n	800540c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 fb0a 	bl	80069fc <USB_CoreReset>
 80053e8:	4603      	mov	r3, r0
 80053ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
 80053fe:	e005      	b.n	800540c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10b      	bne.n	800542a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f043 0206 	orr.w	r2, r3, #6
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005436:	b004      	add	sp, #16
 8005438:	4770      	bx	lr
	...

0800543c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d165      	bne.n	800551c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a41      	ldr	r2, [pc, #260]	; (8005558 <USB_SetTurnaroundTime+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0x2a>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a40      	ldr	r2, [pc, #256]	; (800555c <USB_SetTurnaroundTime+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d202      	bcs.n	8005466 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005460:	230f      	movs	r3, #15
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e062      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a3c      	ldr	r2, [pc, #240]	; (800555c <USB_SetTurnaroundTime+0x120>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d306      	bcc.n	800547c <USB_SetTurnaroundTime+0x40>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a3b      	ldr	r2, [pc, #236]	; (8005560 <USB_SetTurnaroundTime+0x124>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d202      	bcs.n	800547c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005476:	230e      	movs	r3, #14
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e057      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a38      	ldr	r2, [pc, #224]	; (8005560 <USB_SetTurnaroundTime+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d306      	bcc.n	8005492 <USB_SetTurnaroundTime+0x56>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a37      	ldr	r2, [pc, #220]	; (8005564 <USB_SetTurnaroundTime+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d202      	bcs.n	8005492 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800548c:	230d      	movs	r3, #13
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e04c      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a33      	ldr	r2, [pc, #204]	; (8005564 <USB_SetTurnaroundTime+0x128>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d306      	bcc.n	80054a8 <USB_SetTurnaroundTime+0x6c>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a32      	ldr	r2, [pc, #200]	; (8005568 <USB_SetTurnaroundTime+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054a2:	230c      	movs	r3, #12
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e041      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <USB_SetTurnaroundTime+0x12c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d906      	bls.n	80054be <USB_SetTurnaroundTime+0x82>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a2e      	ldr	r2, [pc, #184]	; (800556c <USB_SetTurnaroundTime+0x130>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d802      	bhi.n	80054be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054b8:	230b      	movs	r3, #11
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e036      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <USB_SetTurnaroundTime+0x130>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d906      	bls.n	80054d4 <USB_SetTurnaroundTime+0x98>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <USB_SetTurnaroundTime+0x134>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d802      	bhi.n	80054d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ce:	230a      	movs	r3, #10
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e02b      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <USB_SetTurnaroundTime+0x134>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d906      	bls.n	80054ea <USB_SetTurnaroundTime+0xae>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <USB_SetTurnaroundTime+0x138>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d202      	bcs.n	80054ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054e4:	2309      	movs	r3, #9
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e020      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a21      	ldr	r2, [pc, #132]	; (8005574 <USB_SetTurnaroundTime+0x138>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d306      	bcc.n	8005500 <USB_SetTurnaroundTime+0xc4>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4a20      	ldr	r2, [pc, #128]	; (8005578 <USB_SetTurnaroundTime+0x13c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d802      	bhi.n	8005500 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054fa:	2308      	movs	r3, #8
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e015      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <USB_SetTurnaroundTime+0x13c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d906      	bls.n	8005516 <USB_SetTurnaroundTime+0xda>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <USB_SetTurnaroundTime+0x140>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d202      	bcs.n	8005516 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005510:	2307      	movs	r3, #7
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e00a      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005516:	2306      	movs	r3, #6
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e007      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005522:	2309      	movs	r3, #9
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e001      	b.n	800552c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005528:	2309      	movs	r3, #9
 800552a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00d8acbf 	.word	0x00d8acbf
 800555c:	00e4e1c0 	.word	0x00e4e1c0
 8005560:	00f42400 	.word	0x00f42400
 8005564:	01067380 	.word	0x01067380
 8005568:	011a499f 	.word	0x011a499f
 800556c:	01312cff 	.word	0x01312cff
 8005570:	014ca43f 	.word	0x014ca43f
 8005574:	016e3600 	.word	0x016e3600
 8005578:	01a6ab1f 	.word	0x01a6ab1f
 800557c:	01e84800 	.word	0x01e84800

08005580 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d115      	bne.n	8005612 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f7fc f99c 	bl	8001930 <HAL_Delay>
      ms++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 f96c 	bl	80068dc <USB_GetMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d01e      	beq.n	8005648 <USB_SetCurrentMode+0x84>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b31      	cmp	r3, #49	; 0x31
 800560e:	d9f0      	bls.n	80055f2 <USB_SetCurrentMode+0x2e>
 8005610:	e01a      	b.n	8005648 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d115      	bne.n	8005644 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005624:	2001      	movs	r0, #1
 8005626:	f7fc f983 	bl	8001930 <HAL_Delay>
      ms++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 f953 	bl	80068dc <USB_GetMode>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <USB_SetCurrentMode+0x84>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b31      	cmp	r3, #49	; 0x31
 8005640:	d9f0      	bls.n	8005624 <USB_SetCurrentMode+0x60>
 8005642:	e001      	b.n	8005648 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e005      	b.n	8005654 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b32      	cmp	r3, #50	; 0x32
 800564c:	d101      	bne.n	8005652 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800565c:	b084      	sub	sp, #16
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800566a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e009      	b.n	8005690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3340      	adds	r3, #64	; 0x40
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b0e      	cmp	r3, #14
 8005694:	d9f2      	bls.n	800567c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11c      	bne.n	80056d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056aa:	f043 0302 	orr.w	r3, r3, #2
 80056ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e005      	b.n	80056e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	4619      	mov	r1, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	461a      	mov	r2, r3
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10c      	bne.n	8005722 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800570e:	2100      	movs	r1, #0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f945 	bl	80059a0 <USB_SetDevSpeed>
 8005716:	e008      	b.n	800572a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005718:	2101      	movs	r1, #1
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f940 	bl	80059a0 <USB_SetDevSpeed>
 8005720:	e003      	b.n	800572a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005722:	2103      	movs	r1, #3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f93b 	bl	80059a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800572a:	2110      	movs	r1, #16
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8f3 	bl	8005918 <USB_FlushTxFifo>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f90f 	bl	8005960 <USB_FlushRxFifo>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	461a      	mov	r2, r3
 800576c:	2300      	movs	r3, #0
 800576e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e043      	b.n	80057fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578c:	d118      	bne.n	80057c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e013      	b.n	80057d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	429a      	cmp	r2, r3
 8005804:	d3b7      	bcc.n	8005776 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e043      	b.n	8005894 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005822:	d118      	bne.n	8005856 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e013      	b.n	8005868 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e008      	b.n	8005868 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800588c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d3b7      	bcc.n	800580c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f043 0210 	orr.w	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <USB_DevInit+0x2b8>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr
 8005914:	803c3800 	.word	0x803c3800

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <USB_FlushTxFifo+0x44>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e006      	b.n	8005950 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	d0f1      	beq.n	8005932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	00030d40 	.word	0x00030d40

08005960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2210      	movs	r2, #16
 8005970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4a08      	ldr	r2, [pc, #32]	; (800599c <USB_FlushRxFifo+0x3c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e006      	b.n	8005990 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b10      	cmp	r3, #16
 800598c:	d0f1      	beq.n	8005972 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	00030d40 	.word	0x00030d40

080059a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0306 	and.w	r3, r3, #6
 80059ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
 80059f6:	e00a      	b.n	8005a0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d002      	beq.n	8005a04 <USB_GetDevSpeed+0x32>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d102      	bne.n	8005a0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a04:	2302      	movs	r3, #2
 8005a06:	75fb      	strb	r3, [r7, #23]
 8005a08:	e001      	b.n	8005a0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d13a      	bne.n	8005aae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	68f9      	ldr	r1, [r7, #12]
 8005a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d155      	bne.n	8005b1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a94:	4313      	orrs	r3, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	e036      	b.n	8005b1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	2101      	movs	r1, #1
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d11a      	bne.n	8005b1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b02:	430b      	orrs	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d161      	bne.n	8005c0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b5e:	d11f      	bne.n	8005ba0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be4:	4013      	ands	r3, r2
 8005be6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	0159      	lsls	r1, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	440b      	add	r3, r1
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	4619      	mov	r1, r3
 8005c04:	4b35      	ldr	r3, [pc, #212]	; (8005cdc <USB_DeactivateEndpoint+0x1b0>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	600b      	str	r3, [r1, #0]
 8005c0a:	e060      	b.n	8005cce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c22:	d11f      	bne.n	8005c64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c84:	4013      	ands	r3, r2
 8005c86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	0159      	lsls	r1, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <USB_DeactivateEndpoint+0x1b4>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	ec337800 	.word	0xec337800
 8005ce0:	eff37800 	.word	0xeff37800

08005ce4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	f040 815c 	bne.w	8005fbe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d132      	bne.n	8005d74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6c:	0cdb      	lsrs	r3, r3, #19
 8005d6e:	04db      	lsls	r3, r3, #19
 8005d70:	6113      	str	r3, [r2, #16]
 8005d72:	e074      	b.n	8005e5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8e:	0cdb      	lsrs	r3, r3, #19
 8005d90:	04db      	lsls	r3, r3, #19
 8005d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005db6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	440b      	add	r3, r1
 8005dd0:	1e59      	subs	r1, r3, #1
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ddc:	4b9d      	ldr	r3, [pc, #628]	; (8006054 <USB_EPStartXfer+0x370>)
 8005dde:	400b      	ands	r3, r1
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	0148      	lsls	r0, r1, #5
 8005de4:	69f9      	ldr	r1, [r7, #28]
 8005de6:	4401      	add	r1, r0
 8005de8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dec:	4313      	orrs	r3, r2
 8005dee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	69b9      	ldr	r1, [r7, #24]
 8005e08:	0148      	lsls	r0, r1, #5
 8005e0a:	69f9      	ldr	r1, [r7, #28]
 8005e0c:	4401      	add	r1, r0
 8005e0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e12:	4313      	orrs	r3, r2
 8005e14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d11f      	bne.n	8005e5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d14b      	bne.n	8005efc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d128      	bne.n	8005eda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d110      	bne.n	8005eba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e00f      	b.n	8005eda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e12f      	b.n	800615c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d015      	beq.n	8005f50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8117 	beq.w	800615c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	69f9      	ldr	r1, [r7, #28]
 8005f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f4e:	e105      	b.n	800615c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e00f      	b.n	8005fa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	b298      	uxth	r0, r3
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fa2b 	bl	8006412 <USB_WritePacket>
 8005fbc:	e0ce      	b.n	800615c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	0cdb      	lsrs	r3, r3, #19
 8005fda:	04db      	lsls	r3, r3, #19
 8005fdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006000:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d126      	bne.n	8006058 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006020:	69b9      	ldr	r1, [r7, #24]
 8006022:	0148      	lsls	r0, r1, #5
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	4401      	add	r1, r0
 8006028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6113      	str	r3, [r2, #16]
 8006050:	e036      	b.n	80060c0 <USB_EPStartXfer+0x3dc>
 8006052:	bf00      	nop
 8006054:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	695a      	ldr	r2, [r3, #20]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4413      	add	r3, r2
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	8afb      	ldrh	r3, [r7, #22]
 800607e:	04d9      	lsls	r1, r3, #19
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <USB_EPStartXfer+0x484>)
 8006082:	400b      	ands	r3, r1
 8006084:	69b9      	ldr	r1, [r7, #24]
 8006086:	0148      	lsls	r0, r1, #5
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	4401      	add	r1, r0
 800608c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006090:	4313      	orrs	r3, r2
 8006092:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	8af9      	ldrh	r1, [r7, #22]
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	460a      	mov	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	78db      	ldrb	r3, [r3, #3]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d128      	bne.n	800613c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e00f      	b.n	800613c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	1ff80000 	.word	0x1ff80000

0800616c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b01      	cmp	r3, #1
 800618a:	f040 80cd 	bne.w	8006328 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d132      	bne.n	80061fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f4:	0cdb      	lsrs	r3, r3, #19
 80061f6:	04db      	lsls	r3, r3, #19
 80061f8:	6113      	str	r3, [r2, #16]
 80061fa:	e04e      	b.n	800629a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	0cdb      	lsrs	r3, r3, #19
 8006218:	04db      	lsls	r3, r3, #19
 800621a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800623a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800623e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800628a:	6939      	ldr	r1, [r7, #16]
 800628c:	0148      	lsls	r0, r1, #5
 800628e:	6979      	ldr	r1, [r7, #20]
 8006290:	4401      	add	r1, r0
 8006292:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d11e      	bne.n	80062de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e092      	b.n	8006404 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d07e      	beq.n	8006404 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	2101      	movs	r1, #1
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006322:	4313      	orrs	r3, r2
 8006324:	634b      	str	r3, [r1, #52]	; 0x34
 8006326:	e06d      	b.n	8006404 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006342:	0cdb      	lsrs	r3, r3, #19
 8006344:	04db      	lsls	r3, r3, #19
 8006346:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006362:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006366:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800636a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800639a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b2:	6939      	ldr	r1, [r7, #16]
 80063b4:	0148      	lsls	r0, r1, #5
 80063b6:	6979      	ldr	r1, [r7, #20]
 80063b8:	4401      	add	r1, r0
 80063ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10d      	bne.n	80063e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	68d9      	ldr	r1, [r3, #12]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	460a      	mov	r2, r1
 80063e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006412:	b480      	push	{r7}
 8006414:	b089      	sub	sp, #36	; 0x24
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	4611      	mov	r1, r2
 800641e:	461a      	mov	r2, r3
 8006420:	460b      	mov	r3, r1
 8006422:	71fb      	strb	r3, [r7, #7]
 8006424:	4613      	mov	r3, r2
 8006426:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006430:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d123      	bne.n	8006480 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006438:	88bb      	ldrh	r3, [r7, #4]
 800643a:	3303      	adds	r3, #3
 800643c:	089b      	lsrs	r3, r3, #2
 800643e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e018      	b.n	8006478 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	031a      	lsls	r2, r3, #12
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006452:	461a      	mov	r2, r3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6013      	str	r3, [r2, #0]
      pSrc++;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	3301      	adds	r3, #1
 8006464:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3301      	adds	r3, #1
 800646a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	3301      	adds	r3, #1
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d3e2      	bcc.n	8006446 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3724      	adds	r7, #36	; 0x24
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800648e:	b480      	push	{r7}
 8006490:	b08b      	sub	sp, #44	; 0x2c
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	089b      	lsrs	r3, r3, #2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	e014      	b.n	80064e4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	601a      	str	r2, [r3, #0]
    pDest++;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	3301      	adds	r3, #1
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	3301      	adds	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	3301      	adds	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	3301      	adds	r3, #1
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d3e6      	bcc.n	80064ba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ec:	8bfb      	ldrh	r3, [r7, #30]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01e      	beq.n	8006530 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	461a      	mov	r2, r3
 80064fe:	f107 0310 	add.w	r3, r7, #16
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	b2da      	uxtb	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	701a      	strb	r2, [r3, #0]
      i++;
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	3301      	adds	r3, #1
 800651c:	623b      	str	r3, [r7, #32]
      pDest++;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006524:	8bfb      	ldrh	r3, [r7, #30]
 8006526:	3b01      	subs	r3, #1
 8006528:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800652a:	8bfb      	ldrh	r3, [r7, #30]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ea      	bne.n	8006506 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006532:	4618      	mov	r0, r3
 8006534:	372c      	adds	r7, #44	; 0x2c
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d12c      	bne.n	80065b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	db12      	blt.n	8006592 <USB_EPSetStall+0x54>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00f      	beq.n	8006592 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006590:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e02b      	b.n	800660c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	db12      	blt.n	80065ec <USB_EPSetStall+0xae>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00f      	beq.n	80065ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	440a      	add	r2, r1
 8006602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800660a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d128      	bne.n	8006688 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	78db      	ldrb	r3, [r3, #3]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d003      	beq.n	8006666 <USB_EPClearStall+0x4c>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	78db      	ldrb	r3, [r3, #3]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d138      	bne.n	80066d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e027      	b.n	80066d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d003      	beq.n	80066b8 <USB_EPClearStall+0x9e>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	78db      	ldrb	r3, [r3, #3]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d10f      	bne.n	80066d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006708:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006720:	4313      	orrs	r3, r2
 8006722:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800674c:	f023 0303 	bic.w	r3, r3, #3
 8006750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a2:	f043 0302 	orr.w	r3, r3, #2
 80067a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	0c1b      	lsrs	r3, r3, #16
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	b29b      	uxth	r3, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	4013      	ands	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006872:	68bb      	ldr	r3, [r7, #8]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	01db      	lsls	r3, r3, #7
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ce:	68bb      	ldr	r3, [r7, #8]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	460b      	mov	r3, r1
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	333c      	adds	r3, #60	; 0x3c
 8006956:	3304      	adds	r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <USB_EP0_OutStart+0xb8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d90a      	bls.n	800697a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006974:	d101      	bne.n	800697a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e037      	b.n	80069ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a8:	f043 0318 	orr.w	r3, r3, #24
 80069ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10f      	bne.n	80069e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	4f54300a 	.word	0x4f54300a

080069fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <USB_CoreReset+0x60>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e01a      	b.n	8006a4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	daf3      	bge.n	8006a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <USB_CoreReset+0x60>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d901      	bls.n	8006a40 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d0f1      	beq.n	8006a30 <USB_CoreReset+0x34>

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	00030d40 	.word	0x00030d40

08006a60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a70:	f002 f9fc 	bl	8008e6c <USBD_static_malloc>
 8006a74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a84:	2302      	movs	r3, #2
 8006a86:	e066      	b.n	8006b56 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	7c1b      	ldrb	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d119      	bne.n	8006acc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	2181      	movs	r1, #129	; 0x81
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 f872 	bl	8008b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 f868 	bl	8008b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006aca:	e016      	b.n	8006afa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	2202      	movs	r2, #2
 8006ad0:	2181      	movs	r1, #129	; 0x81
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f002 f859 	bl	8008b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f850 	bl	8008b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2210      	movs	r2, #16
 8006af6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006afa:	2308      	movs	r3, #8
 8006afc:	2203      	movs	r2, #3
 8006afe:	2182      	movs	r1, #130	; 0x82
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f002 f842 	bl	8008b8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7c1b      	ldrb	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d109      	bne.n	8006b44 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 f913 	bl	8008d68 <USBD_LL_PrepareReceive>
 8006b42:	e007      	b.n	8006b54 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 f90a 	bl	8008d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b6a:	2181      	movs	r1, #129	; 0x81
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f002 f832 	bl	8008bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b78:	2101      	movs	r1, #1
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f002 f82b 	bl	8008bd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b88:	2182      	movs	r1, #130	; 0x82
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f002 f823 	bl	8008bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 f964 	bl	8008e88 <USBD_static_free>
    pdev->pClassData = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e0af      	b.n	8006d5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d03f      	beq.n	8006c88 <USBD_CDC_Setup+0xb4>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	f040 809f 	bne.w	8006d4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02e      	beq.n	8006c74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da16      	bge.n	8006c4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006c2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	88d2      	ldrh	r2, [r2, #6]
 8006c32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	88db      	ldrh	r3, [r3, #6]
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	bf28      	it	cs
 8006c3c:	2307      	movcs	r3, #7
 8006c3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	89fa      	ldrh	r2, [r7, #14]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fb43 	bl	80082d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006c4c:	e085      	b.n	8006d5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	785a      	ldrb	r2, [r3, #1]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	88db      	ldrh	r3, [r3, #6]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c64:	6939      	ldr	r1, [r7, #16]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	88db      	ldrh	r3, [r3, #6]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fb5c 	bl	800832a <USBD_CtlPrepareRx>
      break;
 8006c72:	e072      	b.n	8006d5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	7850      	ldrb	r0, [r2, #1]
 8006c80:	2200      	movs	r2, #0
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	4798      	blx	r3
      break;
 8006c86:	e068      	b.n	8006d5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	2b0b      	cmp	r3, #11
 8006c8e:	d852      	bhi.n	8006d36 <USBD_CDC_Setup+0x162>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <USBD_CDC_Setup+0xc4>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006d45 	.word	0x08006d45
 8006ca0:	08006d37 	.word	0x08006d37
 8006ca4:	08006d37 	.word	0x08006d37
 8006ca8:	08006d37 	.word	0x08006d37
 8006cac:	08006d37 	.word	0x08006d37
 8006cb0:	08006d37 	.word	0x08006d37
 8006cb4:	08006d37 	.word	0x08006d37
 8006cb8:	08006d37 	.word	0x08006d37
 8006cbc:	08006d37 	.word	0x08006d37
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006d1d 	.word	0x08006d1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d107      	bne.n	8006ce4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cd4:	f107 030a 	add.w	r3, r7, #10
 8006cd8:	2202      	movs	r2, #2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 faf8 	bl	80082d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ce2:	e032      	b.n	8006d4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fa82 	bl	80081f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf0:	e02b      	b.n	8006d4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d107      	bne.n	8006d0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cfe:	f107 030d 	add.w	r3, r7, #13
 8006d02:	2201      	movs	r2, #1
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fae3 	bl	80082d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d0c:	e01d      	b.n	8006d4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 fa6d 	bl	80081f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d16:	2303      	movs	r3, #3
 8006d18:	75fb      	strb	r3, [r7, #23]
          break;
 8006d1a:	e016      	b.n	8006d4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d00f      	beq.n	8006d48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fa60 	bl	80081f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d34:	e008      	b.n	8006d48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fa59 	bl	80081f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	75fb      	strb	r3, [r7, #23]
          break;
 8006d42:	e002      	b.n	8006d4a <USBD_CDC_Setup+0x176>
          break;
 8006d44:	bf00      	nop
 8006d46:	e008      	b.n	8006d5a <USBD_CDC_Setup+0x186>
          break;
 8006d48:	bf00      	nop
      }
      break;
 8006d4a:	e006      	b.n	8006d5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa4e 	bl	80081f0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	75fb      	strb	r3, [r7, #23]
      break;
 8006d58:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e04f      	b.n	8006e26 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d029      	beq.n	8006df8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	3318      	adds	r3, #24
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	78f9      	ldrb	r1, [r7, #3]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	1a5b      	subs	r3, r3, r1
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4403      	add	r3, r0
 8006dc4:	3344      	adds	r3, #68	; 0x44
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dcc:	fb03 f301 	mul.w	r3, r3, r1
 8006dd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d110      	bne.n	8006df8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	3318      	adds	r3, #24
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dea:	78f9      	ldrb	r1, [r7, #3]
 8006dec:	2300      	movs	r3, #0
 8006dee:	2200      	movs	r2, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff98 	bl	8008d26 <USBD_LL_Transmit>
 8006df6:	e015      	b.n	8006e24 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e015      	b.n	8006e7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 ffa8 	bl	8008daa <USBD_LL_GetRxDataSize>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e76:	4611      	mov	r1, r2
 8006e78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e01b      	b.n	8006ed6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d015      	beq.n	8006ed4 <USBD_CDC_EP0_RxReady+0x50>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006eae:	2bff      	cmp	r3, #255	; 0xff
 8006eb0:	d010      	beq.n	8006ed4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006ec0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	22ff      	movs	r2, #255	; 0xff
 8006ed0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2243      	movs	r2, #67	; 0x43
 8006eec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006eee:	4b03      	ldr	r3, [pc, #12]	; (8006efc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000094 	.word	0x20000094

08006f00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2243      	movs	r2, #67	; 0x43
 8006f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000050 	.word	0x20000050

08006f20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2243      	movs	r2, #67	; 0x43
 8006f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	200000d8 	.word	0x200000d8

08006f40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	2000000c 	.word	0x2000000c

08006f60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e004      	b.n	8006f7e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e008      	b.n	8006fba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e004      	b.n	8006fec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007006:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	e01a      	b.n	8007050 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007020:	2b00      	cmp	r3, #0
 8007022:	d114      	bne.n	800704e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2201      	movs	r2, #1
 8007028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007042:	2181      	movs	r1, #129	; 0x81
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fe6e 	bl	8008d26 <USBD_LL_Transmit>

    ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	e016      	b.n	80070a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7c1b      	ldrb	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007088:	2101      	movs	r1, #1
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fe6c 	bl	8008d68 <USBD_LL_PrepareReceive>
 8007090:	e007      	b.n	80070a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	2101      	movs	r1, #1
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fe63 	bl	8008d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e01f      	b.n	8007104 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	79fa      	ldrb	r2, [r7, #7]
 80070f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f001 fcdf 	bl	8008abc <USBD_LL_Init>
 80070fe:	4603      	mov	r3, r0
 8007100:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e016      	b.n	8007152 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f107 020e 	add.w	r2, r7, #14
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	4602      	mov	r2, r0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fcf6 	bl	8008b54 <USBD_LL_Start>
 8007168:	4603      	mov	r3, r0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	4611      	mov	r1, r2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	78fa      	ldrb	r2, [r7, #3]
 80071e0:	4611      	mov	r1, r2
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
  }

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 ffba 	bl	800817c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2b02      	cmp	r3, #2
 800722a:	d01a      	beq.n	8007262 <USBD_LL_SetupStage+0x72>
 800722c:	2b02      	cmp	r3, #2
 800722e:	d822      	bhi.n	8007276 <USBD_LL_SetupStage+0x86>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <USBD_LL_SetupStage+0x4a>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d00a      	beq.n	800724e <USBD_LL_SetupStage+0x5e>
 8007238:	e01d      	b.n	8007276 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa62 	bl	800770c <USBD_StdDevReq>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
      break;
 800724c:	e020      	b.n	8007290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fac6 	bl	80077e8 <USBD_StdItfReq>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e016      	b.n	8007290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb05 	bl	800787a <USBD_StdEPReq>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
      break;
 8007274:	e00c      	b.n	8007290 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800727c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007280:	b2db      	uxtb	r3, r3
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fcc5 	bl	8008c14 <USBD_LL_StallEP>
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]
      break;
 800728e:	bf00      	nop
  }

  return ret;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	460b      	mov	r3, r1
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d138      	bne.n	8007320 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d14a      	bne.n	8007356 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d913      	bls.n	80072f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	1ad2      	subs	r2, r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4293      	cmp	r3, r2
 80072e4:	bf28      	it	cs
 80072e6:	4613      	movcs	r3, r2
 80072e8:	461a      	mov	r2, r3
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f001 f839 	bl	8008364 <USBD_CtlContinueRx>
 80072f2:	e030      	b.n	8007356 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d10b      	bne.n	8007318 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f001 f834 	bl	8008386 <USBD_CtlSendStatus>
 800731e:	e01a      	b.n	8007356 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b03      	cmp	r3, #3
 800732a:	d114      	bne.n	8007356 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	7afa      	ldrb	r2, [r7, #11]
 8007342:	4611      	mov	r1, r2
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	4798      	blx	r3
 8007348:	4603      	mov	r3, r0
 800734a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	e000      	b.n	8007358 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	460b      	mov	r3, r1
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d16b      	bne.n	800744c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3314      	adds	r3, #20
 8007378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007380:	2b02      	cmp	r3, #2
 8007382:	d156      	bne.n	8007432 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d914      	bls.n	80073ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 ffae 	bl	8008308 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ac:	2300      	movs	r3, #0
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f001 fcd8 	bl	8008d68 <USBD_LL_PrepareReceive>
 80073b8:	e03b      	b.n	8007432 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d11c      	bne.n	8007400 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d316      	bcc.n	8007400 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073dc:	429a      	cmp	r2, r3
 80073de:	d20f      	bcs.n	8007400 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073e0:	2200      	movs	r2, #0
 80073e2:	2100      	movs	r1, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 ff8f 	bl	8008308 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f2:	2300      	movs	r3, #0
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f001 fcb5 	bl	8008d68 <USBD_LL_PrepareReceive>
 80073fe:	e018      	b.n	8007432 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d10b      	bne.n	8007424 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007424:	2180      	movs	r1, #128	; 0x80
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f001 fbf4 	bl	8008c14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 ffbd 	bl	80083ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007438:	2b01      	cmp	r3, #1
 800743a:	d122      	bne.n	8007482 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fe98 	bl	8007172 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800744a:	e01a      	b.n	8007482 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b03      	cmp	r3, #3
 8007456:	d114      	bne.n	8007482 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	7afa      	ldrb	r2, [r7, #11]
 800746e:	4611      	mov	r1, r2
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	4798      	blx	r3
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	e000      	b.n	8007484 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	e02f      	b.n	8007520 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	4611      	mov	r1, r2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fb4a 	bl	8008b8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2240      	movs	r2, #64	; 0x40
 8007502:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007506:	2340      	movs	r3, #64	; 0x40
 8007508:	2200      	movs	r2, #0
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fb3c 	bl	8008b8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2240      	movs	r2, #64	; 0x40
 800751c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	b2da      	uxtb	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2204      	movs	r2, #4
 8007562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b04      	cmp	r3, #4
 8007586:	d106      	bne.n	8007596 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800758e:	b2da      	uxtb	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e012      	b.n	80075e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d10b      	bne.n	80075de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	e014      	b.n	800762c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b03      	cmp	r3, #3
 800760c:	d10d      	bne.n	800762a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	4611      	mov	r1, r2
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	e014      	b.n	8007678 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d10d      	bne.n	8007676 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	4611      	mov	r1, r2
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6852      	ldr	r2, [r2, #4]
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	4611      	mov	r1, r2
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
  }

  return USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	3301      	adds	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076ec:	8a3b      	ldrh	r3, [r7, #16]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	b21b      	sxth	r3, r3
 80076fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076fc:	89fb      	ldrh	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	371c      	adds	r7, #28
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d005      	beq.n	8007732 <USBD_StdDevReq+0x26>
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d853      	bhi.n	80077d2 <USBD_StdDevReq+0xc6>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <USBD_StdDevReq+0x3a>
 800772e:	2b20      	cmp	r3, #32
 8007730:	d14f      	bne.n	80077d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
      break;
 8007744:	e04a      	b.n	80077dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b09      	cmp	r3, #9
 800774c:	d83b      	bhi.n	80077c6 <USBD_StdDevReq+0xba>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBD_StdDevReq+0x48>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	080077a9 	.word	0x080077a9
 8007758:	080077bd 	.word	0x080077bd
 800775c:	080077c7 	.word	0x080077c7
 8007760:	080077b3 	.word	0x080077b3
 8007764:	080077c7 	.word	0x080077c7
 8007768:	08007787 	.word	0x08007787
 800776c:	0800777d 	.word	0x0800777d
 8007770:	080077c7 	.word	0x080077c7
 8007774:	0800779f 	.word	0x0800779f
 8007778:	08007791 	.word	0x08007791
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9de 	bl	8007b40 <USBD_GetDescriptor>
          break;
 8007784:	e024      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fb6d 	bl	8007e68 <USBD_SetAddress>
          break;
 800778e:	e01f      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbac 	bl	8007ef0 <USBD_SetConfig>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]
          break;
 800779c:	e018      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fc4b 	bl	800803c <USBD_GetConfig>
          break;
 80077a6:	e013      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fc7c 	bl	80080a8 <USBD_GetStatus>
          break;
 80077b0:	e00e      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fcab 	bl	8008110 <USBD_SetFeature>
          break;
 80077ba:	e009      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fcba 	bl	8008138 <USBD_ClrFeature>
          break;
 80077c4:	e004      	b.n	80077d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fd11 	bl	80081f0 <USBD_CtlError>
          break;
 80077ce:	bf00      	nop
      }
      break;
 80077d0:	e004      	b.n	80077dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fd0b 	bl	80081f0 <USBD_CtlError>
      break;
 80077da:	bf00      	nop
  }

  return ret;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d005      	beq.n	800780e <USBD_StdItfReq+0x26>
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d82f      	bhi.n	8007866 <USBD_StdItfReq+0x7e>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <USBD_StdItfReq+0x26>
 800780a:	2b20      	cmp	r3, #32
 800780c:	d12b      	bne.n	8007866 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007814:	b2db      	uxtb	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	2b02      	cmp	r3, #2
 800781a:	d81d      	bhi.n	8007858 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	889b      	ldrh	r3, [r3, #4]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	d813      	bhi.n	800784e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d110      	bne.n	8007862 <USBD_StdItfReq+0x7a>
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10d      	bne.n	8007862 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fd9d 	bl	8008386 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800784c:	e009      	b.n	8007862 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fccd 	bl	80081f0 <USBD_CtlError>
          break;
 8007856:	e004      	b.n	8007862 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fcc8 	bl	80081f0 <USBD_CtlError>
          break;
 8007860:	e000      	b.n	8007864 <USBD_StdItfReq+0x7c>
          break;
 8007862:	bf00      	nop
      }
      break;
 8007864:	e004      	b.n	8007870 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fcc1 	bl	80081f0 <USBD_CtlError>
      break;
 800786e:	bf00      	nop
  }

  return ret;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	889b      	ldrh	r3, [r3, #4]
 800788c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d007      	beq.n	80078aa <USBD_StdEPReq+0x30>
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	f200 8145 	bhi.w	8007b2a <USBD_StdEPReq+0x2b0>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00c      	beq.n	80078be <USBD_StdEPReq+0x44>
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	f040 8140 	bne.w	8007b2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
      break;
 80078bc:	e13a      	b.n	8007b34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d007      	beq.n	80078d6 <USBD_StdEPReq+0x5c>
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	f300 8129 	bgt.w	8007b1e <USBD_StdEPReq+0x2a4>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d07f      	beq.n	80079d0 <USBD_StdEPReq+0x156>
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d03c      	beq.n	800794e <USBD_StdEPReq+0xd4>
 80078d4:	e123      	b.n	8007b1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d002      	beq.n	80078e8 <USBD_StdEPReq+0x6e>
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d016      	beq.n	8007914 <USBD_StdEPReq+0x9a>
 80078e6:	e02c      	b.n	8007942 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <USBD_StdEPReq+0x90>
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b80      	cmp	r3, #128	; 0x80
 80078f2:	d00a      	beq.n	800790a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f98b 	bl	8008c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078fe:	2180      	movs	r1, #128	; 0x80
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f987 	bl	8008c14 <USBD_LL_StallEP>
 8007906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007908:	e020      	b.n	800794c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc6f 	bl	80081f0 <USBD_CtlError>
              break;
 8007912:	e01b      	b.n	800794c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	885b      	ldrh	r3, [r3, #2]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10e      	bne.n	800793a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <USBD_StdEPReq+0xc0>
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b80      	cmp	r3, #128	; 0x80
 8007926:	d008      	beq.n	800793a <USBD_StdEPReq+0xc0>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	88db      	ldrh	r3, [r3, #6]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f96d 	bl	8008c14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fd23 	bl	8008386 <USBD_CtlSendStatus>

              break;
 8007940:	e004      	b.n	800794c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fc53 	bl	80081f0 <USBD_CtlError>
              break;
 800794a:	bf00      	nop
          }
          break;
 800794c:	e0ec      	b.n	8007b28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d002      	beq.n	8007960 <USBD_StdEPReq+0xe6>
 800795a:	2b03      	cmp	r3, #3
 800795c:	d016      	beq.n	800798c <USBD_StdEPReq+0x112>
 800795e:	e030      	b.n	80079c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <USBD_StdEPReq+0x108>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d00a      	beq.n	8007982 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f94f 	bl	8008c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007976:	2180      	movs	r1, #128	; 0x80
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f94b 	bl	8008c14 <USBD_LL_StallEP>
 800797e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007980:	e025      	b.n	80079ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc33 	bl	80081f0 <USBD_CtlError>
              break;
 800798a:	e020      	b.n	80079ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	885b      	ldrh	r3, [r3, #2]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11b      	bne.n	80079cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f955 	bl	8008c52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fcec 	bl	8008386 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80079c0:	e004      	b.n	80079cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc13 	bl	80081f0 <USBD_CtlError>
              break;
 80079ca:	e000      	b.n	80079ce <USBD_StdEPReq+0x154>
              break;
 80079cc:	bf00      	nop
          }
          break;
 80079ce:	e0ab      	b.n	8007b28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d002      	beq.n	80079e2 <USBD_StdEPReq+0x168>
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d032      	beq.n	8007a46 <USBD_StdEPReq+0x1cc>
 80079e0:	e097      	b.n	8007b12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <USBD_StdEPReq+0x17e>
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d004      	beq.n	80079f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fbfd 	bl	80081f0 <USBD_CtlError>
                break;
 80079f6:	e091      	b.n	8007b1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	da0b      	bge.n	8007a18 <USBD_StdEPReq+0x19e>
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	3310      	adds	r3, #16
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	3304      	adds	r3, #4
 8007a16:	e00b      	b.n	8007a30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3304      	adds	r3, #4
 8007a30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fc47 	bl	80082d2 <USBD_CtlSendData>
              break;
 8007a44:	e06a      	b.n	8007b1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da11      	bge.n	8007a72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	f003 020f 	and.w	r2, r3, #15
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	3324      	adds	r3, #36	; 0x24
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d117      	bne.n	8007a98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fbc0 	bl	80081f0 <USBD_CtlError>
                  break;
 8007a70:	e054      	b.n	8007b1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	f003 020f 	and.w	r2, r3, #15
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbad 	bl	80081f0 <USBD_CtlError>
                  break;
 8007a96:	e041      	b.n	8007b1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da0b      	bge.n	8007ab8 <USBD_StdEPReq+0x23e>
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	3310      	adds	r3, #16
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	e00b      	b.n	8007ad0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <USBD_StdEPReq+0x264>
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b80      	cmp	r3, #128	; 0x80
 8007adc:	d103      	bne.n	8007ae6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e00e      	b.n	8007b04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f8d0 	bl	8008c90 <USBD_LL_IsStallEP>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e002      	b.n	8007b04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2202      	movs	r2, #2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fbe1 	bl	80082d2 <USBD_CtlSendData>
              break;
 8007b10:	e004      	b.n	8007b1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fb6b 	bl	80081f0 <USBD_CtlError>
              break;
 8007b1a:	bf00      	nop
          }
          break;
 8007b1c:	e004      	b.n	8007b28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fb65 	bl	80081f0 <USBD_CtlError>
          break;
 8007b26:	bf00      	nop
      }
      break;
 8007b28:	e004      	b.n	8007b34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb5f 	bl	80081f0 <USBD_CtlError>
      break;
 8007b32:	bf00      	nop
  }

  return ret;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	885b      	ldrh	r3, [r3, #2]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2b0e      	cmp	r3, #14
 8007b62:	f200 8152 	bhi.w	8007e0a <USBD_GetDescriptor+0x2ca>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBD_GetDescriptor+0x2c>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007bdd 	.word	0x08007bdd
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007c35 	.word	0x08007c35
 8007b78:	08007e0b 	.word	0x08007e0b
 8007b7c:	08007e0b 	.word	0x08007e0b
 8007b80:	08007dab 	.word	0x08007dab
 8007b84:	08007dd7 	.word	0x08007dd7
 8007b88:	08007e0b 	.word	0x08007e0b
 8007b8c:	08007e0b 	.word	0x08007e0b
 8007b90:	08007e0b 	.word	0x08007e0b
 8007b94:	08007e0b 	.word	0x08007e0b
 8007b98:	08007e0b 	.word	0x08007e0b
 8007b9c:	08007e0b 	.word	0x08007e0b
 8007ba0:	08007e0b 	.word	0x08007e0b
 8007ba4:	08007ba9 	.word	0x08007ba9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bca:	e126      	b.n	8007e1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb0e 	bl	80081f0 <USBD_CtlError>
        err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bda:	e11e      	b.n	8007e1a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
      break;
 8007bf2:	e112      	b.n	8007e1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7c1b      	ldrb	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	f107 0208 	add.w	r2, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	2202      	movs	r2, #2
 8007c14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c16:	e100      	b.n	8007e1a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	f107 0208 	add.w	r2, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	2202      	movs	r2, #2
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e0f2      	b.n	8007e1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	f200 80ac 	bhi.w	8007d98 <USBD_GetDescriptor+0x258>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <USBD_GetDescriptor+0x108>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c61 	.word	0x08007c61
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007cc9 	.word	0x08007cc9
 8007c54:	08007cfd 	.word	0x08007cfd
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007d65 	.word	0x08007d65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c82:	e091      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fab2 	bl	80081f0 <USBD_CtlError>
            err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
          break;
 8007c92:	e089      	b.n	8007da8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cb6:	e077      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa98 	bl	80081f0 <USBD_CtlError>
            err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cc6:	e06f      	b.n	8007da8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cea:	e05d      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa7e 	bl	80081f0 <USBD_CtlError>
            err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfa:	e055      	b.n	8007da8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d1e:	e043      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa64 	bl	80081f0 <USBD_CtlError>
            err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d2e:	e03b      	b.n	8007da8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d52:	e029      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa4a 	bl	80081f0 <USBD_CtlError>
            err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
          break;
 8007d62:	e021      	b.n	8007da8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d86:	e00f      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa30 	bl	80081f0 <USBD_CtlError>
            err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
          break;
 8007d96:	e007      	b.n	8007da8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa28 	bl	80081f0 <USBD_CtlError>
          err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007da6:	bf00      	nop
      }
      break;
 8007da8:	e037      	b.n	8007e1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7c1b      	ldrb	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	f107 0208 	add.w	r2, r7, #8
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4798      	blx	r3
 8007dc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc4:	e029      	b.n	8007e1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa11 	bl	80081f0 <USBD_CtlError>
        err++;
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd4:	e021      	b.n	8007e1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7c1b      	ldrb	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10d      	bne.n	8007dfa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	f107 0208 	add.w	r2, r7, #8
 8007dea:	4610      	mov	r0, r2
 8007dec:	4798      	blx	r3
 8007dee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	2207      	movs	r2, #7
 8007df6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df8:	e00f      	b.n	8007e1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9f7 	bl	80081f0 <USBD_CtlError>
        err++;
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	3301      	adds	r3, #1
 8007e06:	72fb      	strb	r3, [r7, #11]
      break;
 8007e08:	e007      	b.n	8007e1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9ef 	bl	80081f0 <USBD_CtlError>
      err++;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	3301      	adds	r3, #1
 8007e16:	72fb      	strb	r3, [r7, #11]
      break;
 8007e18:	bf00      	nop
  }

  if (err != 0U)
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d11e      	bne.n	8007e5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d016      	beq.n	8007e56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007e28:	893b      	ldrh	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88da      	ldrh	r2, [r3, #6]
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bf28      	it	cs
 8007e38:	4613      	movcs	r3, r2
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	461a      	mov	r2, r3
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa44 	bl	80082d2 <USBD_CtlSendData>
 8007e4a:	e009      	b.n	8007e60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9ce 	bl	80081f0 <USBD_CtlError>
 8007e54:	e004      	b.n	8007e60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa95 	bl	8008386 <USBD_CtlSendStatus>
 8007e5c:	e000      	b.n	8007e60 <USBD_GetDescriptor+0x320>
    return;
 8007e5e:	bf00      	nop
  }
}
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop

08007e68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	889b      	ldrh	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d131      	bne.n	8007ede <USBD_SetAddress+0x76>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d12d      	bne.n	8007ede <USBD_SetAddress+0x76>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	885b      	ldrh	r3, [r3, #2]
 8007e86:	2b7f      	cmp	r3, #127	; 0x7f
 8007e88:	d829      	bhi.n	8007ede <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d104      	bne.n	8007eac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f9a3 	bl	80081f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	e01d      	b.n	8007ee8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 ff15 	bl	8008ce8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa61 	bl	8008386 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	e009      	b.n	8007ee8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007edc:	e004      	b.n	8007ee8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f985 	bl	80081f0 <USBD_CtlError>
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	4b4c      	ldr	r3, [pc, #304]	; (8008038 <USBD_SetConfig+0x148>)
 8007f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f08:	4b4b      	ldr	r3, [pc, #300]	; (8008038 <USBD_SetConfig+0x148>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d905      	bls.n	8007f1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f96c 	bl	80081f0 <USBD_CtlError>
    return USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e088      	b.n	800802e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d002      	beq.n	8007f2e <USBD_SetConfig+0x3e>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d025      	beq.n	8007f78 <USBD_SetConfig+0x88>
 8007f2c:	e071      	b.n	8008012 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f2e:	4b42      	ldr	r3, [pc, #264]	; (8008038 <USBD_SetConfig+0x148>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01c      	beq.n	8007f70 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f36:	4b40      	ldr	r3, [pc, #256]	; (8008038 <USBD_SetConfig+0x148>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f40:	4b3d      	ldr	r3, [pc, #244]	; (8008038 <USBD_SetConfig+0x148>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff f91e 	bl	8007188 <USBD_SetClassConfig>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f949 	bl	80081f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f5e:	e065      	b.n	800802c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa10 	bl	8008386 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f6e:	e05d      	b.n	800802c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fa08 	bl	8008386 <USBD_CtlSendStatus>
      break;
 8007f76:	e059      	b.n	800802c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f78:	4b2f      	ldr	r3, [pc, #188]	; (8008038 <USBD_SetConfig+0x148>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d112      	bne.n	8007fa6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f88:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <USBD_SetConfig+0x148>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f92:	4b29      	ldr	r3, [pc, #164]	; (8008038 <USBD_SetConfig+0x148>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff f911 	bl	80071c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f9f1 	bl	8008386 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fa4:	e042      	b.n	800802c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <USBD_SetConfig+0x148>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d02a      	beq.n	800800a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff f8ff 	bl	80071c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fc2:	4b1d      	ldr	r3, [pc, #116]	; (8008038 <USBD_SetConfig+0x148>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <USBD_SetConfig+0x148>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff f8d8 	bl	8007188 <USBD_SetClassConfig>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f903 	bl	80081f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff f8e4 	bl	80071c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008000:	e014      	b.n	800802c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f9bf 	bl	8008386 <USBD_CtlSendStatus>
      break;
 8008008:	e010      	b.n	800802c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f9bb 	bl	8008386 <USBD_CtlSendStatus>
      break;
 8008010:	e00c      	b.n	800802c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8eb 	bl	80081f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <USBD_SetConfig+0x148>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff f8cd 	bl	80071c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008026:	2303      	movs	r3, #3
 8008028:	73fb      	strb	r3, [r7, #15]
      break;
 800802a:	bf00      	nop
  }

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000380 	.word	0x20000380

0800803c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d004      	beq.n	8008058 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8cd 	bl	80081f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008056:	e023      	b.n	80080a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	dc02      	bgt.n	800806a <USBD_GetConfig+0x2e>
 8008064:	2b00      	cmp	r3, #0
 8008066:	dc03      	bgt.n	8008070 <USBD_GetConfig+0x34>
 8008068:	e015      	b.n	8008096 <USBD_GetConfig+0x5a>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d00b      	beq.n	8008086 <USBD_GetConfig+0x4a>
 800806e:	e012      	b.n	8008096 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3308      	adds	r3, #8
 800807a:	2201      	movs	r2, #1
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f927 	bl	80082d2 <USBD_CtlSendData>
        break;
 8008084:	e00c      	b.n	80080a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3304      	adds	r3, #4
 800808a:	2201      	movs	r2, #1
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f91f 	bl	80082d2 <USBD_CtlSendData>
        break;
 8008094:	e004      	b.n	80080a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8a9 	bl	80081f0 <USBD_CtlError>
        break;
 800809e:	bf00      	nop
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d81e      	bhi.n	80080fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	88db      	ldrh	r3, [r3, #6]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d004      	beq.n	80080d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f890 	bl	80081f0 <USBD_CtlError>
        break;
 80080d0:	e01a      	b.n	8008108 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f043 0202 	orr.w	r2, r3, #2
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	330c      	adds	r3, #12
 80080f2:	2202      	movs	r2, #2
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8eb 	bl	80082d2 <USBD_CtlSendData>
      break;
 80080fc:	e004      	b.n	8008108 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f875 	bl	80081f0 <USBD_CtlError>
      break;
 8008106:	bf00      	nop
  }
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	885b      	ldrh	r3, [r3, #2]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d106      	bne.n	8008130 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f92b 	bl	8008386 <USBD_CtlSendStatus>
  }
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	2b02      	cmp	r3, #2
 800814e:	d80b      	bhi.n	8008168 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10c      	bne.n	8008172 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f910 	bl	8008386 <USBD_CtlSendStatus>
      }
      break;
 8008166:	e004      	b.n	8008172 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f840 	bl	80081f0 <USBD_CtlError>
      break;
 8008170:	e000      	b.n	8008174 <USBD_ClrFeature+0x3c>
      break;
 8008172:	bf00      	nop
  }
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3301      	adds	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff fa91 	bl	80076ce <SWAPBYTE>
 80081ac:	4603      	mov	r3, r0
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff fa84 	bl	80076ce <SWAPBYTE>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff fa77 	bl	80076ce <SWAPBYTE>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	80da      	strh	r2, [r3, #6]
}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fd09 	bl	8008c14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008202:	2100      	movs	r1, #0
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fd05 	bl	8008c14 <USBD_LL_StallEP>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d036      	beq.n	8008296 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800822c:	6938      	ldr	r0, [r7, #16]
 800822e:	f000 f836 	bl	800829e <USBD_GetLen>
 8008232:	4603      	mov	r3, r0
 8008234:	3301      	adds	r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	701a      	strb	r2, [r3, #0]
  idx++;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	3301      	adds	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4413      	add	r3, r2
 8008258:	2203      	movs	r2, #3
 800825a:	701a      	strb	r2, [r3, #0]
  idx++;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	3301      	adds	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008262:	e013      	b.n	800828c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3301      	adds	r3, #1
 8008274:	613b      	str	r3, [r7, #16]
    idx++;
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	3301      	adds	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
    idx++;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	3301      	adds	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e7      	bne.n	8008264 <USBD_GetString+0x52>
 8008294:	e000      	b.n	8008298 <USBD_GetString+0x86>
    return;
 8008296:	bf00      	nop
  }
}
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082ae:	e005      	b.n	80082bc <USBD_GetLen+0x1e>
  {
    len++;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	3301      	adds	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f5      	bne.n	80082b0 <USBD_GetLen+0x12>
  }

  return len;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2202      	movs	r2, #2
 80082e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fd14 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	2100      	movs	r1, #0
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fd03 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2203      	movs	r2, #3
 800833a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	2100      	movs	r1, #0
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fd07 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fcf6 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008396:	2300      	movs	r3, #0
 8008398:	2200      	movs	r2, #0
 800839a:	2100      	movs	r1, #0
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fcc2 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2205      	movs	r2, #5
 80083b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083bc:	2300      	movs	r3, #0
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fcd0 	bl	8008d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083d8:	2200      	movs	r2, #0
 80083da:	4912      	ldr	r1, [pc, #72]	; (8008424 <MX_USB_DEVICE_Init+0x50>)
 80083dc:	4812      	ldr	r0, [pc, #72]	; (8008428 <MX_USB_DEVICE_Init+0x54>)
 80083de:	f7fe fe65 	bl	80070ac <USBD_Init>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083e8:	f7f9 f87c 	bl	80014e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083ec:	490f      	ldr	r1, [pc, #60]	; (800842c <MX_USB_DEVICE_Init+0x58>)
 80083ee:	480e      	ldr	r0, [pc, #56]	; (8008428 <MX_USB_DEVICE_Init+0x54>)
 80083f0:	f7fe fe8c 	bl	800710c <USBD_RegisterClass>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083fa:	f7f9 f873 	bl	80014e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083fe:	490c      	ldr	r1, [pc, #48]	; (8008430 <MX_USB_DEVICE_Init+0x5c>)
 8008400:	4809      	ldr	r0, [pc, #36]	; (8008428 <MX_USB_DEVICE_Init+0x54>)
 8008402:	f7fe fdad 	bl	8006f60 <USBD_CDC_RegisterInterface>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800840c:	f7f9 f86a 	bl	80014e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <MX_USB_DEVICE_Init+0x54>)
 8008412:	f7fe fea2 	bl	800715a <USBD_Start>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800841c:	f7f9 f862 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008420:	bf00      	nop
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20000130 	.word	0x20000130
 8008428:	20000618 	.word	0x20000618
 800842c:	20000018 	.word	0x20000018
 8008430:	2000011c 	.word	0x2000011c

08008434 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	4905      	ldr	r1, [pc, #20]	; (8008450 <CDC_Init_FS+0x1c>)
 800843c:	4805      	ldr	r0, [pc, #20]	; (8008454 <CDC_Init_FS+0x20>)
 800843e:	f7fe fda4 	bl	8006f8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008442:	4905      	ldr	r1, [pc, #20]	; (8008458 <CDC_Init_FS+0x24>)
 8008444:	4803      	ldr	r0, [pc, #12]	; (8008454 <CDC_Init_FS+0x20>)
 8008446:	f7fe fdbe 	bl	8006fc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800844a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800844c:	4618      	mov	r0, r3
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200010e8 	.word	0x200010e8
 8008454:	20000618 	.word	0x20000618
 8008458:	200008e8 	.word	0x200008e8

0800845c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
 8008478:	4613      	mov	r3, r2
 800847a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b23      	cmp	r3, #35	; 0x23
 8008480:	d84a      	bhi.n	8008518 <CDC_Control_FS+0xac>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <CDC_Control_FS+0x1c>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	08008519 	.word	0x08008519
 800848c:	08008519 	.word	0x08008519
 8008490:	08008519 	.word	0x08008519
 8008494:	08008519 	.word	0x08008519
 8008498:	08008519 	.word	0x08008519
 800849c:	08008519 	.word	0x08008519
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	08008519 	.word	0x08008519
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008519 	.word	0x08008519
 80084c0:	08008519 	.word	0x08008519
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008519 	.word	0x08008519
 80084d0:	08008519 	.word	0x08008519
 80084d4:	08008519 	.word	0x08008519
 80084d8:	08008519 	.word	0x08008519
 80084dc:	08008519 	.word	0x08008519
 80084e0:	08008519 	.word	0x08008519
 80084e4:	08008519 	.word	0x08008519
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008519 	.word	0x08008519
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008519 	.word	0x08008519
 8008504:	08008519 	.word	0x08008519
 8008508:	08008519 	.word	0x08008519
 800850c:	08008519 	.word	0x08008519
 8008510:	08008519 	.word	0x08008519
 8008514:	08008519 	.word	0x08008519
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008518:	bf00      	nop
  }

  return (USBD_OK);
 800851a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <CDC_Receive_FS+0x24>)
 8008536:	f7fe fd46 	bl	8006fc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800853a:	4804      	ldr	r0, [pc, #16]	; (800854c <CDC_Receive_FS+0x24>)
 800853c:	f7fe fd8c 	bl	8007058 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008540:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000618 	.word	0x20000618

08008550 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <CDC_Transmit_FS+0x48>)
 8008562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008566:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008572:	2301      	movs	r3, #1
 8008574:	e00b      	b.n	800858e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008576:	887b      	ldrh	r3, [r7, #2]
 8008578:	461a      	mov	r2, r3
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	4806      	ldr	r0, [pc, #24]	; (8008598 <CDC_Transmit_FS+0x48>)
 800857e:	f7fe fd04 	bl	8006f8a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008582:	4805      	ldr	r0, [pc, #20]	; (8008598 <CDC_Transmit_FS+0x48>)
 8008584:	f7fe fd38 	bl	8006ff8 <USBD_CDC_TransmitPacket>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000618 	.word	0x20000618

0800859c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2212      	movs	r2, #18
 80085d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000150 	.word	0x20000150

080085e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2204      	movs	r2, #4
 80085f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000170 	.word	0x20000170

08008608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <USBD_FS_ProductStrDescriptor+0x34>)
 800861e:	4808      	ldr	r0, [pc, #32]	; (8008640 <USBD_FS_ProductStrDescriptor+0x38>)
 8008620:	f7ff fdf7 	bl	8008212 <USBD_GetString>
 8008624:	e004      	b.n	8008630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <USBD_FS_ProductStrDescriptor+0x34>)
 800862a:	4805      	ldr	r0, [pc, #20]	; (8008640 <USBD_FS_ProductStrDescriptor+0x38>)
 800862c:	f7ff fdf1 	bl	8008212 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	200018e8 	.word	0x200018e8
 8008640:	0800bcdc 	.word	0x0800bcdc

08008644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	4904      	ldr	r1, [pc, #16]	; (8008664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008654:	4804      	ldr	r0, [pc, #16]	; (8008668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008656:	f7ff fddc 	bl	8008212 <USBD_GetString>
  return USBD_StrDesc;
 800865a:	4b02      	ldr	r3, [pc, #8]	; (8008664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200018e8 	.word	0x200018e8
 8008668:	0800bcf4 	.word	0x0800bcf4

0800866c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	221a      	movs	r2, #26
 800867c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800867e:	f000 f855 	bl	800872c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008682:	4b02      	ldr	r3, [pc, #8]	; (800868c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000174 	.word	0x20000174

08008690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4907      	ldr	r1, [pc, #28]	; (80086c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a6:	4808      	ldr	r0, [pc, #32]	; (80086c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a8:	f7ff fdb3 	bl	8008212 <USBD_GetString>
 80086ac:	e004      	b.n	80086b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	4904      	ldr	r1, [pc, #16]	; (80086c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086b2:	4805      	ldr	r0, [pc, #20]	; (80086c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b4:	f7ff fdad 	bl	8008212 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200018e8 	.word	0x200018e8
 80086c8:	0800bd08 	.word	0x0800bd08

080086cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4907      	ldr	r1, [pc, #28]	; (8008700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086e2:	4808      	ldr	r0, [pc, #32]	; (8008704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e4:	f7ff fd95 	bl	8008212 <USBD_GetString>
 80086e8:	e004      	b.n	80086f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4904      	ldr	r1, [pc, #16]	; (8008700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086f0:	f7ff fd8f 	bl	8008212 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200018e8 	.word	0x200018e8
 8008704:	0800bd14 	.word	0x0800bd14

08008708 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	220c      	movs	r2, #12
 8008718:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800871a:	4b03      	ldr	r3, [pc, #12]	; (8008728 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000164 	.word	0x20000164

0800872c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <Get_SerialNum+0x44>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008738:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <Get_SerialNum+0x48>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800873e:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <Get_SerialNum+0x4c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4413      	add	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008752:	2208      	movs	r2, #8
 8008754:	4909      	ldr	r1, [pc, #36]	; (800877c <Get_SerialNum+0x50>)
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f814 	bl	8008784 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800875c:	2204      	movs	r2, #4
 800875e:	4908      	ldr	r1, [pc, #32]	; (8008780 <Get_SerialNum+0x54>)
 8008760:	68b8      	ldr	r0, [r7, #8]
 8008762:	f000 f80f 	bl	8008784 <IntToUnicode>
  }
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	1fff7a10 	.word	0x1fff7a10
 8008774:	1fff7a14 	.word	0x1fff7a14
 8008778:	1fff7a18 	.word	0x1fff7a18
 800877c:	20000176 	.word	0x20000176
 8008780:	20000186 	.word	0x20000186

08008784 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008796:	2300      	movs	r3, #0
 8008798:	75fb      	strb	r3, [r7, #23]
 800879a:	e027      	b.n	80087ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0f1b      	lsrs	r3, r3, #28
 80087a0:	2b09      	cmp	r3, #9
 80087a2:	d80b      	bhi.n	80087bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0f1b      	lsrs	r3, r3, #28
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4619      	mov	r1, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	440b      	add	r3, r1
 80087b4:	3230      	adds	r2, #48	; 0x30
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	e00a      	b.n	80087d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	0f1b      	lsrs	r3, r3, #28
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4619      	mov	r1, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	3237      	adds	r2, #55	; 0x37
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	3301      	adds	r3, #1
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	3301      	adds	r3, #1
 80087ea:	75fb      	strb	r3, [r7, #23]
 80087ec:	7dfa      	ldrb	r2, [r7, #23]
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d3d3      	bcc.n	800879c <IntToUnicode+0x18>
  }
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b0a0      	sub	sp, #128	; 0x80
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800880c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800881c:	f107 0310 	add.w	r3, r7, #16
 8008820:	225c      	movs	r2, #92	; 0x5c
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fb8f 	bl	8008f48 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008832:	d149      	bne.n	80088c8 <HAL_PCD_MspInit+0xc4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008838:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800883a:	2300      	movs	r3, #0
 800883c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800883e:	f107 0310 	add.w	r3, r7, #16
 8008842:	4618      	mov	r0, r3
 8008844:	f7fb fe1e 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800884e:	f7f8 fe49 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800886e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008872:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008874:	2302      	movs	r3, #2
 8008876:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800887c:	2303      	movs	r3, #3
 800887e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008880:	230a      	movs	r3, #10
 8008882:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008884:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008888:	4619      	mov	r1, r3
 800888a:	4812      	ldr	r0, [pc, #72]	; (80088d4 <HAL_PCD_MspInit+0xd0>)
 800888c:	f7f9 f986 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 8008892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008894:	4a0e      	ldr	r2, [pc, #56]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 8008896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889a:	6353      	str	r3, [r2, #52]	; 0x34
 800889c:	2300      	movs	r3, #0
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 80088a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a4:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 80088a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088aa:	6453      	str	r3, [r2, #68]	; 0x44
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <HAL_PCD_MspInit+0xcc>)
 80088ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b4:	60bb      	str	r3, [r7, #8]
 80088b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	2043      	movs	r0, #67	; 0x43
 80088be:	f7f9 f936 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088c2:	2043      	movs	r0, #67	; 0x43
 80088c4:	f7f9 f94f 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088c8:	bf00      	nop
 80088ca:	3780      	adds	r7, #128	; 0x80
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40023800 	.word	0x40023800
 80088d4:	40020000 	.word	0x40020000

080088d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f7fe fc7e 	bl	80071f0 <USBD_LL_SetupStage>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	4613      	mov	r3, r2
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	440b      	add	r3, r1
 800891c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	4619      	mov	r1, r3
 8008926:	f7fe fcb8 	bl	800729a <USBD_LL_DataOutStage>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008944:	78fa      	ldrb	r2, [r7, #3]
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	3348      	adds	r3, #72	; 0x48
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	4619      	mov	r1, r3
 800895a:	f7fe fd01 	bl	8007360 <USBD_LL_DataInStage>
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fe15 	bl	80075a4 <USBD_LL_SOF>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800898a:	2301      	movs	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e008      	b.n	80089ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d102      	bne.n	80089aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089a4:	2301      	movs	r3, #1
 80089a6:	73fb      	strb	r3, [r7, #15]
 80089a8:	e001      	b.n	80089ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089aa:	f7f8 fd9b 	bl	80014e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089b4:	7bfa      	ldrb	r2, [r7, #15]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fdb5 	bl	8007528 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe fd61 	bl	800748c <USBD_LL_Reset>
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fdb0 	bl	8007548 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <HAL_PCD_SuspendCallback+0x48>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	4a03      	ldr	r2, [pc, #12]	; (8008a1c <HAL_PCD_SuspendCallback+0x48>)
 8008a0e:	f043 0306 	orr.w	r3, r3, #6
 8008a12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	e000ed00 	.word	0xe000ed00

08008a20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fda0 	bl	8007574 <USBD_LL_Resume>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fdee 	bl	8007634 <USBD_LL_IsoOUTIncomplete>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fdb6 	bl	80075e8 <USBD_LL_IsoINIncomplete>
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fdf4 	bl	8007680 <USBD_LL_DevConnected>
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fdf1 	bl	8007696 <USBD_LL_DevDisconnected>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d13c      	bne.n	8008b46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008acc:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <USBD_LL_Init+0x94>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	; (8008b50 <USBD_LL_Init+0x94>)
 8008ad8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008adc:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <USBD_LL_Init+0x94>)
 8008ade:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <USBD_LL_Init+0x94>)
 8008ae6:	2206      	movs	r2, #6
 8008ae8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008aea:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <USBD_LL_Init+0x94>)
 8008aec:	2202      	movs	r2, #2
 8008aee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008af0:	4b17      	ldr	r3, [pc, #92]	; (8008b50 <USBD_LL_Init+0x94>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008af6:	4b16      	ldr	r3, [pc, #88]	; (8008b50 <USBD_LL_Init+0x94>)
 8008af8:	2202      	movs	r2, #2
 8008afa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <USBD_LL_Init+0x94>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b02:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b08:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b0e:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b14:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b1a:	480d      	ldr	r0, [pc, #52]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b1c:	f7fa f9dd 	bl	8002eda <HAL_PCD_Init>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b26:	f7f8 fcdd 	bl	80014e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b2a:	2180      	movs	r1, #128	; 0x80
 8008b2c:	4808      	ldr	r0, [pc, #32]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b2e:	f7fb fb6e 	bl	800420e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b32:	2240      	movs	r2, #64	; 0x40
 8008b34:	2100      	movs	r1, #0
 8008b36:	4806      	ldr	r0, [pc, #24]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b38:	f7fb fb22 	bl	8004180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b3c:	2280      	movs	r2, #128	; 0x80
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4803      	ldr	r0, [pc, #12]	; (8008b50 <USBD_LL_Init+0x94>)
 8008b42:	f7fb fb1d 	bl	8004180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20001ae8 	.word	0x20001ae8

08008b54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fa fad9 	bl	8003122 <HAL_PCD_Start>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 f990 	bl	8008e9c <USBD_Get_USB_Status>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	4608      	mov	r0, r1
 8008b94:	4611      	mov	r1, r2
 8008b96:	461a      	mov	r2, r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	70fb      	strb	r3, [r7, #3]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70bb      	strb	r3, [r7, #2]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bb2:	78bb      	ldrb	r3, [r7, #2]
 8008bb4:	883a      	ldrh	r2, [r7, #0]
 8008bb6:	78f9      	ldrb	r1, [r7, #3]
 8008bb8:	f7fa feea 	bl	8003990 <HAL_PCD_EP_Open>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f96a 	bl	8008e9c <USBD_Get_USB_Status>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fa ff33 	bl	8003a60 <HAL_PCD_EP_Close>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f94b 	bl	8008e9c <USBD_Get_USB_Status>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fb f80b 	bl	8003c4e <HAL_PCD_EP_SetStall>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f92c 	bl	8008e9c <USBD_Get_USB_Status>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fb f850 	bl	8003d16 <HAL_PCD_EP_ClrStall>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 f90d 	bl	8008e9c <USBD_Get_USB_Status>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da0b      	bge.n	8008cc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	333e      	adds	r3, #62	; 0x3e
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	e00b      	b.n	8008cdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fa fe1d 	bl	8003946 <HAL_PCD_SetAddress>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f8c2 	bl	8008e9c <USBD_Get_USB_Status>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	460b      	mov	r3, r1
 8008d34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d44:	7af9      	ldrb	r1, [r7, #11]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f7fa ff36 	bl	8003bba <HAL_PCD_EP_Transmit>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f8a1 	bl	8008e9c <USBD_Get_USB_Status>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	460b      	mov	r3, r1
 8008d76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d86:	7af9      	ldrb	r1, [r7, #11]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	f7fa feb2 	bl	8003af4 <HAL_PCD_EP_Receive>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f880 	bl	8008e9c <USBD_Get_USB_Status>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dbc:	78fa      	ldrb	r2, [r7, #3]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fa fee2 	bl	8003b8a <HAL_PCD_EP_GetRxCount>
 8008dc6:	4603      	mov	r3, r0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_PCDEx_LPM_Callback+0x18>
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d01f      	beq.n	8008e26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008de6:	e03b      	b.n	8008e60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008df0:	f7f8 fa4a 	bl	8001288 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008df4:	4b1c      	ldr	r3, [pc, #112]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008dfa:	f023 0306 	bic.w	r3, r3, #6
 8008dfe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6812      	ldr	r2, [r2, #0]
 8008e0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fba8 	bl	8007574 <USBD_LL_Resume>
    break;
 8008e24:	e01c      	b.n	8008e60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fb7f 	bl	8007548 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e58:	f043 0306 	orr.w	r3, r3, #6
 8008e5c:	6113      	str	r3, [r2, #16]
    break;
 8008e5e:	bf00      	nop
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	e000ed00 	.word	0xe000ed00

08008e6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <USBD_static_malloc+0x18>)
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000384 	.word	0x20000384

08008e88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d817      	bhi.n	8008ee0 <USBD_Get_USB_Status+0x44>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBD_Get_USB_Status+0x1c>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ec9 	.word	0x08008ec9
 8008ebc:	08008ecf 	.word	0x08008ecf
 8008ec0:	08008ed5 	.word	0x08008ed5
 8008ec4:	08008edb 	.word	0x08008edb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e00b      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e008      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	e005      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eda:	2303      	movs	r3, #3
 8008edc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ede:	e002      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	bf00      	nop
  }
  return usb_status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <__errno>:
 8008ef4:	4b01      	ldr	r3, [pc, #4]	; (8008efc <__errno+0x8>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000190 	.word	0x20000190

08008f00 <__libc_init_array>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	4d0d      	ldr	r5, [pc, #52]	; (8008f38 <__libc_init_array+0x38>)
 8008f04:	4c0d      	ldr	r4, [pc, #52]	; (8008f3c <__libc_init_array+0x3c>)
 8008f06:	1b64      	subs	r4, r4, r5
 8008f08:	10a4      	asrs	r4, r4, #2
 8008f0a:	2600      	movs	r6, #0
 8008f0c:	42a6      	cmp	r6, r4
 8008f0e:	d109      	bne.n	8008f24 <__libc_init_array+0x24>
 8008f10:	4d0b      	ldr	r5, [pc, #44]	; (8008f40 <__libc_init_array+0x40>)
 8008f12:	4c0c      	ldr	r4, [pc, #48]	; (8008f44 <__libc_init_array+0x44>)
 8008f14:	f002 feca 	bl	800bcac <_init>
 8008f18:	1b64      	subs	r4, r4, r5
 8008f1a:	10a4      	asrs	r4, r4, #2
 8008f1c:	2600      	movs	r6, #0
 8008f1e:	42a6      	cmp	r6, r4
 8008f20:	d105      	bne.n	8008f2e <__libc_init_array+0x2e>
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f28:	4798      	blx	r3
 8008f2a:	3601      	adds	r6, #1
 8008f2c:	e7ee      	b.n	8008f0c <__libc_init_array+0xc>
 8008f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f32:	4798      	blx	r3
 8008f34:	3601      	adds	r6, #1
 8008f36:	e7f2      	b.n	8008f1e <__libc_init_array+0x1e>
 8008f38:	0800c124 	.word	0x0800c124
 8008f3c:	0800c124 	.word	0x0800c124
 8008f40:	0800c124 	.word	0x0800c124
 8008f44:	0800c128 	.word	0x0800c128

08008f48 <memset>:
 8008f48:	4402      	add	r2, r0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d100      	bne.n	8008f52 <memset+0xa>
 8008f50:	4770      	bx	lr
 8008f52:	f803 1b01 	strb.w	r1, [r3], #1
 8008f56:	e7f9      	b.n	8008f4c <memset+0x4>

08008f58 <__cvt>:
 8008f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	ec55 4b10 	vmov	r4, r5, d0
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	460e      	mov	r6, r1
 8008f64:	4619      	mov	r1, r3
 8008f66:	462b      	mov	r3, r5
 8008f68:	bfbb      	ittet	lt
 8008f6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f6e:	461d      	movlt	r5, r3
 8008f70:	2300      	movge	r3, #0
 8008f72:	232d      	movlt	r3, #45	; 0x2d
 8008f74:	700b      	strb	r3, [r1, #0]
 8008f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f7c:	4691      	mov	r9, r2
 8008f7e:	f023 0820 	bic.w	r8, r3, #32
 8008f82:	bfbc      	itt	lt
 8008f84:	4622      	movlt	r2, r4
 8008f86:	4614      	movlt	r4, r2
 8008f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f8c:	d005      	beq.n	8008f9a <__cvt+0x42>
 8008f8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f92:	d100      	bne.n	8008f96 <__cvt+0x3e>
 8008f94:	3601      	adds	r6, #1
 8008f96:	2102      	movs	r1, #2
 8008f98:	e000      	b.n	8008f9c <__cvt+0x44>
 8008f9a:	2103      	movs	r1, #3
 8008f9c:	ab03      	add	r3, sp, #12
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	ab02      	add	r3, sp, #8
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	ec45 4b10 	vmov	d0, r4, r5
 8008fa8:	4653      	mov	r3, sl
 8008faa:	4632      	mov	r2, r6
 8008fac:	f000 fd00 	bl	80099b0 <_dtoa_r>
 8008fb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	d102      	bne.n	8008fbe <__cvt+0x66>
 8008fb8:	f019 0f01 	tst.w	r9, #1
 8008fbc:	d022      	beq.n	8009004 <__cvt+0xac>
 8008fbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fc2:	eb07 0906 	add.w	r9, r7, r6
 8008fc6:	d110      	bne.n	8008fea <__cvt+0x92>
 8008fc8:	783b      	ldrb	r3, [r7, #0]
 8008fca:	2b30      	cmp	r3, #48	; 0x30
 8008fcc:	d10a      	bne.n	8008fe4 <__cvt+0x8c>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7f7 fd97 	bl	8000b08 <__aeabi_dcmpeq>
 8008fda:	b918      	cbnz	r0, 8008fe4 <__cvt+0x8c>
 8008fdc:	f1c6 0601 	rsb	r6, r6, #1
 8008fe0:	f8ca 6000 	str.w	r6, [sl]
 8008fe4:	f8da 3000 	ldr.w	r3, [sl]
 8008fe8:	4499      	add	r9, r3
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7f7 fd89 	bl	8000b08 <__aeabi_dcmpeq>
 8008ff6:	b108      	cbz	r0, 8008ffc <__cvt+0xa4>
 8008ff8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ffc:	2230      	movs	r2, #48	; 0x30
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	454b      	cmp	r3, r9
 8009002:	d307      	bcc.n	8009014 <__cvt+0xbc>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009008:	1bdb      	subs	r3, r3, r7
 800900a:	4638      	mov	r0, r7
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	b004      	add	sp, #16
 8009010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009014:	1c59      	adds	r1, r3, #1
 8009016:	9103      	str	r1, [sp, #12]
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e7f0      	b.n	8008ffe <__cvt+0xa6>

0800901c <__exponent>:
 800901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901e:	4603      	mov	r3, r0
 8009020:	2900      	cmp	r1, #0
 8009022:	bfb8      	it	lt
 8009024:	4249      	neglt	r1, r1
 8009026:	f803 2b02 	strb.w	r2, [r3], #2
 800902a:	bfb4      	ite	lt
 800902c:	222d      	movlt	r2, #45	; 0x2d
 800902e:	222b      	movge	r2, #43	; 0x2b
 8009030:	2909      	cmp	r1, #9
 8009032:	7042      	strb	r2, [r0, #1]
 8009034:	dd2a      	ble.n	800908c <__exponent+0x70>
 8009036:	f10d 0407 	add.w	r4, sp, #7
 800903a:	46a4      	mov	ip, r4
 800903c:	270a      	movs	r7, #10
 800903e:	46a6      	mov	lr, r4
 8009040:	460a      	mov	r2, r1
 8009042:	fb91 f6f7 	sdiv	r6, r1, r7
 8009046:	fb07 1516 	mls	r5, r7, r6, r1
 800904a:	3530      	adds	r5, #48	; 0x30
 800904c:	2a63      	cmp	r2, #99	; 0x63
 800904e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009052:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009056:	4631      	mov	r1, r6
 8009058:	dcf1      	bgt.n	800903e <__exponent+0x22>
 800905a:	3130      	adds	r1, #48	; 0x30
 800905c:	f1ae 0502 	sub.w	r5, lr, #2
 8009060:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009064:	1c44      	adds	r4, r0, #1
 8009066:	4629      	mov	r1, r5
 8009068:	4561      	cmp	r1, ip
 800906a:	d30a      	bcc.n	8009082 <__exponent+0x66>
 800906c:	f10d 0209 	add.w	r2, sp, #9
 8009070:	eba2 020e 	sub.w	r2, r2, lr
 8009074:	4565      	cmp	r5, ip
 8009076:	bf88      	it	hi
 8009078:	2200      	movhi	r2, #0
 800907a:	4413      	add	r3, r2
 800907c:	1a18      	subs	r0, r3, r0
 800907e:	b003      	add	sp, #12
 8009080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f804 2f01 	strb.w	r2, [r4, #1]!
 800908a:	e7ed      	b.n	8009068 <__exponent+0x4c>
 800908c:	2330      	movs	r3, #48	; 0x30
 800908e:	3130      	adds	r1, #48	; 0x30
 8009090:	7083      	strb	r3, [r0, #2]
 8009092:	70c1      	strb	r1, [r0, #3]
 8009094:	1d03      	adds	r3, r0, #4
 8009096:	e7f1      	b.n	800907c <__exponent+0x60>

08009098 <_printf_float>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	ed2d 8b02 	vpush	{d8}
 80090a0:	b08d      	sub	sp, #52	; 0x34
 80090a2:	460c      	mov	r4, r1
 80090a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090a8:	4616      	mov	r6, r2
 80090aa:	461f      	mov	r7, r3
 80090ac:	4605      	mov	r5, r0
 80090ae:	f001 fa6b 	bl	800a588 <_localeconv_r>
 80090b2:	f8d0 a000 	ldr.w	sl, [r0]
 80090b6:	4650      	mov	r0, sl
 80090b8:	f7f7 f8aa 	bl	8000210 <strlen>
 80090bc:	2300      	movs	r3, #0
 80090be:	930a      	str	r3, [sp, #40]	; 0x28
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	f8d8 3000 	ldr.w	r3, [r8]
 80090c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090cc:	3307      	adds	r3, #7
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	f103 0208 	add.w	r2, r3, #8
 80090d6:	f8c8 2000 	str.w	r2, [r8]
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f0:	ee08 0a10 	vmov	s16, r0
 80090f4:	4b9f      	ldr	r3, [pc, #636]	; (8009374 <_printf_float+0x2dc>)
 80090f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090fe:	f7f7 fd35 	bl	8000b6c <__aeabi_dcmpun>
 8009102:	bb88      	cbnz	r0, 8009168 <_printf_float+0xd0>
 8009104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009108:	4b9a      	ldr	r3, [pc, #616]	; (8009374 <_printf_float+0x2dc>)
 800910a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800910e:	f7f7 fd0f 	bl	8000b30 <__aeabi_dcmple>
 8009112:	bb48      	cbnz	r0, 8009168 <_printf_float+0xd0>
 8009114:	2200      	movs	r2, #0
 8009116:	2300      	movs	r3, #0
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 fcfe 	bl	8000b1c <__aeabi_dcmplt>
 8009120:	b110      	cbz	r0, 8009128 <_printf_float+0x90>
 8009122:	232d      	movs	r3, #45	; 0x2d
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009128:	4b93      	ldr	r3, [pc, #588]	; (8009378 <_printf_float+0x2e0>)
 800912a:	4894      	ldr	r0, [pc, #592]	; (800937c <_printf_float+0x2e4>)
 800912c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009130:	bf94      	ite	ls
 8009132:	4698      	movls	r8, r3
 8009134:	4680      	movhi	r8, r0
 8009136:	2303      	movs	r3, #3
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	f023 0204 	bic.w	r2, r3, #4
 8009140:	6022      	str	r2, [r4, #0]
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	9700      	str	r7, [sp, #0]
 8009148:	4633      	mov	r3, r6
 800914a:	aa0b      	add	r2, sp, #44	; 0x2c
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f9d8 	bl	8009504 <_printf_common>
 8009154:	3001      	adds	r0, #1
 8009156:	f040 8090 	bne.w	800927a <_printf_float+0x1e2>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800915e:	b00d      	add	sp, #52	; 0x34
 8009160:	ecbd 8b02 	vpop	{d8}
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 fcfc 	bl	8000b6c <__aeabi_dcmpun>
 8009174:	b140      	cbz	r0, 8009188 <_printf_float+0xf0>
 8009176:	464b      	mov	r3, r9
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbc      	itt	lt
 800917c:	232d      	movlt	r3, #45	; 0x2d
 800917e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009182:	487f      	ldr	r0, [pc, #508]	; (8009380 <_printf_float+0x2e8>)
 8009184:	4b7f      	ldr	r3, [pc, #508]	; (8009384 <_printf_float+0x2ec>)
 8009186:	e7d1      	b.n	800912c <_printf_float+0x94>
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800918e:	9206      	str	r2, [sp, #24]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	d13f      	bne.n	8009214 <_printf_float+0x17c>
 8009194:	2306      	movs	r3, #6
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	6861      	ldr	r1, [r4, #4]
 800919c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091a0:	2300      	movs	r3, #0
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	ab0a      	add	r3, sp, #40	; 0x28
 80091a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091aa:	ab09      	add	r3, sp, #36	; 0x24
 80091ac:	ec49 8b10 	vmov	d0, r8, r9
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091b8:	4628      	mov	r0, r5
 80091ba:	f7ff fecd 	bl	8008f58 <__cvt>
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c2:	2b47      	cmp	r3, #71	; 0x47
 80091c4:	4680      	mov	r8, r0
 80091c6:	d108      	bne.n	80091da <_printf_float+0x142>
 80091c8:	1cc8      	adds	r0, r1, #3
 80091ca:	db02      	blt.n	80091d2 <_printf_float+0x13a>
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	dd41      	ble.n	8009256 <_printf_float+0x1be>
 80091d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80091d6:	fa5f fb8b 	uxtb.w	fp, fp
 80091da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091de:	d820      	bhi.n	8009222 <_printf_float+0x18a>
 80091e0:	3901      	subs	r1, #1
 80091e2:	465a      	mov	r2, fp
 80091e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091e8:	9109      	str	r1, [sp, #36]	; 0x24
 80091ea:	f7ff ff17 	bl	800901c <__exponent>
 80091ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f0:	1813      	adds	r3, r2, r0
 80091f2:	2a01      	cmp	r2, #1
 80091f4:	4681      	mov	r9, r0
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	dc02      	bgt.n	8009200 <_printf_float+0x168>
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	07d2      	lsls	r2, r2, #31
 80091fe:	d501      	bpl.n	8009204 <_printf_float+0x16c>
 8009200:	3301      	adds	r3, #1
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009208:	2b00      	cmp	r3, #0
 800920a:	d09c      	beq.n	8009146 <_printf_float+0xae>
 800920c:	232d      	movs	r3, #45	; 0x2d
 800920e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009212:	e798      	b.n	8009146 <_printf_float+0xae>
 8009214:	9a06      	ldr	r2, [sp, #24]
 8009216:	2a47      	cmp	r2, #71	; 0x47
 8009218:	d1be      	bne.n	8009198 <_printf_float+0x100>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1bc      	bne.n	8009198 <_printf_float+0x100>
 800921e:	2301      	movs	r3, #1
 8009220:	e7b9      	b.n	8009196 <_printf_float+0xfe>
 8009222:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009226:	d118      	bne.n	800925a <_printf_float+0x1c2>
 8009228:	2900      	cmp	r1, #0
 800922a:	6863      	ldr	r3, [r4, #4]
 800922c:	dd0b      	ble.n	8009246 <_printf_float+0x1ae>
 800922e:	6121      	str	r1, [r4, #16]
 8009230:	b913      	cbnz	r3, 8009238 <_printf_float+0x1a0>
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	07d0      	lsls	r0, r2, #31
 8009236:	d502      	bpl.n	800923e <_printf_float+0x1a6>
 8009238:	3301      	adds	r3, #1
 800923a:	440b      	add	r3, r1
 800923c:	6123      	str	r3, [r4, #16]
 800923e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009240:	f04f 0900 	mov.w	r9, #0
 8009244:	e7de      	b.n	8009204 <_printf_float+0x16c>
 8009246:	b913      	cbnz	r3, 800924e <_printf_float+0x1b6>
 8009248:	6822      	ldr	r2, [r4, #0]
 800924a:	07d2      	lsls	r2, r2, #31
 800924c:	d501      	bpl.n	8009252 <_printf_float+0x1ba>
 800924e:	3302      	adds	r3, #2
 8009250:	e7f4      	b.n	800923c <_printf_float+0x1a4>
 8009252:	2301      	movs	r3, #1
 8009254:	e7f2      	b.n	800923c <_printf_float+0x1a4>
 8009256:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	4299      	cmp	r1, r3
 800925e:	db05      	blt.n	800926c <_printf_float+0x1d4>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	6121      	str	r1, [r4, #16]
 8009264:	07d8      	lsls	r0, r3, #31
 8009266:	d5ea      	bpl.n	800923e <_printf_float+0x1a6>
 8009268:	1c4b      	adds	r3, r1, #1
 800926a:	e7e7      	b.n	800923c <_printf_float+0x1a4>
 800926c:	2900      	cmp	r1, #0
 800926e:	bfd4      	ite	le
 8009270:	f1c1 0202 	rsble	r2, r1, #2
 8009274:	2201      	movgt	r2, #1
 8009276:	4413      	add	r3, r2
 8009278:	e7e0      	b.n	800923c <_printf_float+0x1a4>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	055a      	lsls	r2, r3, #21
 800927e:	d407      	bmi.n	8009290 <_printf_float+0x1f8>
 8009280:	6923      	ldr	r3, [r4, #16]
 8009282:	4642      	mov	r2, r8
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	d12c      	bne.n	80092e8 <_printf_float+0x250>
 800928e:	e764      	b.n	800915a <_printf_float+0xc2>
 8009290:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009294:	f240 80e0 	bls.w	8009458 <_printf_float+0x3c0>
 8009298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800929c:	2200      	movs	r2, #0
 800929e:	2300      	movs	r3, #0
 80092a0:	f7f7 fc32 	bl	8000b08 <__aeabi_dcmpeq>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d034      	beq.n	8009312 <_printf_float+0x27a>
 80092a8:	4a37      	ldr	r2, [pc, #220]	; (8009388 <_printf_float+0x2f0>)
 80092aa:	2301      	movs	r3, #1
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	f43f af51 	beq.w	800915a <_printf_float+0xc2>
 80092b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092bc:	429a      	cmp	r2, r3
 80092be:	db02      	blt.n	80092c6 <_printf_float+0x22e>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	07d8      	lsls	r0, r3, #31
 80092c4:	d510      	bpl.n	80092e8 <_printf_float+0x250>
 80092c6:	ee18 3a10 	vmov	r3, s16
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af41 	beq.w	800915a <_printf_float+0xc2>
 80092d8:	f04f 0800 	mov.w	r8, #0
 80092dc:	f104 091a 	add.w	r9, r4, #26
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	4543      	cmp	r3, r8
 80092e6:	dc09      	bgt.n	80092fc <_printf_float+0x264>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	079b      	lsls	r3, r3, #30
 80092ec:	f100 8105 	bmi.w	80094fa <_printf_float+0x462>
 80092f0:	68e0      	ldr	r0, [r4, #12]
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	4298      	cmp	r0, r3
 80092f6:	bfb8      	it	lt
 80092f8:	4618      	movlt	r0, r3
 80092fa:	e730      	b.n	800915e <_printf_float+0xc6>
 80092fc:	2301      	movs	r3, #1
 80092fe:	464a      	mov	r2, r9
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f af27 	beq.w	800915a <_printf_float+0xc2>
 800930c:	f108 0801 	add.w	r8, r8, #1
 8009310:	e7e6      	b.n	80092e0 <_printf_float+0x248>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc39      	bgt.n	800938c <_printf_float+0x2f4>
 8009318:	4a1b      	ldr	r2, [pc, #108]	; (8009388 <_printf_float+0x2f0>)
 800931a:	2301      	movs	r3, #1
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f af19 	beq.w	800915a <_printf_float+0xc2>
 8009328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800932c:	4313      	orrs	r3, r2
 800932e:	d102      	bne.n	8009336 <_printf_float+0x29e>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d5d8      	bpl.n	80092e8 <_printf_float+0x250>
 8009336:	ee18 3a10 	vmov	r3, s16
 800933a:	4652      	mov	r2, sl
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f af09 	beq.w	800915a <_printf_float+0xc2>
 8009348:	f04f 0900 	mov.w	r9, #0
 800934c:	f104 0a1a 	add.w	sl, r4, #26
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	425b      	negs	r3, r3
 8009354:	454b      	cmp	r3, r9
 8009356:	dc01      	bgt.n	800935c <_printf_float+0x2c4>
 8009358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935a:	e792      	b.n	8009282 <_printf_float+0x1ea>
 800935c:	2301      	movs	r3, #1
 800935e:	4652      	mov	r2, sl
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f aef7 	beq.w	800915a <_printf_float+0xc2>
 800936c:	f109 0901 	add.w	r9, r9, #1
 8009370:	e7ee      	b.n	8009350 <_printf_float+0x2b8>
 8009372:	bf00      	nop
 8009374:	7fefffff 	.word	0x7fefffff
 8009378:	0800bd40 	.word	0x0800bd40
 800937c:	0800bd44 	.word	0x0800bd44
 8009380:	0800bd4c 	.word	0x0800bd4c
 8009384:	0800bd48 	.word	0x0800bd48
 8009388:	0800bd50 	.word	0x0800bd50
 800938c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800938e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009390:	429a      	cmp	r2, r3
 8009392:	bfa8      	it	ge
 8009394:	461a      	movge	r2, r3
 8009396:	2a00      	cmp	r2, #0
 8009398:	4691      	mov	r9, r2
 800939a:	dc37      	bgt.n	800940c <_printf_float+0x374>
 800939c:	f04f 0b00 	mov.w	fp, #0
 80093a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a4:	f104 021a 	add.w	r2, r4, #26
 80093a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	eba3 0309 	sub.w	r3, r3, r9
 80093b0:	455b      	cmp	r3, fp
 80093b2:	dc33      	bgt.n	800941c <_printf_float+0x384>
 80093b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093b8:	429a      	cmp	r2, r3
 80093ba:	db3b      	blt.n	8009434 <_printf_float+0x39c>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07da      	lsls	r2, r3, #31
 80093c0:	d438      	bmi.n	8009434 <_printf_float+0x39c>
 80093c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c4:	9b05      	ldr	r3, [sp, #20]
 80093c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	eba2 0901 	sub.w	r9, r2, r1
 80093ce:	4599      	cmp	r9, r3
 80093d0:	bfa8      	it	ge
 80093d2:	4699      	movge	r9, r3
 80093d4:	f1b9 0f00 	cmp.w	r9, #0
 80093d8:	dc35      	bgt.n	8009446 <_printf_float+0x3ae>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e2:	f104 0a1a 	add.w	sl, r4, #26
 80093e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	eba3 0309 	sub.w	r3, r3, r9
 80093f0:	4543      	cmp	r3, r8
 80093f2:	f77f af79 	ble.w	80092e8 <_printf_float+0x250>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4652      	mov	r2, sl
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f aeaa 	beq.w	800915a <_printf_float+0xc2>
 8009406:	f108 0801 	add.w	r8, r8, #1
 800940a:	e7ec      	b.n	80093e6 <_printf_float+0x34e>
 800940c:	4613      	mov	r3, r2
 800940e:	4631      	mov	r1, r6
 8009410:	4642      	mov	r2, r8
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	d1c0      	bne.n	800939c <_printf_float+0x304>
 800941a:	e69e      	b.n	800915a <_printf_float+0xc2>
 800941c:	2301      	movs	r3, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	9205      	str	r2, [sp, #20]
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f ae97 	beq.w	800915a <_printf_float+0xc2>
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	f10b 0b01 	add.w	fp, fp, #1
 8009432:	e7b9      	b.n	80093a8 <_printf_float+0x310>
 8009434:	ee18 3a10 	vmov	r3, s16
 8009438:	4652      	mov	r2, sl
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	d1be      	bne.n	80093c2 <_printf_float+0x32a>
 8009444:	e689      	b.n	800915a <_printf_float+0xc2>
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	464b      	mov	r3, r9
 800944a:	4442      	add	r2, r8
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	d1c1      	bne.n	80093da <_printf_float+0x342>
 8009456:	e680      	b.n	800915a <_printf_float+0xc2>
 8009458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945a:	2a01      	cmp	r2, #1
 800945c:	dc01      	bgt.n	8009462 <_printf_float+0x3ca>
 800945e:	07db      	lsls	r3, r3, #31
 8009460:	d538      	bpl.n	80094d4 <_printf_float+0x43c>
 8009462:	2301      	movs	r3, #1
 8009464:	4642      	mov	r2, r8
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f ae74 	beq.w	800915a <_printf_float+0xc2>
 8009472:	ee18 3a10 	vmov	r3, s16
 8009476:	4652      	mov	r2, sl
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f ae6b 	beq.w	800915a <_printf_float+0xc2>
 8009484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	f7f7 fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 8009490:	b9d8      	cbnz	r0, 80094ca <_printf_float+0x432>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	f108 0201 	add.w	r2, r8, #1
 8009498:	3b01      	subs	r3, #1
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	d10e      	bne.n	80094c2 <_printf_float+0x42a>
 80094a4:	e659      	b.n	800915a <_printf_float+0xc2>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4652      	mov	r2, sl
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae52 	beq.w	800915a <_printf_float+0xc2>
 80094b6:	f108 0801 	add.w	r8, r8, #1
 80094ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094bc:	3b01      	subs	r3, #1
 80094be:	4543      	cmp	r3, r8
 80094c0:	dcf1      	bgt.n	80094a6 <_printf_float+0x40e>
 80094c2:	464b      	mov	r3, r9
 80094c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094c8:	e6dc      	b.n	8009284 <_printf_float+0x1ec>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0a1a 	add.w	sl, r4, #26
 80094d2:	e7f2      	b.n	80094ba <_printf_float+0x422>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4642      	mov	r2, r8
 80094d8:	e7df      	b.n	800949a <_printf_float+0x402>
 80094da:	2301      	movs	r3, #1
 80094dc:	464a      	mov	r2, r9
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	f43f ae38 	beq.w	800915a <_printf_float+0xc2>
 80094ea:	f108 0801 	add.w	r8, r8, #1
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094f2:	1a5b      	subs	r3, r3, r1
 80094f4:	4543      	cmp	r3, r8
 80094f6:	dcf0      	bgt.n	80094da <_printf_float+0x442>
 80094f8:	e6fa      	b.n	80092f0 <_printf_float+0x258>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	f104 0919 	add.w	r9, r4, #25
 8009502:	e7f4      	b.n	80094ee <_printf_float+0x456>

08009504 <_printf_common>:
 8009504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009508:	4616      	mov	r6, r2
 800950a:	4699      	mov	r9, r3
 800950c:	688a      	ldr	r2, [r1, #8]
 800950e:	690b      	ldr	r3, [r1, #16]
 8009510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009514:	4293      	cmp	r3, r2
 8009516:	bfb8      	it	lt
 8009518:	4613      	movlt	r3, r2
 800951a:	6033      	str	r3, [r6, #0]
 800951c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009520:	4607      	mov	r7, r0
 8009522:	460c      	mov	r4, r1
 8009524:	b10a      	cbz	r2, 800952a <_printf_common+0x26>
 8009526:	3301      	adds	r3, #1
 8009528:	6033      	str	r3, [r6, #0]
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	0699      	lsls	r1, r3, #26
 800952e:	bf42      	ittt	mi
 8009530:	6833      	ldrmi	r3, [r6, #0]
 8009532:	3302      	addmi	r3, #2
 8009534:	6033      	strmi	r3, [r6, #0]
 8009536:	6825      	ldr	r5, [r4, #0]
 8009538:	f015 0506 	ands.w	r5, r5, #6
 800953c:	d106      	bne.n	800954c <_printf_common+0x48>
 800953e:	f104 0a19 	add.w	sl, r4, #25
 8009542:	68e3      	ldr	r3, [r4, #12]
 8009544:	6832      	ldr	r2, [r6, #0]
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	42ab      	cmp	r3, r5
 800954a:	dc26      	bgt.n	800959a <_printf_common+0x96>
 800954c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009550:	1e13      	subs	r3, r2, #0
 8009552:	6822      	ldr	r2, [r4, #0]
 8009554:	bf18      	it	ne
 8009556:	2301      	movne	r3, #1
 8009558:	0692      	lsls	r2, r2, #26
 800955a:	d42b      	bmi.n	80095b4 <_printf_common+0xb0>
 800955c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009560:	4649      	mov	r1, r9
 8009562:	4638      	mov	r0, r7
 8009564:	47c0      	blx	r8
 8009566:	3001      	adds	r0, #1
 8009568:	d01e      	beq.n	80095a8 <_printf_common+0xa4>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	68e5      	ldr	r5, [r4, #12]
 800956e:	6832      	ldr	r2, [r6, #0]
 8009570:	f003 0306 	and.w	r3, r3, #6
 8009574:	2b04      	cmp	r3, #4
 8009576:	bf08      	it	eq
 8009578:	1aad      	subeq	r5, r5, r2
 800957a:	68a3      	ldr	r3, [r4, #8]
 800957c:	6922      	ldr	r2, [r4, #16]
 800957e:	bf0c      	ite	eq
 8009580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009584:	2500      	movne	r5, #0
 8009586:	4293      	cmp	r3, r2
 8009588:	bfc4      	itt	gt
 800958a:	1a9b      	subgt	r3, r3, r2
 800958c:	18ed      	addgt	r5, r5, r3
 800958e:	2600      	movs	r6, #0
 8009590:	341a      	adds	r4, #26
 8009592:	42b5      	cmp	r5, r6
 8009594:	d11a      	bne.n	80095cc <_printf_common+0xc8>
 8009596:	2000      	movs	r0, #0
 8009598:	e008      	b.n	80095ac <_printf_common+0xa8>
 800959a:	2301      	movs	r3, #1
 800959c:	4652      	mov	r2, sl
 800959e:	4649      	mov	r1, r9
 80095a0:	4638      	mov	r0, r7
 80095a2:	47c0      	blx	r8
 80095a4:	3001      	adds	r0, #1
 80095a6:	d103      	bne.n	80095b0 <_printf_common+0xac>
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b0:	3501      	adds	r5, #1
 80095b2:	e7c6      	b.n	8009542 <_printf_common+0x3e>
 80095b4:	18e1      	adds	r1, r4, r3
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	2030      	movs	r0, #48	; 0x30
 80095ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095be:	4422      	add	r2, r4
 80095c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095c8:	3302      	adds	r3, #2
 80095ca:	e7c7      	b.n	800955c <_printf_common+0x58>
 80095cc:	2301      	movs	r3, #1
 80095ce:	4622      	mov	r2, r4
 80095d0:	4649      	mov	r1, r9
 80095d2:	4638      	mov	r0, r7
 80095d4:	47c0      	blx	r8
 80095d6:	3001      	adds	r0, #1
 80095d8:	d0e6      	beq.n	80095a8 <_printf_common+0xa4>
 80095da:	3601      	adds	r6, #1
 80095dc:	e7d9      	b.n	8009592 <_printf_common+0x8e>
	...

080095e0 <_printf_i>:
 80095e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e4:	460c      	mov	r4, r1
 80095e6:	4691      	mov	r9, r2
 80095e8:	7e27      	ldrb	r7, [r4, #24]
 80095ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095ec:	2f78      	cmp	r7, #120	; 0x78
 80095ee:	4680      	mov	r8, r0
 80095f0:	469a      	mov	sl, r3
 80095f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095f6:	d807      	bhi.n	8009608 <_printf_i+0x28>
 80095f8:	2f62      	cmp	r7, #98	; 0x62
 80095fa:	d80a      	bhi.n	8009612 <_printf_i+0x32>
 80095fc:	2f00      	cmp	r7, #0
 80095fe:	f000 80d8 	beq.w	80097b2 <_printf_i+0x1d2>
 8009602:	2f58      	cmp	r7, #88	; 0x58
 8009604:	f000 80a3 	beq.w	800974e <_printf_i+0x16e>
 8009608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800960c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009610:	e03a      	b.n	8009688 <_printf_i+0xa8>
 8009612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009616:	2b15      	cmp	r3, #21
 8009618:	d8f6      	bhi.n	8009608 <_printf_i+0x28>
 800961a:	a001      	add	r0, pc, #4	; (adr r0, 8009620 <_printf_i+0x40>)
 800961c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009620:	08009679 	.word	0x08009679
 8009624:	0800968d 	.word	0x0800968d
 8009628:	08009609 	.word	0x08009609
 800962c:	08009609 	.word	0x08009609
 8009630:	08009609 	.word	0x08009609
 8009634:	08009609 	.word	0x08009609
 8009638:	0800968d 	.word	0x0800968d
 800963c:	08009609 	.word	0x08009609
 8009640:	08009609 	.word	0x08009609
 8009644:	08009609 	.word	0x08009609
 8009648:	08009609 	.word	0x08009609
 800964c:	08009799 	.word	0x08009799
 8009650:	080096bd 	.word	0x080096bd
 8009654:	0800977b 	.word	0x0800977b
 8009658:	08009609 	.word	0x08009609
 800965c:	08009609 	.word	0x08009609
 8009660:	080097bb 	.word	0x080097bb
 8009664:	08009609 	.word	0x08009609
 8009668:	080096bd 	.word	0x080096bd
 800966c:	08009609 	.word	0x08009609
 8009670:	08009609 	.word	0x08009609
 8009674:	08009783 	.word	0x08009783
 8009678:	680b      	ldr	r3, [r1, #0]
 800967a:	1d1a      	adds	r2, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	600a      	str	r2, [r1, #0]
 8009680:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009688:	2301      	movs	r3, #1
 800968a:	e0a3      	b.n	80097d4 <_printf_i+0x1f4>
 800968c:	6825      	ldr	r5, [r4, #0]
 800968e:	6808      	ldr	r0, [r1, #0]
 8009690:	062e      	lsls	r6, r5, #24
 8009692:	f100 0304 	add.w	r3, r0, #4
 8009696:	d50a      	bpl.n	80096ae <_printf_i+0xce>
 8009698:	6805      	ldr	r5, [r0, #0]
 800969a:	600b      	str	r3, [r1, #0]
 800969c:	2d00      	cmp	r5, #0
 800969e:	da03      	bge.n	80096a8 <_printf_i+0xc8>
 80096a0:	232d      	movs	r3, #45	; 0x2d
 80096a2:	426d      	negs	r5, r5
 80096a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a8:	485e      	ldr	r0, [pc, #376]	; (8009824 <_printf_i+0x244>)
 80096aa:	230a      	movs	r3, #10
 80096ac:	e019      	b.n	80096e2 <_printf_i+0x102>
 80096ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80096b2:	6805      	ldr	r5, [r0, #0]
 80096b4:	600b      	str	r3, [r1, #0]
 80096b6:	bf18      	it	ne
 80096b8:	b22d      	sxthne	r5, r5
 80096ba:	e7ef      	b.n	800969c <_printf_i+0xbc>
 80096bc:	680b      	ldr	r3, [r1, #0]
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	1d18      	adds	r0, r3, #4
 80096c2:	6008      	str	r0, [r1, #0]
 80096c4:	0628      	lsls	r0, r5, #24
 80096c6:	d501      	bpl.n	80096cc <_printf_i+0xec>
 80096c8:	681d      	ldr	r5, [r3, #0]
 80096ca:	e002      	b.n	80096d2 <_printf_i+0xf2>
 80096cc:	0669      	lsls	r1, r5, #25
 80096ce:	d5fb      	bpl.n	80096c8 <_printf_i+0xe8>
 80096d0:	881d      	ldrh	r5, [r3, #0]
 80096d2:	4854      	ldr	r0, [pc, #336]	; (8009824 <_printf_i+0x244>)
 80096d4:	2f6f      	cmp	r7, #111	; 0x6f
 80096d6:	bf0c      	ite	eq
 80096d8:	2308      	moveq	r3, #8
 80096da:	230a      	movne	r3, #10
 80096dc:	2100      	movs	r1, #0
 80096de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e2:	6866      	ldr	r6, [r4, #4]
 80096e4:	60a6      	str	r6, [r4, #8]
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	bfa2      	ittt	ge
 80096ea:	6821      	ldrge	r1, [r4, #0]
 80096ec:	f021 0104 	bicge.w	r1, r1, #4
 80096f0:	6021      	strge	r1, [r4, #0]
 80096f2:	b90d      	cbnz	r5, 80096f8 <_printf_i+0x118>
 80096f4:	2e00      	cmp	r6, #0
 80096f6:	d04d      	beq.n	8009794 <_printf_i+0x1b4>
 80096f8:	4616      	mov	r6, r2
 80096fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80096fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009702:	5dc7      	ldrb	r7, [r0, r7]
 8009704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009708:	462f      	mov	r7, r5
 800970a:	42bb      	cmp	r3, r7
 800970c:	460d      	mov	r5, r1
 800970e:	d9f4      	bls.n	80096fa <_printf_i+0x11a>
 8009710:	2b08      	cmp	r3, #8
 8009712:	d10b      	bne.n	800972c <_printf_i+0x14c>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	07df      	lsls	r7, r3, #31
 8009718:	d508      	bpl.n	800972c <_printf_i+0x14c>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	6861      	ldr	r1, [r4, #4]
 800971e:	4299      	cmp	r1, r3
 8009720:	bfde      	ittt	le
 8009722:	2330      	movle	r3, #48	; 0x30
 8009724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009728:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800972c:	1b92      	subs	r2, r2, r6
 800972e:	6122      	str	r2, [r4, #16]
 8009730:	f8cd a000 	str.w	sl, [sp]
 8009734:	464b      	mov	r3, r9
 8009736:	aa03      	add	r2, sp, #12
 8009738:	4621      	mov	r1, r4
 800973a:	4640      	mov	r0, r8
 800973c:	f7ff fee2 	bl	8009504 <_printf_common>
 8009740:	3001      	adds	r0, #1
 8009742:	d14c      	bne.n	80097de <_printf_i+0x1fe>
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009748:	b004      	add	sp, #16
 800974a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974e:	4835      	ldr	r0, [pc, #212]	; (8009824 <_printf_i+0x244>)
 8009750:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	680e      	ldr	r6, [r1, #0]
 8009758:	061f      	lsls	r7, r3, #24
 800975a:	f856 5b04 	ldr.w	r5, [r6], #4
 800975e:	600e      	str	r6, [r1, #0]
 8009760:	d514      	bpl.n	800978c <_printf_i+0x1ac>
 8009762:	07d9      	lsls	r1, r3, #31
 8009764:	bf44      	itt	mi
 8009766:	f043 0320 	orrmi.w	r3, r3, #32
 800976a:	6023      	strmi	r3, [r4, #0]
 800976c:	b91d      	cbnz	r5, 8009776 <_printf_i+0x196>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f023 0320 	bic.w	r3, r3, #32
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	2310      	movs	r3, #16
 8009778:	e7b0      	b.n	80096dc <_printf_i+0xfc>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	f043 0320 	orr.w	r3, r3, #32
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	2378      	movs	r3, #120	; 0x78
 8009784:	4828      	ldr	r0, [pc, #160]	; (8009828 <_printf_i+0x248>)
 8009786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800978a:	e7e3      	b.n	8009754 <_printf_i+0x174>
 800978c:	065e      	lsls	r6, r3, #25
 800978e:	bf48      	it	mi
 8009790:	b2ad      	uxthmi	r5, r5
 8009792:	e7e6      	b.n	8009762 <_printf_i+0x182>
 8009794:	4616      	mov	r6, r2
 8009796:	e7bb      	b.n	8009710 <_printf_i+0x130>
 8009798:	680b      	ldr	r3, [r1, #0]
 800979a:	6826      	ldr	r6, [r4, #0]
 800979c:	6960      	ldr	r0, [r4, #20]
 800979e:	1d1d      	adds	r5, r3, #4
 80097a0:	600d      	str	r5, [r1, #0]
 80097a2:	0635      	lsls	r5, r6, #24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0x1cc>
 80097a8:	6018      	str	r0, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0x1d2>
 80097ac:	0671      	lsls	r1, r6, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0x1c8>
 80097b0:	8018      	strh	r0, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	4616      	mov	r6, r2
 80097b8:	e7ba      	b.n	8009730 <_printf_i+0x150>
 80097ba:	680b      	ldr	r3, [r1, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	600a      	str	r2, [r1, #0]
 80097c0:	681e      	ldr	r6, [r3, #0]
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7f6 fd2a 	bl	8000220 <memchr>
 80097cc:	b108      	cbz	r0, 80097d2 <_printf_i+0x1f2>
 80097ce:	1b80      	subs	r0, r0, r6
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	2300      	movs	r3, #0
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097dc:	e7a8      	b.n	8009730 <_printf_i+0x150>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	4632      	mov	r2, r6
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0ab      	beq.n	8009744 <_printf_i+0x164>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	d413      	bmi.n	800981a <_printf_i+0x23a>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e7a4      	b.n	8009748 <_printf_i+0x168>
 80097fe:	2301      	movs	r3, #1
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d09b      	beq.n	8009744 <_printf_i+0x164>
 800980c:	3501      	adds	r5, #1
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	42ab      	cmp	r3, r5
 8009816:	dcf2      	bgt.n	80097fe <_printf_i+0x21e>
 8009818:	e7eb      	b.n	80097f2 <_printf_i+0x212>
 800981a:	2500      	movs	r5, #0
 800981c:	f104 0619 	add.w	r6, r4, #25
 8009820:	e7f5      	b.n	800980e <_printf_i+0x22e>
 8009822:	bf00      	nop
 8009824:	0800bd52 	.word	0x0800bd52
 8009828:	0800bd63 	.word	0x0800bd63

0800982c <sniprintf>:
 800982c:	b40c      	push	{r2, r3}
 800982e:	b530      	push	{r4, r5, lr}
 8009830:	4b17      	ldr	r3, [pc, #92]	; (8009890 <sniprintf+0x64>)
 8009832:	1e0c      	subs	r4, r1, #0
 8009834:	681d      	ldr	r5, [r3, #0]
 8009836:	b09d      	sub	sp, #116	; 0x74
 8009838:	da08      	bge.n	800984c <sniprintf+0x20>
 800983a:	238b      	movs	r3, #139	; 0x8b
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009842:	b01d      	add	sp, #116	; 0x74
 8009844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009848:	b002      	add	sp, #8
 800984a:	4770      	bx	lr
 800984c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009854:	bf14      	ite	ne
 8009856:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800985a:	4623      	moveq	r3, r4
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	9307      	str	r3, [sp, #28]
 8009860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	9006      	str	r0, [sp, #24]
 8009868:	f8ad 3016 	strh.w	r3, [sp, #22]
 800986c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800986e:	ab21      	add	r3, sp, #132	; 0x84
 8009870:	a902      	add	r1, sp, #8
 8009872:	4628      	mov	r0, r5
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	f001 fb35 	bl	800aee4 <_svfiprintf_r>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	bfbc      	itt	lt
 800987e:	238b      	movlt	r3, #139	; 0x8b
 8009880:	602b      	strlt	r3, [r5, #0]
 8009882:	2c00      	cmp	r4, #0
 8009884:	d0dd      	beq.n	8009842 <sniprintf+0x16>
 8009886:	9b02      	ldr	r3, [sp, #8]
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	e7d9      	b.n	8009842 <sniprintf+0x16>
 800988e:	bf00      	nop
 8009890:	20000190 	.word	0x20000190

08009894 <quorem>:
 8009894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	6903      	ldr	r3, [r0, #16]
 800989a:	690c      	ldr	r4, [r1, #16]
 800989c:	42a3      	cmp	r3, r4
 800989e:	4607      	mov	r7, r0
 80098a0:	f2c0 8081 	blt.w	80099a6 <quorem+0x112>
 80098a4:	3c01      	subs	r4, #1
 80098a6:	f101 0814 	add.w	r8, r1, #20
 80098aa:	f100 0514 	add.w	r5, r0, #20
 80098ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098bc:	3301      	adds	r3, #1
 80098be:	429a      	cmp	r2, r3
 80098c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098cc:	d331      	bcc.n	8009932 <quorem+0x9e>
 80098ce:	f04f 0e00 	mov.w	lr, #0
 80098d2:	4640      	mov	r0, r8
 80098d4:	46ac      	mov	ip, r5
 80098d6:	46f2      	mov	sl, lr
 80098d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80098dc:	b293      	uxth	r3, r2
 80098de:	fb06 e303 	mla	r3, r6, r3, lr
 80098e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ebaa 0303 	sub.w	r3, sl, r3
 80098ec:	0c12      	lsrs	r2, r2, #16
 80098ee:	f8dc a000 	ldr.w	sl, [ip]
 80098f2:	fb06 e202 	mla	r2, r6, r2, lr
 80098f6:	fa13 f38a 	uxtah	r3, r3, sl
 80098fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098fe:	fa1f fa82 	uxth.w	sl, r2
 8009902:	f8dc 2000 	ldr.w	r2, [ip]
 8009906:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800990a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800990e:	b29b      	uxth	r3, r3
 8009910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009914:	4581      	cmp	r9, r0
 8009916:	f84c 3b04 	str.w	r3, [ip], #4
 800991a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800991e:	d2db      	bcs.n	80098d8 <quorem+0x44>
 8009920:	f855 300b 	ldr.w	r3, [r5, fp]
 8009924:	b92b      	cbnz	r3, 8009932 <quorem+0x9e>
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	3b04      	subs	r3, #4
 800992a:	429d      	cmp	r5, r3
 800992c:	461a      	mov	r2, r3
 800992e:	d32e      	bcc.n	800998e <quorem+0xfa>
 8009930:	613c      	str	r4, [r7, #16]
 8009932:	4638      	mov	r0, r7
 8009934:	f001 f8c0 	bl	800aab8 <__mcmp>
 8009938:	2800      	cmp	r0, #0
 800993a:	db24      	blt.n	8009986 <quorem+0xf2>
 800993c:	3601      	adds	r6, #1
 800993e:	4628      	mov	r0, r5
 8009940:	f04f 0c00 	mov.w	ip, #0
 8009944:	f858 2b04 	ldr.w	r2, [r8], #4
 8009948:	f8d0 e000 	ldr.w	lr, [r0]
 800994c:	b293      	uxth	r3, r2
 800994e:	ebac 0303 	sub.w	r3, ip, r3
 8009952:	0c12      	lsrs	r2, r2, #16
 8009954:	fa13 f38e 	uxtah	r3, r3, lr
 8009958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800995c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009960:	b29b      	uxth	r3, r3
 8009962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009966:	45c1      	cmp	r9, r8
 8009968:	f840 3b04 	str.w	r3, [r0], #4
 800996c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009970:	d2e8      	bcs.n	8009944 <quorem+0xb0>
 8009972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800997a:	b922      	cbnz	r2, 8009986 <quorem+0xf2>
 800997c:	3b04      	subs	r3, #4
 800997e:	429d      	cmp	r5, r3
 8009980:	461a      	mov	r2, r3
 8009982:	d30a      	bcc.n	800999a <quorem+0x106>
 8009984:	613c      	str	r4, [r7, #16]
 8009986:	4630      	mov	r0, r6
 8009988:	b003      	add	sp, #12
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	3b04      	subs	r3, #4
 8009992:	2a00      	cmp	r2, #0
 8009994:	d1cc      	bne.n	8009930 <quorem+0x9c>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7c7      	b.n	800992a <quorem+0x96>
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	3b04      	subs	r3, #4
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d1f0      	bne.n	8009984 <quorem+0xf0>
 80099a2:	3c01      	subs	r4, #1
 80099a4:	e7eb      	b.n	800997e <quorem+0xea>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e7ee      	b.n	8009988 <quorem+0xf4>
 80099aa:	0000      	movs	r0, r0
 80099ac:	0000      	movs	r0, r0
	...

080099b0 <_dtoa_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	ed2d 8b02 	vpush	{d8}
 80099b8:	ec57 6b10 	vmov	r6, r7, d0
 80099bc:	b095      	sub	sp, #84	; 0x54
 80099be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099c4:	9105      	str	r1, [sp, #20]
 80099c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80099ca:	4604      	mov	r4, r0
 80099cc:	9209      	str	r2, [sp, #36]	; 0x24
 80099ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d0:	b975      	cbnz	r5, 80099f0 <_dtoa_r+0x40>
 80099d2:	2010      	movs	r0, #16
 80099d4:	f000 fddc 	bl	800a590 <malloc>
 80099d8:	4602      	mov	r2, r0
 80099da:	6260      	str	r0, [r4, #36]	; 0x24
 80099dc:	b920      	cbnz	r0, 80099e8 <_dtoa_r+0x38>
 80099de:	4bb2      	ldr	r3, [pc, #712]	; (8009ca8 <_dtoa_r+0x2f8>)
 80099e0:	21ea      	movs	r1, #234	; 0xea
 80099e2:	48b2      	ldr	r0, [pc, #712]	; (8009cac <_dtoa_r+0x2fc>)
 80099e4:	f001 fb8e 	bl	800b104 <__assert_func>
 80099e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099ec:	6005      	str	r5, [r0, #0]
 80099ee:	60c5      	str	r5, [r0, #12]
 80099f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	b151      	cbz	r1, 8009a0c <_dtoa_r+0x5c>
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	604a      	str	r2, [r1, #4]
 80099fa:	2301      	movs	r3, #1
 80099fc:	4093      	lsls	r3, r2
 80099fe:	608b      	str	r3, [r1, #8]
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fe1b 	bl	800a63c <_Bfree>
 8009a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	1e3b      	subs	r3, r7, #0
 8009a0e:	bfb9      	ittee	lt
 8009a10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a14:	9303      	strlt	r3, [sp, #12]
 8009a16:	2300      	movge	r3, #0
 8009a18:	f8c8 3000 	strge.w	r3, [r8]
 8009a1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a20:	4ba3      	ldr	r3, [pc, #652]	; (8009cb0 <_dtoa_r+0x300>)
 8009a22:	bfbc      	itt	lt
 8009a24:	2201      	movlt	r2, #1
 8009a26:	f8c8 2000 	strlt.w	r2, [r8]
 8009a2a:	ea33 0309 	bics.w	r3, r3, r9
 8009a2e:	d11b      	bne.n	8009a68 <_dtoa_r+0xb8>
 8009a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a3c:	4333      	orrs	r3, r6
 8009a3e:	f000 857a 	beq.w	800a536 <_dtoa_r+0xb86>
 8009a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a44:	b963      	cbnz	r3, 8009a60 <_dtoa_r+0xb0>
 8009a46:	4b9b      	ldr	r3, [pc, #620]	; (8009cb4 <_dtoa_r+0x304>)
 8009a48:	e024      	b.n	8009a94 <_dtoa_r+0xe4>
 8009a4a:	4b9b      	ldr	r3, [pc, #620]	; (8009cb8 <_dtoa_r+0x308>)
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	3308      	adds	r3, #8
 8009a50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	9800      	ldr	r0, [sp, #0]
 8009a56:	b015      	add	sp, #84	; 0x54
 8009a58:	ecbd 8b02 	vpop	{d8}
 8009a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a60:	4b94      	ldr	r3, [pc, #592]	; (8009cb4 <_dtoa_r+0x304>)
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	3303      	adds	r3, #3
 8009a66:	e7f3      	b.n	8009a50 <_dtoa_r+0xa0>
 8009a68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	ec51 0b17 	vmov	r0, r1, d7
 8009a72:	2300      	movs	r3, #0
 8009a74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a78:	f7f7 f846 	bl	8000b08 <__aeabi_dcmpeq>
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	b158      	cbz	r0, 8009a98 <_dtoa_r+0xe8>
 8009a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a82:	2301      	movs	r3, #1
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8551 	beq.w	800a530 <_dtoa_r+0xb80>
 8009a8e:	488b      	ldr	r0, [pc, #556]	; (8009cbc <_dtoa_r+0x30c>)
 8009a90:	6018      	str	r0, [r3, #0]
 8009a92:	1e43      	subs	r3, r0, #1
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	e7dd      	b.n	8009a54 <_dtoa_r+0xa4>
 8009a98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a9c:	aa12      	add	r2, sp, #72	; 0x48
 8009a9e:	a913      	add	r1, sp, #76	; 0x4c
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f001 f8ad 	bl	800ac00 <__d2b>
 8009aa6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009aaa:	4683      	mov	fp, r0
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d07c      	beq.n	8009baa <_dtoa_r+0x1fa>
 8009ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009abe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aca:	4b7d      	ldr	r3, [pc, #500]	; (8009cc0 <_dtoa_r+0x310>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 fbf9 	bl	80002c8 <__aeabi_dsub>
 8009ad6:	a36e      	add	r3, pc, #440	; (adr r3, 8009c90 <_dtoa_r+0x2e0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fdac 	bl	8000638 <__aeabi_dmul>
 8009ae0:	a36d      	add	r3, pc, #436	; (adr r3, 8009c98 <_dtoa_r+0x2e8>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fbf1 	bl	80002cc <__adddf3>
 8009aea:	4606      	mov	r6, r0
 8009aec:	4628      	mov	r0, r5
 8009aee:	460f      	mov	r7, r1
 8009af0:	f7f6 fd38 	bl	8000564 <__aeabi_i2d>
 8009af4:	a36a      	add	r3, pc, #424	; (adr r3, 8009ca0 <_dtoa_r+0x2f0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fd9d 	bl	8000638 <__aeabi_dmul>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fbe1 	bl	80002cc <__adddf3>
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	f7f7 f843 	bl	8000b98 <__aeabi_d2iz>
 8009b12:	2200      	movs	r2, #0
 8009b14:	4682      	mov	sl, r0
 8009b16:	2300      	movs	r3, #0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 fffe 	bl	8000b1c <__aeabi_dcmplt>
 8009b20:	b148      	cbz	r0, 8009b36 <_dtoa_r+0x186>
 8009b22:	4650      	mov	r0, sl
 8009b24:	f7f6 fd1e 	bl	8000564 <__aeabi_i2d>
 8009b28:	4632      	mov	r2, r6
 8009b2a:	463b      	mov	r3, r7
 8009b2c:	f7f6 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8009b30:	b908      	cbnz	r0, 8009b36 <_dtoa_r+0x186>
 8009b32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b36:	f1ba 0f16 	cmp.w	sl, #22
 8009b3a:	d854      	bhi.n	8009be6 <_dtoa_r+0x236>
 8009b3c:	4b61      	ldr	r3, [pc, #388]	; (8009cc4 <_dtoa_r+0x314>)
 8009b3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b4a:	f7f6 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d04b      	beq.n	8009bea <_dtoa_r+0x23a>
 8009b52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b56:	2300      	movs	r3, #0
 8009b58:	930e      	str	r3, [sp, #56]	; 0x38
 8009b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b5c:	1b5d      	subs	r5, r3, r5
 8009b5e:	1e6b      	subs	r3, r5, #1
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	bf43      	ittte	mi
 8009b64:	2300      	movmi	r3, #0
 8009b66:	f1c5 0801 	rsbmi	r8, r5, #1
 8009b6a:	9304      	strmi	r3, [sp, #16]
 8009b6c:	f04f 0800 	movpl.w	r8, #0
 8009b70:	f1ba 0f00 	cmp.w	sl, #0
 8009b74:	db3b      	blt.n	8009bee <_dtoa_r+0x23e>
 8009b76:	9b04      	ldr	r3, [sp, #16]
 8009b78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009b7c:	4453      	add	r3, sl
 8009b7e:	9304      	str	r3, [sp, #16]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9306      	str	r3, [sp, #24]
 8009b84:	9b05      	ldr	r3, [sp, #20]
 8009b86:	2b09      	cmp	r3, #9
 8009b88:	d869      	bhi.n	8009c5e <_dtoa_r+0x2ae>
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	bfc4      	itt	gt
 8009b8e:	3b04      	subgt	r3, #4
 8009b90:	9305      	strgt	r3, [sp, #20]
 8009b92:	9b05      	ldr	r3, [sp, #20]
 8009b94:	f1a3 0302 	sub.w	r3, r3, #2
 8009b98:	bfcc      	ite	gt
 8009b9a:	2500      	movgt	r5, #0
 8009b9c:	2501      	movle	r5, #1
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d869      	bhi.n	8009c76 <_dtoa_r+0x2c6>
 8009ba2:	e8df f003 	tbb	[pc, r3]
 8009ba6:	4e2c      	.short	0x4e2c
 8009ba8:	5a4c      	.short	0x5a4c
 8009baa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009bae:	441d      	add	r5, r3
 8009bb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	bfc1      	itttt	gt
 8009bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009bc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bc8:	bfda      	itte	le
 8009bca:	f1c3 0320 	rsble	r3, r3, #32
 8009bce:	fa06 f003 	lslle.w	r0, r6, r3
 8009bd2:	4318      	orrgt	r0, r3
 8009bd4:	f7f6 fcb6 	bl	8000544 <__aeabi_ui2d>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4606      	mov	r6, r0
 8009bdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009be0:	3d01      	subs	r5, #1
 8009be2:	9310      	str	r3, [sp, #64]	; 0x40
 8009be4:	e771      	b.n	8009aca <_dtoa_r+0x11a>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e7b6      	b.n	8009b58 <_dtoa_r+0x1a8>
 8009bea:	900e      	str	r0, [sp, #56]	; 0x38
 8009bec:	e7b5      	b.n	8009b5a <_dtoa_r+0x1aa>
 8009bee:	f1ca 0300 	rsb	r3, sl, #0
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	eba8 080a 	sub.w	r8, r8, sl
 8009bfa:	930d      	str	r3, [sp, #52]	; 0x34
 8009bfc:	e7c2      	b.n	8009b84 <_dtoa_r+0x1d4>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dc39      	bgt.n	8009c7c <_dtoa_r+0x2cc>
 8009c08:	f04f 0901 	mov.w	r9, #1
 8009c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c10:	464b      	mov	r3, r9
 8009c12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c18:	2200      	movs	r2, #0
 8009c1a:	6042      	str	r2, [r0, #4]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f102 0614 	add.w	r6, r2, #20
 8009c22:	429e      	cmp	r6, r3
 8009c24:	6841      	ldr	r1, [r0, #4]
 8009c26:	d92f      	bls.n	8009c88 <_dtoa_r+0x2d8>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fcc7 	bl	800a5bc <_Balloc>
 8009c2e:	9000      	str	r0, [sp, #0]
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d14b      	bne.n	8009ccc <_dtoa_r+0x31c>
 8009c34:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <_dtoa_r+0x318>)
 8009c36:	4602      	mov	r2, r0
 8009c38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c3c:	e6d1      	b.n	80099e2 <_dtoa_r+0x32>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7de      	b.n	8009c00 <_dtoa_r+0x250>
 8009c42:	2300      	movs	r3, #0
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c48:	eb0a 0903 	add.w	r9, sl, r3
 8009c4c:	f109 0301 	add.w	r3, r9, #1
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	bfb8      	it	lt
 8009c56:	2301      	movlt	r3, #1
 8009c58:	e7dd      	b.n	8009c16 <_dtoa_r+0x266>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7f2      	b.n	8009c44 <_dtoa_r+0x294>
 8009c5e:	2501      	movs	r5, #1
 8009c60:	2300      	movs	r3, #0
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	9508      	str	r5, [sp, #32]
 8009c66:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c70:	2312      	movs	r3, #18
 8009c72:	9209      	str	r2, [sp, #36]	; 0x24
 8009c74:	e7cf      	b.n	8009c16 <_dtoa_r+0x266>
 8009c76:	2301      	movs	r3, #1
 8009c78:	9308      	str	r3, [sp, #32]
 8009c7a:	e7f4      	b.n	8009c66 <_dtoa_r+0x2b6>
 8009c7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009c80:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c84:	464b      	mov	r3, r9
 8009c86:	e7c6      	b.n	8009c16 <_dtoa_r+0x266>
 8009c88:	3101      	adds	r1, #1
 8009c8a:	6041      	str	r1, [r0, #4]
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	e7c6      	b.n	8009c1e <_dtoa_r+0x26e>
 8009c90:	636f4361 	.word	0x636f4361
 8009c94:	3fd287a7 	.word	0x3fd287a7
 8009c98:	8b60c8b3 	.word	0x8b60c8b3
 8009c9c:	3fc68a28 	.word	0x3fc68a28
 8009ca0:	509f79fb 	.word	0x509f79fb
 8009ca4:	3fd34413 	.word	0x3fd34413
 8009ca8:	0800bd81 	.word	0x0800bd81
 8009cac:	0800bd98 	.word	0x0800bd98
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	0800bd7d 	.word	0x0800bd7d
 8009cb8:	0800bd74 	.word	0x0800bd74
 8009cbc:	0800bd51 	.word	0x0800bd51
 8009cc0:	3ff80000 	.word	0x3ff80000
 8009cc4:	0800be90 	.word	0x0800be90
 8009cc8:	0800bdf7 	.word	0x0800bdf7
 8009ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cce:	9a00      	ldr	r2, [sp, #0]
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	9b01      	ldr	r3, [sp, #4]
 8009cd4:	2b0e      	cmp	r3, #14
 8009cd6:	f200 80ad 	bhi.w	8009e34 <_dtoa_r+0x484>
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	f000 80aa 	beq.w	8009e34 <_dtoa_r+0x484>
 8009ce0:	f1ba 0f00 	cmp.w	sl, #0
 8009ce4:	dd36      	ble.n	8009d54 <_dtoa_r+0x3a4>
 8009ce6:	4ac3      	ldr	r2, [pc, #780]	; (8009ff4 <_dtoa_r+0x644>)
 8009ce8:	f00a 030f 	and.w	r3, sl, #15
 8009cec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cf0:	ed93 7b00 	vldr	d7, [r3]
 8009cf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009cf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009cfc:	eeb0 8a47 	vmov.f32	s16, s14
 8009d00:	eef0 8a67 	vmov.f32	s17, s15
 8009d04:	d016      	beq.n	8009d34 <_dtoa_r+0x384>
 8009d06:	4bbc      	ldr	r3, [pc, #752]	; (8009ff8 <_dtoa_r+0x648>)
 8009d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d10:	f7f6 fdbc 	bl	800088c <__aeabi_ddiv>
 8009d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d18:	f007 070f 	and.w	r7, r7, #15
 8009d1c:	2503      	movs	r5, #3
 8009d1e:	4eb6      	ldr	r6, [pc, #728]	; (8009ff8 <_dtoa_r+0x648>)
 8009d20:	b957      	cbnz	r7, 8009d38 <_dtoa_r+0x388>
 8009d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d26:	ec53 2b18 	vmov	r2, r3, d8
 8009d2a:	f7f6 fdaf 	bl	800088c <__aeabi_ddiv>
 8009d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d32:	e029      	b.n	8009d88 <_dtoa_r+0x3d8>
 8009d34:	2502      	movs	r5, #2
 8009d36:	e7f2      	b.n	8009d1e <_dtoa_r+0x36e>
 8009d38:	07f9      	lsls	r1, r7, #31
 8009d3a:	d508      	bpl.n	8009d4e <_dtoa_r+0x39e>
 8009d3c:	ec51 0b18 	vmov	r0, r1, d8
 8009d40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d44:	f7f6 fc78 	bl	8000638 <__aeabi_dmul>
 8009d48:	ec41 0b18 	vmov	d8, r0, r1
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	107f      	asrs	r7, r7, #1
 8009d50:	3608      	adds	r6, #8
 8009d52:	e7e5      	b.n	8009d20 <_dtoa_r+0x370>
 8009d54:	f000 80a6 	beq.w	8009ea4 <_dtoa_r+0x4f4>
 8009d58:	f1ca 0600 	rsb	r6, sl, #0
 8009d5c:	4ba5      	ldr	r3, [pc, #660]	; (8009ff4 <_dtoa_r+0x644>)
 8009d5e:	4fa6      	ldr	r7, [pc, #664]	; (8009ff8 <_dtoa_r+0x648>)
 8009d60:	f006 020f 	and.w	r2, r6, #15
 8009d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d78:	1136      	asrs	r6, r6, #4
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	2502      	movs	r5, #2
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	f040 8085 	bne.w	8009e8e <_dtoa_r+0x4de>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1d2      	bne.n	8009d2e <_dtoa_r+0x37e>
 8009d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 808c 	beq.w	8009ea8 <_dtoa_r+0x4f8>
 8009d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d94:	4b99      	ldr	r3, [pc, #612]	; (8009ffc <_dtoa_r+0x64c>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 febe 	bl	8000b1c <__aeabi_dcmplt>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f000 8081 	beq.w	8009ea8 <_dtoa_r+0x4f8>
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d07d      	beq.n	8009ea8 <_dtoa_r+0x4f8>
 8009dac:	f1b9 0f00 	cmp.w	r9, #0
 8009db0:	dd3c      	ble.n	8009e2c <_dtoa_r+0x47c>
 8009db2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	2200      	movs	r2, #0
 8009dba:	4b91      	ldr	r3, [pc, #580]	; (800a000 <_dtoa_r+0x650>)
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fc3a 	bl	8000638 <__aeabi_dmul>
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	3501      	adds	r5, #1
 8009dca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009dce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7f6 fbc6 	bl	8000564 <__aeabi_i2d>
 8009dd8:	4632      	mov	r2, r6
 8009dda:	463b      	mov	r3, r7
 8009ddc:	f7f6 fc2c 	bl	8000638 <__aeabi_dmul>
 8009de0:	4b88      	ldr	r3, [pc, #544]	; (800a004 <_dtoa_r+0x654>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	f7f6 fa72 	bl	80002cc <__adddf3>
 8009de8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d15c      	bne.n	8009eb2 <_dtoa_r+0x502>
 8009df8:	4b83      	ldr	r3, [pc, #524]	; (800a008 <_dtoa_r+0x658>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fa62 	bl	80002c8 <__aeabi_dsub>
 8009e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e08:	4606      	mov	r6, r0
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	f7f6 fea4 	bl	8000b58 <__aeabi_dcmpgt>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	f040 8296 	bne.w	800a342 <_dtoa_r+0x992>
 8009e16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f040 8288 	bne.w	800a33c <_dtoa_r+0x98c>
 8009e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f2c0 8158 	blt.w	800a0ec <_dtoa_r+0x73c>
 8009e3c:	f1ba 0f0e 	cmp.w	sl, #14
 8009e40:	f300 8154 	bgt.w	800a0ec <_dtoa_r+0x73c>
 8009e44:	4b6b      	ldr	r3, [pc, #428]	; (8009ff4 <_dtoa_r+0x644>)
 8009e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f280 80e3 	bge.w	800a01c <_dtoa_r+0x66c>
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f300 80df 	bgt.w	800a01c <_dtoa_r+0x66c>
 8009e5e:	f040 826d 	bne.w	800a33c <_dtoa_r+0x98c>
 8009e62:	4b69      	ldr	r3, [pc, #420]	; (800a008 <_dtoa_r+0x658>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 fbe5 	bl	8000638 <__aeabi_dmul>
 8009e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e72:	f7f6 fe67 	bl	8000b44 <__aeabi_dcmpge>
 8009e76:	9e01      	ldr	r6, [sp, #4]
 8009e78:	4637      	mov	r7, r6
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f040 8243 	bne.w	800a306 <_dtoa_r+0x956>
 8009e80:	9d00      	ldr	r5, [sp, #0]
 8009e82:	2331      	movs	r3, #49	; 0x31
 8009e84:	f805 3b01 	strb.w	r3, [r5], #1
 8009e88:	f10a 0a01 	add.w	sl, sl, #1
 8009e8c:	e23f      	b.n	800a30e <_dtoa_r+0x95e>
 8009e8e:	07f2      	lsls	r2, r6, #31
 8009e90:	d505      	bpl.n	8009e9e <_dtoa_r+0x4ee>
 8009e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e96:	f7f6 fbcf 	bl	8000638 <__aeabi_dmul>
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	1076      	asrs	r6, r6, #1
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	e76c      	b.n	8009d7e <_dtoa_r+0x3ce>
 8009ea4:	2502      	movs	r5, #2
 8009ea6:	e76f      	b.n	8009d88 <_dtoa_r+0x3d8>
 8009ea8:	9b01      	ldr	r3, [sp, #4]
 8009eaa:	f8cd a01c 	str.w	sl, [sp, #28]
 8009eae:	930c      	str	r3, [sp, #48]	; 0x30
 8009eb0:	e78d      	b.n	8009dce <_dtoa_r+0x41e>
 8009eb2:	9900      	ldr	r1, [sp, #0]
 8009eb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eb8:	4b4e      	ldr	r3, [pc, #312]	; (8009ff4 <_dtoa_r+0x644>)
 8009eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ebe:	4401      	add	r1, r0
 8009ec0:	9102      	str	r1, [sp, #8]
 8009ec2:	9908      	ldr	r1, [sp, #32]
 8009ec4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ec8:	eef0 8a67 	vmov.f32	s17, s15
 8009ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d045      	beq.n	8009f64 <_dtoa_r+0x5b4>
 8009ed8:	494c      	ldr	r1, [pc, #304]	; (800a00c <_dtoa_r+0x65c>)
 8009eda:	2000      	movs	r0, #0
 8009edc:	f7f6 fcd6 	bl	800088c <__aeabi_ddiv>
 8009ee0:	ec53 2b18 	vmov	r2, r3, d8
 8009ee4:	f7f6 f9f0 	bl	80002c8 <__aeabi_dsub>
 8009ee8:	9d00      	ldr	r5, [sp, #0]
 8009eea:	ec41 0b18 	vmov	d8, r0, r1
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7f6 fe51 	bl	8000b98 <__aeabi_d2iz>
 8009ef6:	900c      	str	r0, [sp, #48]	; 0x30
 8009ef8:	f7f6 fb34 	bl	8000564 <__aeabi_i2d>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 f9e0 	bl	80002c8 <__aeabi_dsub>
 8009f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f0a:	3330      	adds	r3, #48	; 0x30
 8009f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f10:	ec53 2b18 	vmov	r2, r3, d8
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 fe00 	bl	8000b1c <__aeabi_dcmplt>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d165      	bne.n	8009fec <_dtoa_r+0x63c>
 8009f20:	4632      	mov	r2, r6
 8009f22:	463b      	mov	r3, r7
 8009f24:	4935      	ldr	r1, [pc, #212]	; (8009ffc <_dtoa_r+0x64c>)
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f6 f9ce 	bl	80002c8 <__aeabi_dsub>
 8009f2c:	ec53 2b18 	vmov	r2, r3, d8
 8009f30:	f7f6 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f040 80b9 	bne.w	800a0ac <_dtoa_r+0x6fc>
 8009f3a:	9b02      	ldr	r3, [sp, #8]
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	f43f af75 	beq.w	8009e2c <_dtoa_r+0x47c>
 8009f42:	4b2f      	ldr	r3, [pc, #188]	; (800a000 <_dtoa_r+0x650>)
 8009f44:	ec51 0b18 	vmov	r0, r1, d8
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f7f6 fb75 	bl	8000638 <__aeabi_dmul>
 8009f4e:	4b2c      	ldr	r3, [pc, #176]	; (800a000 <_dtoa_r+0x650>)
 8009f50:	ec41 0b18 	vmov	d8, r0, r1
 8009f54:	2200      	movs	r2, #0
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 fb6d 	bl	8000638 <__aeabi_dmul>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	e7c4      	b.n	8009eee <_dtoa_r+0x53e>
 8009f64:	ec51 0b17 	vmov	r0, r1, d7
 8009f68:	f7f6 fb66 	bl	8000638 <__aeabi_dmul>
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	9d00      	ldr	r5, [sp, #0]
 8009f70:	930c      	str	r3, [sp, #48]	; 0x30
 8009f72:	ec41 0b18 	vmov	d8, r0, r1
 8009f76:	4639      	mov	r1, r7
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7f6 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8009f7e:	9011      	str	r0, [sp, #68]	; 0x44
 8009f80:	f7f6 faf0 	bl	8000564 <__aeabi_i2d>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f7f6 f99c 	bl	80002c8 <__aeabi_dsub>
 8009f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f92:	3330      	adds	r3, #48	; 0x30
 8009f94:	f805 3b01 	strb.w	r3, [r5], #1
 8009f98:	9b02      	ldr	r3, [sp, #8]
 8009f9a:	429d      	cmp	r5, r3
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	d134      	bne.n	800a010 <_dtoa_r+0x660>
 8009fa6:	4b19      	ldr	r3, [pc, #100]	; (800a00c <_dtoa_r+0x65c>)
 8009fa8:	ec51 0b18 	vmov	r0, r1, d8
 8009fac:	f7f6 f98e 	bl	80002cc <__adddf3>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f7f6 fdce 	bl	8000b58 <__aeabi_dcmpgt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d175      	bne.n	800a0ac <_dtoa_r+0x6fc>
 8009fc0:	ec53 2b18 	vmov	r2, r3, d8
 8009fc4:	4911      	ldr	r1, [pc, #68]	; (800a00c <_dtoa_r+0x65c>)
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	f7f6 f97e 	bl	80002c8 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fda2 	bl	8000b1c <__aeabi_dcmplt>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f43f af27 	beq.w	8009e2c <_dtoa_r+0x47c>
 8009fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fe0:	1e6b      	subs	r3, r5, #1
 8009fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fe8:	2b30      	cmp	r3, #48	; 0x30
 8009fea:	d0f8      	beq.n	8009fde <_dtoa_r+0x62e>
 8009fec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ff0:	e04a      	b.n	800a088 <_dtoa_r+0x6d8>
 8009ff2:	bf00      	nop
 8009ff4:	0800be90 	.word	0x0800be90
 8009ff8:	0800be68 	.word	0x0800be68
 8009ffc:	3ff00000 	.word	0x3ff00000
 800a000:	40240000 	.word	0x40240000
 800a004:	401c0000 	.word	0x401c0000
 800a008:	40140000 	.word	0x40140000
 800a00c:	3fe00000 	.word	0x3fe00000
 800a010:	4baf      	ldr	r3, [pc, #700]	; (800a2d0 <_dtoa_r+0x920>)
 800a012:	f7f6 fb11 	bl	8000638 <__aeabi_dmul>
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	e7ac      	b.n	8009f76 <_dtoa_r+0x5c6>
 800a01c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a020:	9d00      	ldr	r5, [sp, #0]
 800a022:	4642      	mov	r2, r8
 800a024:	464b      	mov	r3, r9
 800a026:	4630      	mov	r0, r6
 800a028:	4639      	mov	r1, r7
 800a02a:	f7f6 fc2f 	bl	800088c <__aeabi_ddiv>
 800a02e:	f7f6 fdb3 	bl	8000b98 <__aeabi_d2iz>
 800a032:	9002      	str	r0, [sp, #8]
 800a034:	f7f6 fa96 	bl	8000564 <__aeabi_i2d>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	f7f6 fafc 	bl	8000638 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 f93e 	bl	80002c8 <__aeabi_dsub>
 800a04c:	9e02      	ldr	r6, [sp, #8]
 800a04e:	9f01      	ldr	r7, [sp, #4]
 800a050:	3630      	adds	r6, #48	; 0x30
 800a052:	f805 6b01 	strb.w	r6, [r5], #1
 800a056:	9e00      	ldr	r6, [sp, #0]
 800a058:	1bae      	subs	r6, r5, r6
 800a05a:	42b7      	cmp	r7, r6
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	d137      	bne.n	800a0d2 <_dtoa_r+0x722>
 800a062:	f7f6 f933 	bl	80002cc <__adddf3>
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	4606      	mov	r6, r0
 800a06c:	460f      	mov	r7, r1
 800a06e:	f7f6 fd73 	bl	8000b58 <__aeabi_dcmpgt>
 800a072:	b9c8      	cbnz	r0, 800a0a8 <_dtoa_r+0x6f8>
 800a074:	4642      	mov	r2, r8
 800a076:	464b      	mov	r3, r9
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 800a080:	b110      	cbz	r0, 800a088 <_dtoa_r+0x6d8>
 800a082:	9b02      	ldr	r3, [sp, #8]
 800a084:	07d9      	lsls	r1, r3, #31
 800a086:	d40f      	bmi.n	800a0a8 <_dtoa_r+0x6f8>
 800a088:	4620      	mov	r0, r4
 800a08a:	4659      	mov	r1, fp
 800a08c:	f000 fad6 	bl	800a63c <_Bfree>
 800a090:	2300      	movs	r3, #0
 800a092:	702b      	strb	r3, [r5, #0]
 800a094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a096:	f10a 0001 	add.w	r0, sl, #1
 800a09a:	6018      	str	r0, [r3, #0]
 800a09c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f43f acd8 	beq.w	8009a54 <_dtoa_r+0xa4>
 800a0a4:	601d      	str	r5, [r3, #0]
 800a0a6:	e4d5      	b.n	8009a54 <_dtoa_r+0xa4>
 800a0a8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0b4:	2a39      	cmp	r2, #57	; 0x39
 800a0b6:	d108      	bne.n	800a0ca <_dtoa_r+0x71a>
 800a0b8:	9a00      	ldr	r2, [sp, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d1f7      	bne.n	800a0ae <_dtoa_r+0x6fe>
 800a0be:	9a07      	ldr	r2, [sp, #28]
 800a0c0:	9900      	ldr	r1, [sp, #0]
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	9207      	str	r2, [sp, #28]
 800a0c6:	2230      	movs	r2, #48	; 0x30
 800a0c8:	700a      	strb	r2, [r1, #0]
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	3201      	adds	r2, #1
 800a0ce:	701a      	strb	r2, [r3, #0]
 800a0d0:	e78c      	b.n	8009fec <_dtoa_r+0x63c>
 800a0d2:	4b7f      	ldr	r3, [pc, #508]	; (800a2d0 <_dtoa_r+0x920>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f7f6 faaf 	bl	8000638 <__aeabi_dmul>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	f7f6 fd11 	bl	8000b08 <__aeabi_dcmpeq>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d09b      	beq.n	800a022 <_dtoa_r+0x672>
 800a0ea:	e7cd      	b.n	800a088 <_dtoa_r+0x6d8>
 800a0ec:	9a08      	ldr	r2, [sp, #32]
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	f000 80c4 	beq.w	800a27c <_dtoa_r+0x8cc>
 800a0f4:	9a05      	ldr	r2, [sp, #20]
 800a0f6:	2a01      	cmp	r2, #1
 800a0f8:	f300 80a8 	bgt.w	800a24c <_dtoa_r+0x89c>
 800a0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	f000 80a0 	beq.w	800a244 <_dtoa_r+0x894>
 800a104:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a108:	9e06      	ldr	r6, [sp, #24]
 800a10a:	4645      	mov	r5, r8
 800a10c:	9a04      	ldr	r2, [sp, #16]
 800a10e:	2101      	movs	r1, #1
 800a110:	441a      	add	r2, r3
 800a112:	4620      	mov	r0, r4
 800a114:	4498      	add	r8, r3
 800a116:	9204      	str	r2, [sp, #16]
 800a118:	f000 fb4c 	bl	800a7b4 <__i2b>
 800a11c:	4607      	mov	r7, r0
 800a11e:	2d00      	cmp	r5, #0
 800a120:	dd0b      	ble.n	800a13a <_dtoa_r+0x78a>
 800a122:	9b04      	ldr	r3, [sp, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd08      	ble.n	800a13a <_dtoa_r+0x78a>
 800a128:	42ab      	cmp	r3, r5
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	bfa8      	it	ge
 800a12e:	462b      	movge	r3, r5
 800a130:	eba8 0803 	sub.w	r8, r8, r3
 800a134:	1aed      	subs	r5, r5, r3
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	b1fb      	cbz	r3, 800a17e <_dtoa_r+0x7ce>
 800a13e:	9b08      	ldr	r3, [sp, #32]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 809f 	beq.w	800a284 <_dtoa_r+0x8d4>
 800a146:	2e00      	cmp	r6, #0
 800a148:	dd11      	ble.n	800a16e <_dtoa_r+0x7be>
 800a14a:	4639      	mov	r1, r7
 800a14c:	4632      	mov	r2, r6
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 fbec 	bl	800a92c <__pow5mult>
 800a154:	465a      	mov	r2, fp
 800a156:	4601      	mov	r1, r0
 800a158:	4607      	mov	r7, r0
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fb40 	bl	800a7e0 <__multiply>
 800a160:	4659      	mov	r1, fp
 800a162:	9007      	str	r0, [sp, #28]
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fa69 	bl	800a63c <_Bfree>
 800a16a:	9b07      	ldr	r3, [sp, #28]
 800a16c:	469b      	mov	fp, r3
 800a16e:	9b06      	ldr	r3, [sp, #24]
 800a170:	1b9a      	subs	r2, r3, r6
 800a172:	d004      	beq.n	800a17e <_dtoa_r+0x7ce>
 800a174:	4659      	mov	r1, fp
 800a176:	4620      	mov	r0, r4
 800a178:	f000 fbd8 	bl	800a92c <__pow5mult>
 800a17c:	4683      	mov	fp, r0
 800a17e:	2101      	movs	r1, #1
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fb17 	bl	800a7b4 <__i2b>
 800a186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a188:	2b00      	cmp	r3, #0
 800a18a:	4606      	mov	r6, r0
 800a18c:	dd7c      	ble.n	800a288 <_dtoa_r+0x8d8>
 800a18e:	461a      	mov	r2, r3
 800a190:	4601      	mov	r1, r0
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fbca 	bl	800a92c <__pow5mult>
 800a198:	9b05      	ldr	r3, [sp, #20]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	4606      	mov	r6, r0
 800a19e:	dd76      	ble.n	800a28e <_dtoa_r+0x8de>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9306      	str	r3, [sp, #24]
 800a1a4:	6933      	ldr	r3, [r6, #16]
 800a1a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1aa:	6918      	ldr	r0, [r3, #16]
 800a1ac:	f000 fab2 	bl	800a714 <__hi0bits>
 800a1b0:	f1c0 0020 	rsb	r0, r0, #32
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	4418      	add	r0, r3
 800a1b8:	f010 001f 	ands.w	r0, r0, #31
 800a1bc:	f000 8086 	beq.w	800a2cc <_dtoa_r+0x91c>
 800a1c0:	f1c0 0320 	rsb	r3, r0, #32
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	dd7f      	ble.n	800a2c8 <_dtoa_r+0x918>
 800a1c8:	f1c0 001c 	rsb	r0, r0, #28
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	4403      	add	r3, r0
 800a1d0:	4480      	add	r8, r0
 800a1d2:	4405      	add	r5, r0
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	dd05      	ble.n	800a1e8 <_dtoa_r+0x838>
 800a1dc:	4659      	mov	r1, fp
 800a1de:	4642      	mov	r2, r8
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fbfd 	bl	800a9e0 <__lshift>
 800a1e6:	4683      	mov	fp, r0
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dd05      	ble.n	800a1fa <_dtoa_r+0x84a>
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fbf4 	bl	800a9e0 <__lshift>
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d069      	beq.n	800a2d4 <_dtoa_r+0x924>
 800a200:	4631      	mov	r1, r6
 800a202:	4658      	mov	r0, fp
 800a204:	f000 fc58 	bl	800aab8 <__mcmp>
 800a208:	2800      	cmp	r0, #0
 800a20a:	da63      	bge.n	800a2d4 <_dtoa_r+0x924>
 800a20c:	2300      	movs	r3, #0
 800a20e:	4659      	mov	r1, fp
 800a210:	220a      	movs	r2, #10
 800a212:	4620      	mov	r0, r4
 800a214:	f000 fa34 	bl	800a680 <__multadd>
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a21e:	4683      	mov	fp, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 818f 	beq.w	800a544 <_dtoa_r+0xb94>
 800a226:	4639      	mov	r1, r7
 800a228:	2300      	movs	r3, #0
 800a22a:	220a      	movs	r2, #10
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fa27 	bl	800a680 <__multadd>
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	4607      	mov	r7, r0
 800a238:	f300 808e 	bgt.w	800a358 <_dtoa_r+0x9a8>
 800a23c:	9b05      	ldr	r3, [sp, #20]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	dc50      	bgt.n	800a2e4 <_dtoa_r+0x934>
 800a242:	e089      	b.n	800a358 <_dtoa_r+0x9a8>
 800a244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a24a:	e75d      	b.n	800a108 <_dtoa_r+0x758>
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	1e5e      	subs	r6, r3, #1
 800a250:	9b06      	ldr	r3, [sp, #24]
 800a252:	42b3      	cmp	r3, r6
 800a254:	bfbf      	itttt	lt
 800a256:	9b06      	ldrlt	r3, [sp, #24]
 800a258:	9606      	strlt	r6, [sp, #24]
 800a25a:	1af2      	sublt	r2, r6, r3
 800a25c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a25e:	bfb6      	itet	lt
 800a260:	189b      	addlt	r3, r3, r2
 800a262:	1b9e      	subge	r6, r3, r6
 800a264:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	bfb8      	it	lt
 800a26a:	2600      	movlt	r6, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bfb5      	itete	lt
 800a270:	eba8 0503 	sublt.w	r5, r8, r3
 800a274:	9b01      	ldrge	r3, [sp, #4]
 800a276:	2300      	movlt	r3, #0
 800a278:	4645      	movge	r5, r8
 800a27a:	e747      	b.n	800a10c <_dtoa_r+0x75c>
 800a27c:	9e06      	ldr	r6, [sp, #24]
 800a27e:	9f08      	ldr	r7, [sp, #32]
 800a280:	4645      	mov	r5, r8
 800a282:	e74c      	b.n	800a11e <_dtoa_r+0x76e>
 800a284:	9a06      	ldr	r2, [sp, #24]
 800a286:	e775      	b.n	800a174 <_dtoa_r+0x7c4>
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	dc18      	bgt.n	800a2c0 <_dtoa_r+0x910>
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	b9b3      	cbnz	r3, 800a2c0 <_dtoa_r+0x910>
 800a292:	9b03      	ldr	r3, [sp, #12]
 800a294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a298:	b9a3      	cbnz	r3, 800a2c4 <_dtoa_r+0x914>
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2a0:	0d1b      	lsrs	r3, r3, #20
 800a2a2:	051b      	lsls	r3, r3, #20
 800a2a4:	b12b      	cbz	r3, 800a2b2 <_dtoa_r+0x902>
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	f108 0801 	add.w	r8, r8, #1
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	9306      	str	r3, [sp, #24]
 800a2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f47f af74 	bne.w	800a1a4 <_dtoa_r+0x7f4>
 800a2bc:	2001      	movs	r0, #1
 800a2be:	e779      	b.n	800a1b4 <_dtoa_r+0x804>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e7f6      	b.n	800a2b2 <_dtoa_r+0x902>
 800a2c4:	9b02      	ldr	r3, [sp, #8]
 800a2c6:	e7f4      	b.n	800a2b2 <_dtoa_r+0x902>
 800a2c8:	d085      	beq.n	800a1d6 <_dtoa_r+0x826>
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	301c      	adds	r0, #28
 800a2ce:	e77d      	b.n	800a1cc <_dtoa_r+0x81c>
 800a2d0:	40240000 	.word	0x40240000
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dc38      	bgt.n	800a34c <_dtoa_r+0x99c>
 800a2da:	9b05      	ldr	r3, [sp, #20]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	dd35      	ble.n	800a34c <_dtoa_r+0x99c>
 800a2e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2e4:	f1b9 0f00 	cmp.w	r9, #0
 800a2e8:	d10d      	bne.n	800a306 <_dtoa_r+0x956>
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	464b      	mov	r3, r9
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 f9c5 	bl	800a680 <__multadd>
 800a2f6:	4601      	mov	r1, r0
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f000 fbdc 	bl	800aab8 <__mcmp>
 800a300:	2800      	cmp	r0, #0
 800a302:	f73f adbd 	bgt.w	8009e80 <_dtoa_r+0x4d0>
 800a306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a308:	9d00      	ldr	r5, [sp, #0]
 800a30a:	ea6f 0a03 	mvn.w	sl, r3
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	4631      	mov	r1, r6
 800a314:	4620      	mov	r0, r4
 800a316:	f000 f991 	bl	800a63c <_Bfree>
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	f43f aeb4 	beq.w	800a088 <_dtoa_r+0x6d8>
 800a320:	f1b8 0f00 	cmp.w	r8, #0
 800a324:	d005      	beq.n	800a332 <_dtoa_r+0x982>
 800a326:	45b8      	cmp	r8, r7
 800a328:	d003      	beq.n	800a332 <_dtoa_r+0x982>
 800a32a:	4641      	mov	r1, r8
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f985 	bl	800a63c <_Bfree>
 800a332:	4639      	mov	r1, r7
 800a334:	4620      	mov	r0, r4
 800a336:	f000 f981 	bl	800a63c <_Bfree>
 800a33a:	e6a5      	b.n	800a088 <_dtoa_r+0x6d8>
 800a33c:	2600      	movs	r6, #0
 800a33e:	4637      	mov	r7, r6
 800a340:	e7e1      	b.n	800a306 <_dtoa_r+0x956>
 800a342:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a348:	4637      	mov	r7, r6
 800a34a:	e599      	b.n	8009e80 <_dtoa_r+0x4d0>
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 80fd 	beq.w	800a552 <_dtoa_r+0xba2>
 800a358:	2d00      	cmp	r5, #0
 800a35a:	dd05      	ble.n	800a368 <_dtoa_r+0x9b8>
 800a35c:	4639      	mov	r1, r7
 800a35e:	462a      	mov	r2, r5
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fb3d 	bl	800a9e0 <__lshift>
 800a366:	4607      	mov	r7, r0
 800a368:	9b06      	ldr	r3, [sp, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d05c      	beq.n	800a428 <_dtoa_r+0xa78>
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4620      	mov	r0, r4
 800a372:	f000 f923 	bl	800a5bc <_Balloc>
 800a376:	4605      	mov	r5, r0
 800a378:	b928      	cbnz	r0, 800a386 <_dtoa_r+0x9d6>
 800a37a:	4b80      	ldr	r3, [pc, #512]	; (800a57c <_dtoa_r+0xbcc>)
 800a37c:	4602      	mov	r2, r0
 800a37e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a382:	f7ff bb2e 	b.w	80099e2 <_dtoa_r+0x32>
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	3202      	adds	r2, #2
 800a38a:	0092      	lsls	r2, r2, #2
 800a38c:	f107 010c 	add.w	r1, r7, #12
 800a390:	300c      	adds	r0, #12
 800a392:	f000 f905 	bl	800a5a0 <memcpy>
 800a396:	2201      	movs	r2, #1
 800a398:	4629      	mov	r1, r5
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fb20 	bl	800a9e0 <__lshift>
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	9b00      	ldr	r3, [sp, #0]
 800a3a8:	444b      	add	r3, r9
 800a3aa:	9307      	str	r3, [sp, #28]
 800a3ac:	9b02      	ldr	r3, [sp, #8]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	46b8      	mov	r8, r7
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4658      	mov	r0, fp
 800a3c0:	9302      	str	r3, [sp, #8]
 800a3c2:	f7ff fa67 	bl	8009894 <quorem>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	3330      	adds	r3, #48	; 0x30
 800a3ca:	9004      	str	r0, [sp, #16]
 800a3cc:	4641      	mov	r1, r8
 800a3ce:	4658      	mov	r0, fp
 800a3d0:	9308      	str	r3, [sp, #32]
 800a3d2:	f000 fb71 	bl	800aab8 <__mcmp>
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	4681      	mov	r9, r0
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fb87 	bl	800aaf0 <__mdiff>
 800a3e2:	68c2      	ldr	r2, [r0, #12]
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	bb02      	cbnz	r2, 800a42c <_dtoa_r+0xa7c>
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	4658      	mov	r0, fp
 800a3ee:	f000 fb63 	bl	800aab8 <__mcmp>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a3fe:	f000 f91d 	bl	800a63c <_Bfree>
 800a402:	9b05      	ldr	r3, [sp, #20]
 800a404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a406:	9d01      	ldr	r5, [sp, #4]
 800a408:	ea43 0102 	orr.w	r1, r3, r2
 800a40c:	9b06      	ldr	r3, [sp, #24]
 800a40e:	430b      	orrs	r3, r1
 800a410:	9b08      	ldr	r3, [sp, #32]
 800a412:	d10d      	bne.n	800a430 <_dtoa_r+0xa80>
 800a414:	2b39      	cmp	r3, #57	; 0x39
 800a416:	d029      	beq.n	800a46c <_dtoa_r+0xabc>
 800a418:	f1b9 0f00 	cmp.w	r9, #0
 800a41c:	dd01      	ble.n	800a422 <_dtoa_r+0xa72>
 800a41e:	9b04      	ldr	r3, [sp, #16]
 800a420:	3331      	adds	r3, #49	; 0x31
 800a422:	9a02      	ldr	r2, [sp, #8]
 800a424:	7013      	strb	r3, [r2, #0]
 800a426:	e774      	b.n	800a312 <_dtoa_r+0x962>
 800a428:	4638      	mov	r0, r7
 800a42a:	e7b9      	b.n	800a3a0 <_dtoa_r+0x9f0>
 800a42c:	2201      	movs	r2, #1
 800a42e:	e7e2      	b.n	800a3f6 <_dtoa_r+0xa46>
 800a430:	f1b9 0f00 	cmp.w	r9, #0
 800a434:	db06      	blt.n	800a444 <_dtoa_r+0xa94>
 800a436:	9905      	ldr	r1, [sp, #20]
 800a438:	ea41 0909 	orr.w	r9, r1, r9
 800a43c:	9906      	ldr	r1, [sp, #24]
 800a43e:	ea59 0101 	orrs.w	r1, r9, r1
 800a442:	d120      	bne.n	800a486 <_dtoa_r+0xad6>
 800a444:	2a00      	cmp	r2, #0
 800a446:	ddec      	ble.n	800a422 <_dtoa_r+0xa72>
 800a448:	4659      	mov	r1, fp
 800a44a:	2201      	movs	r2, #1
 800a44c:	4620      	mov	r0, r4
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	f000 fac6 	bl	800a9e0 <__lshift>
 800a454:	4631      	mov	r1, r6
 800a456:	4683      	mov	fp, r0
 800a458:	f000 fb2e 	bl	800aab8 <__mcmp>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	dc02      	bgt.n	800a468 <_dtoa_r+0xab8>
 800a462:	d1de      	bne.n	800a422 <_dtoa_r+0xa72>
 800a464:	07da      	lsls	r2, r3, #31
 800a466:	d5dc      	bpl.n	800a422 <_dtoa_r+0xa72>
 800a468:	2b39      	cmp	r3, #57	; 0x39
 800a46a:	d1d8      	bne.n	800a41e <_dtoa_r+0xa6e>
 800a46c:	9a02      	ldr	r2, [sp, #8]
 800a46e:	2339      	movs	r3, #57	; 0x39
 800a470:	7013      	strb	r3, [r2, #0]
 800a472:	462b      	mov	r3, r5
 800a474:	461d      	mov	r5, r3
 800a476:	3b01      	subs	r3, #1
 800a478:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a47c:	2a39      	cmp	r2, #57	; 0x39
 800a47e:	d050      	beq.n	800a522 <_dtoa_r+0xb72>
 800a480:	3201      	adds	r2, #1
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	e745      	b.n	800a312 <_dtoa_r+0x962>
 800a486:	2a00      	cmp	r2, #0
 800a488:	dd03      	ble.n	800a492 <_dtoa_r+0xae2>
 800a48a:	2b39      	cmp	r3, #57	; 0x39
 800a48c:	d0ee      	beq.n	800a46c <_dtoa_r+0xabc>
 800a48e:	3301      	adds	r3, #1
 800a490:	e7c7      	b.n	800a422 <_dtoa_r+0xa72>
 800a492:	9a01      	ldr	r2, [sp, #4]
 800a494:	9907      	ldr	r1, [sp, #28]
 800a496:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a49a:	428a      	cmp	r2, r1
 800a49c:	d02a      	beq.n	800a4f4 <_dtoa_r+0xb44>
 800a49e:	4659      	mov	r1, fp
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	220a      	movs	r2, #10
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 f8eb 	bl	800a680 <__multadd>
 800a4aa:	45b8      	cmp	r8, r7
 800a4ac:	4683      	mov	fp, r0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	f04f 020a 	mov.w	r2, #10
 800a4b6:	4641      	mov	r1, r8
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	d107      	bne.n	800a4cc <_dtoa_r+0xb1c>
 800a4bc:	f000 f8e0 	bl	800a680 <__multadd>
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	e775      	b.n	800a3b8 <_dtoa_r+0xa08>
 800a4cc:	f000 f8d8 	bl	800a680 <__multadd>
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 f8d1 	bl	800a680 <__multadd>
 800a4de:	4607      	mov	r7, r0
 800a4e0:	e7f0      	b.n	800a4c4 <_dtoa_r+0xb14>
 800a4e2:	f1b9 0f00 	cmp.w	r9, #0
 800a4e6:	9a00      	ldr	r2, [sp, #0]
 800a4e8:	bfcc      	ite	gt
 800a4ea:	464d      	movgt	r5, r9
 800a4ec:	2501      	movle	r5, #1
 800a4ee:	4415      	add	r5, r2
 800a4f0:	f04f 0800 	mov.w	r8, #0
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f000 fa70 	bl	800a9e0 <__lshift>
 800a500:	4631      	mov	r1, r6
 800a502:	4683      	mov	fp, r0
 800a504:	f000 fad8 	bl	800aab8 <__mcmp>
 800a508:	2800      	cmp	r0, #0
 800a50a:	dcb2      	bgt.n	800a472 <_dtoa_r+0xac2>
 800a50c:	d102      	bne.n	800a514 <_dtoa_r+0xb64>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	07db      	lsls	r3, r3, #31
 800a512:	d4ae      	bmi.n	800a472 <_dtoa_r+0xac2>
 800a514:	462b      	mov	r3, r5
 800a516:	461d      	mov	r5, r3
 800a518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a51c:	2a30      	cmp	r2, #48	; 0x30
 800a51e:	d0fa      	beq.n	800a516 <_dtoa_r+0xb66>
 800a520:	e6f7      	b.n	800a312 <_dtoa_r+0x962>
 800a522:	9a00      	ldr	r2, [sp, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d1a5      	bne.n	800a474 <_dtoa_r+0xac4>
 800a528:	f10a 0a01 	add.w	sl, sl, #1
 800a52c:	2331      	movs	r3, #49	; 0x31
 800a52e:	e779      	b.n	800a424 <_dtoa_r+0xa74>
 800a530:	4b13      	ldr	r3, [pc, #76]	; (800a580 <_dtoa_r+0xbd0>)
 800a532:	f7ff baaf 	b.w	8009a94 <_dtoa_r+0xe4>
 800a536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f47f aa86 	bne.w	8009a4a <_dtoa_r+0x9a>
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <_dtoa_r+0xbd4>)
 800a540:	f7ff baa8 	b.w	8009a94 <_dtoa_r+0xe4>
 800a544:	f1b9 0f00 	cmp.w	r9, #0
 800a548:	dc03      	bgt.n	800a552 <_dtoa_r+0xba2>
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	f73f aec9 	bgt.w	800a2e4 <_dtoa_r+0x934>
 800a552:	9d00      	ldr	r5, [sp, #0]
 800a554:	4631      	mov	r1, r6
 800a556:	4658      	mov	r0, fp
 800a558:	f7ff f99c 	bl	8009894 <quorem>
 800a55c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a560:	f805 3b01 	strb.w	r3, [r5], #1
 800a564:	9a00      	ldr	r2, [sp, #0]
 800a566:	1aaa      	subs	r2, r5, r2
 800a568:	4591      	cmp	r9, r2
 800a56a:	ddba      	ble.n	800a4e2 <_dtoa_r+0xb32>
 800a56c:	4659      	mov	r1, fp
 800a56e:	2300      	movs	r3, #0
 800a570:	220a      	movs	r2, #10
 800a572:	4620      	mov	r0, r4
 800a574:	f000 f884 	bl	800a680 <__multadd>
 800a578:	4683      	mov	fp, r0
 800a57a:	e7eb      	b.n	800a554 <_dtoa_r+0xba4>
 800a57c:	0800bdf7 	.word	0x0800bdf7
 800a580:	0800bd50 	.word	0x0800bd50
 800a584:	0800bd74 	.word	0x0800bd74

0800a588 <_localeconv_r>:
 800a588:	4800      	ldr	r0, [pc, #0]	; (800a58c <_localeconv_r+0x4>)
 800a58a:	4770      	bx	lr
 800a58c:	200002e4 	.word	0x200002e4

0800a590 <malloc>:
 800a590:	4b02      	ldr	r3, [pc, #8]	; (800a59c <malloc+0xc>)
 800a592:	4601      	mov	r1, r0
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	f000 bbef 	b.w	800ad78 <_malloc_r>
 800a59a:	bf00      	nop
 800a59c:	20000190 	.word	0x20000190

0800a5a0 <memcpy>:
 800a5a0:	440a      	add	r2, r1
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5a8:	d100      	bne.n	800a5ac <memcpy+0xc>
 800a5aa:	4770      	bx	lr
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5b6:	4291      	cmp	r1, r2
 800a5b8:	d1f9      	bne.n	800a5ae <memcpy+0xe>
 800a5ba:	bd10      	pop	{r4, pc}

0800a5bc <_Balloc>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	b976      	cbnz	r6, 800a5e4 <_Balloc+0x28>
 800a5c6:	2010      	movs	r0, #16
 800a5c8:	f7ff ffe2 	bl	800a590 <malloc>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	6260      	str	r0, [r4, #36]	; 0x24
 800a5d0:	b920      	cbnz	r0, 800a5dc <_Balloc+0x20>
 800a5d2:	4b18      	ldr	r3, [pc, #96]	; (800a634 <_Balloc+0x78>)
 800a5d4:	4818      	ldr	r0, [pc, #96]	; (800a638 <_Balloc+0x7c>)
 800a5d6:	2166      	movs	r1, #102	; 0x66
 800a5d8:	f000 fd94 	bl	800b104 <__assert_func>
 800a5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5e0:	6006      	str	r6, [r0, #0]
 800a5e2:	60c6      	str	r6, [r0, #12]
 800a5e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5e6:	68f3      	ldr	r3, [r6, #12]
 800a5e8:	b183      	cbz	r3, 800a60c <_Balloc+0x50>
 800a5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5f2:	b9b8      	cbnz	r0, 800a624 <_Balloc+0x68>
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a5fa:	1d72      	adds	r2, r6, #5
 800a5fc:	0092      	lsls	r2, r2, #2
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 fb5a 	bl	800acb8 <_calloc_r>
 800a604:	b160      	cbz	r0, 800a620 <_Balloc+0x64>
 800a606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a60a:	e00e      	b.n	800a62a <_Balloc+0x6e>
 800a60c:	2221      	movs	r2, #33	; 0x21
 800a60e:	2104      	movs	r1, #4
 800a610:	4620      	mov	r0, r4
 800a612:	f000 fb51 	bl	800acb8 <_calloc_r>
 800a616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a618:	60f0      	str	r0, [r6, #12]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e4      	bne.n	800a5ea <_Balloc+0x2e>
 800a620:	2000      	movs	r0, #0
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	6802      	ldr	r2, [r0, #0]
 800a626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a62a:	2300      	movs	r3, #0
 800a62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a630:	e7f7      	b.n	800a622 <_Balloc+0x66>
 800a632:	bf00      	nop
 800a634:	0800bd81 	.word	0x0800bd81
 800a638:	0800be08 	.word	0x0800be08

0800a63c <_Bfree>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a640:	4605      	mov	r5, r0
 800a642:	460c      	mov	r4, r1
 800a644:	b976      	cbnz	r6, 800a664 <_Bfree+0x28>
 800a646:	2010      	movs	r0, #16
 800a648:	f7ff ffa2 	bl	800a590 <malloc>
 800a64c:	4602      	mov	r2, r0
 800a64e:	6268      	str	r0, [r5, #36]	; 0x24
 800a650:	b920      	cbnz	r0, 800a65c <_Bfree+0x20>
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <_Bfree+0x3c>)
 800a654:	4809      	ldr	r0, [pc, #36]	; (800a67c <_Bfree+0x40>)
 800a656:	218a      	movs	r1, #138	; 0x8a
 800a658:	f000 fd54 	bl	800b104 <__assert_func>
 800a65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a660:	6006      	str	r6, [r0, #0]
 800a662:	60c6      	str	r6, [r0, #12]
 800a664:	b13c      	cbz	r4, 800a676 <_Bfree+0x3a>
 800a666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a668:	6862      	ldr	r2, [r4, #4]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a670:	6021      	str	r1, [r4, #0]
 800a672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	0800bd81 	.word	0x0800bd81
 800a67c:	0800be08 	.word	0x0800be08

0800a680 <__multadd>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	690e      	ldr	r6, [r1, #16]
 800a686:	4607      	mov	r7, r0
 800a688:	4698      	mov	r8, r3
 800a68a:	460c      	mov	r4, r1
 800a68c:	f101 0014 	add.w	r0, r1, #20
 800a690:	2300      	movs	r3, #0
 800a692:	6805      	ldr	r5, [r0, #0]
 800a694:	b2a9      	uxth	r1, r5
 800a696:	fb02 8101 	mla	r1, r2, r1, r8
 800a69a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a69e:	0c2d      	lsrs	r5, r5, #16
 800a6a0:	fb02 c505 	mla	r5, r2, r5, ip
 800a6a4:	b289      	uxth	r1, r1
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a6ac:	429e      	cmp	r6, r3
 800a6ae:	f840 1b04 	str.w	r1, [r0], #4
 800a6b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a6b6:	dcec      	bgt.n	800a692 <__multadd+0x12>
 800a6b8:	f1b8 0f00 	cmp.w	r8, #0
 800a6bc:	d022      	beq.n	800a704 <__multadd+0x84>
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	42b3      	cmp	r3, r6
 800a6c2:	dc19      	bgt.n	800a6f8 <__multadd+0x78>
 800a6c4:	6861      	ldr	r1, [r4, #4]
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	f7ff ff77 	bl	800a5bc <_Balloc>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b928      	cbnz	r0, 800a6de <__multadd+0x5e>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <__multadd+0x8c>)
 800a6d6:	480e      	ldr	r0, [pc, #56]	; (800a710 <__multadd+0x90>)
 800a6d8:	21b5      	movs	r1, #181	; 0xb5
 800a6da:	f000 fd13 	bl	800b104 <__assert_func>
 800a6de:	6922      	ldr	r2, [r4, #16]
 800a6e0:	3202      	adds	r2, #2
 800a6e2:	f104 010c 	add.w	r1, r4, #12
 800a6e6:	0092      	lsls	r2, r2, #2
 800a6e8:	300c      	adds	r0, #12
 800a6ea:	f7ff ff59 	bl	800a5a0 <memcpy>
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff ffa3 	bl	800a63c <_Bfree>
 800a6f6:	462c      	mov	r4, r5
 800a6f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	f8c3 8014 	str.w	r8, [r3, #20]
 800a702:	6126      	str	r6, [r4, #16]
 800a704:	4620      	mov	r0, r4
 800a706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a70a:	bf00      	nop
 800a70c:	0800bdf7 	.word	0x0800bdf7
 800a710:	0800be08 	.word	0x0800be08

0800a714 <__hi0bits>:
 800a714:	0c03      	lsrs	r3, r0, #16
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	b9d3      	cbnz	r3, 800a750 <__hi0bits+0x3c>
 800a71a:	0400      	lsls	r0, r0, #16
 800a71c:	2310      	movs	r3, #16
 800a71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a722:	bf04      	itt	eq
 800a724:	0200      	lsleq	r0, r0, #8
 800a726:	3308      	addeq	r3, #8
 800a728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a72c:	bf04      	itt	eq
 800a72e:	0100      	lsleq	r0, r0, #4
 800a730:	3304      	addeq	r3, #4
 800a732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a736:	bf04      	itt	eq
 800a738:	0080      	lsleq	r0, r0, #2
 800a73a:	3302      	addeq	r3, #2
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db05      	blt.n	800a74c <__hi0bits+0x38>
 800a740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	bf08      	it	eq
 800a74a:	2320      	moveq	r3, #32
 800a74c:	4618      	mov	r0, r3
 800a74e:	4770      	bx	lr
 800a750:	2300      	movs	r3, #0
 800a752:	e7e4      	b.n	800a71e <__hi0bits+0xa>

0800a754 <__lo0bits>:
 800a754:	6803      	ldr	r3, [r0, #0]
 800a756:	f013 0207 	ands.w	r2, r3, #7
 800a75a:	4601      	mov	r1, r0
 800a75c:	d00b      	beq.n	800a776 <__lo0bits+0x22>
 800a75e:	07da      	lsls	r2, r3, #31
 800a760:	d424      	bmi.n	800a7ac <__lo0bits+0x58>
 800a762:	0798      	lsls	r0, r3, #30
 800a764:	bf49      	itett	mi
 800a766:	085b      	lsrmi	r3, r3, #1
 800a768:	089b      	lsrpl	r3, r3, #2
 800a76a:	2001      	movmi	r0, #1
 800a76c:	600b      	strmi	r3, [r1, #0]
 800a76e:	bf5c      	itt	pl
 800a770:	600b      	strpl	r3, [r1, #0]
 800a772:	2002      	movpl	r0, #2
 800a774:	4770      	bx	lr
 800a776:	b298      	uxth	r0, r3
 800a778:	b9b0      	cbnz	r0, 800a7a8 <__lo0bits+0x54>
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	2010      	movs	r0, #16
 800a77e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a782:	bf04      	itt	eq
 800a784:	0a1b      	lsreq	r3, r3, #8
 800a786:	3008      	addeq	r0, #8
 800a788:	071a      	lsls	r2, r3, #28
 800a78a:	bf04      	itt	eq
 800a78c:	091b      	lsreq	r3, r3, #4
 800a78e:	3004      	addeq	r0, #4
 800a790:	079a      	lsls	r2, r3, #30
 800a792:	bf04      	itt	eq
 800a794:	089b      	lsreq	r3, r3, #2
 800a796:	3002      	addeq	r0, #2
 800a798:	07da      	lsls	r2, r3, #31
 800a79a:	d403      	bmi.n	800a7a4 <__lo0bits+0x50>
 800a79c:	085b      	lsrs	r3, r3, #1
 800a79e:	f100 0001 	add.w	r0, r0, #1
 800a7a2:	d005      	beq.n	800a7b0 <__lo0bits+0x5c>
 800a7a4:	600b      	str	r3, [r1, #0]
 800a7a6:	4770      	bx	lr
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	e7e8      	b.n	800a77e <__lo0bits+0x2a>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr
 800a7b0:	2020      	movs	r0, #32
 800a7b2:	4770      	bx	lr

0800a7b4 <__i2b>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff feff 	bl	800a5bc <_Balloc>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__i2b+0x1a>
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <__i2b+0x24>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	; (800a7dc <__i2b+0x28>)
 800a7c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7ca:	f000 fc9b 	bl	800b104 <__assert_func>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6144      	str	r4, [r0, #20]
 800a7d2:	6103      	str	r3, [r0, #16]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800bdf7 	.word	0x0800bdf7
 800a7dc:	0800be08 	.word	0x0800be08

0800a7e0 <__multiply>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	690a      	ldr	r2, [r1, #16]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	bfb8      	it	lt
 800a7ee:	460b      	movlt	r3, r1
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	bfbc      	itt	lt
 800a7f4:	4625      	movlt	r5, r4
 800a7f6:	461c      	movlt	r4, r3
 800a7f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a7fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a800:	68ab      	ldr	r3, [r5, #8]
 800a802:	6869      	ldr	r1, [r5, #4]
 800a804:	eb0a 0709 	add.w	r7, sl, r9
 800a808:	42bb      	cmp	r3, r7
 800a80a:	b085      	sub	sp, #20
 800a80c:	bfb8      	it	lt
 800a80e:	3101      	addlt	r1, #1
 800a810:	f7ff fed4 	bl	800a5bc <_Balloc>
 800a814:	b930      	cbnz	r0, 800a824 <__multiply+0x44>
 800a816:	4602      	mov	r2, r0
 800a818:	4b42      	ldr	r3, [pc, #264]	; (800a924 <__multiply+0x144>)
 800a81a:	4843      	ldr	r0, [pc, #268]	; (800a928 <__multiply+0x148>)
 800a81c:	f240 115d 	movw	r1, #349	; 0x15d
 800a820:	f000 fc70 	bl	800b104 <__assert_func>
 800a824:	f100 0614 	add.w	r6, r0, #20
 800a828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a82c:	4633      	mov	r3, r6
 800a82e:	2200      	movs	r2, #0
 800a830:	4543      	cmp	r3, r8
 800a832:	d31e      	bcc.n	800a872 <__multiply+0x92>
 800a834:	f105 0c14 	add.w	ip, r5, #20
 800a838:	f104 0314 	add.w	r3, r4, #20
 800a83c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a844:	9202      	str	r2, [sp, #8]
 800a846:	ebac 0205 	sub.w	r2, ip, r5
 800a84a:	3a15      	subs	r2, #21
 800a84c:	f022 0203 	bic.w	r2, r2, #3
 800a850:	3204      	adds	r2, #4
 800a852:	f105 0115 	add.w	r1, r5, #21
 800a856:	458c      	cmp	ip, r1
 800a858:	bf38      	it	cc
 800a85a:	2204      	movcc	r2, #4
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9a02      	ldr	r2, [sp, #8]
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d808      	bhi.n	800a878 <__multiply+0x98>
 800a866:	2f00      	cmp	r7, #0
 800a868:	dc55      	bgt.n	800a916 <__multiply+0x136>
 800a86a:	6107      	str	r7, [r0, #16]
 800a86c:	b005      	add	sp, #20
 800a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a872:	f843 2b04 	str.w	r2, [r3], #4
 800a876:	e7db      	b.n	800a830 <__multiply+0x50>
 800a878:	f8b3 a000 	ldrh.w	sl, [r3]
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	d020      	beq.n	800a8c4 <__multiply+0xe4>
 800a882:	f105 0e14 	add.w	lr, r5, #20
 800a886:	46b1      	mov	r9, r6
 800a888:	2200      	movs	r2, #0
 800a88a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a88e:	f8d9 b000 	ldr.w	fp, [r9]
 800a892:	b2a1      	uxth	r1, r4
 800a894:	fa1f fb8b 	uxth.w	fp, fp
 800a898:	fb0a b101 	mla	r1, sl, r1, fp
 800a89c:	4411      	add	r1, r2
 800a89e:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a2:	0c24      	lsrs	r4, r4, #16
 800a8a4:	0c12      	lsrs	r2, r2, #16
 800a8a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a8aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a8ae:	b289      	uxth	r1, r1
 800a8b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8b4:	45f4      	cmp	ip, lr
 800a8b6:	f849 1b04 	str.w	r1, [r9], #4
 800a8ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a8be:	d8e4      	bhi.n	800a88a <__multiply+0xaa>
 800a8c0:	9901      	ldr	r1, [sp, #4]
 800a8c2:	5072      	str	r2, [r6, r1]
 800a8c4:	9a03      	ldr	r2, [sp, #12]
 800a8c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	d01f      	beq.n	800a912 <__multiply+0x132>
 800a8d2:	6834      	ldr	r4, [r6, #0]
 800a8d4:	f105 0114 	add.w	r1, r5, #20
 800a8d8:	46b6      	mov	lr, r6
 800a8da:	f04f 0a00 	mov.w	sl, #0
 800a8de:	880a      	ldrh	r2, [r1, #0]
 800a8e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a8e4:	fb09 b202 	mla	r2, r9, r2, fp
 800a8e8:	4492      	add	sl, r2
 800a8ea:	b2a4      	uxth	r4, r4
 800a8ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a8f0:	f84e 4b04 	str.w	r4, [lr], #4
 800a8f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a8f8:	f8be 2000 	ldrh.w	r2, [lr]
 800a8fc:	0c24      	lsrs	r4, r4, #16
 800a8fe:	fb09 2404 	mla	r4, r9, r4, r2
 800a902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a906:	458c      	cmp	ip, r1
 800a908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a90c:	d8e7      	bhi.n	800a8de <__multiply+0xfe>
 800a90e:	9a01      	ldr	r2, [sp, #4]
 800a910:	50b4      	str	r4, [r6, r2]
 800a912:	3604      	adds	r6, #4
 800a914:	e7a3      	b.n	800a85e <__multiply+0x7e>
 800a916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1a5      	bne.n	800a86a <__multiply+0x8a>
 800a91e:	3f01      	subs	r7, #1
 800a920:	e7a1      	b.n	800a866 <__multiply+0x86>
 800a922:	bf00      	nop
 800a924:	0800bdf7 	.word	0x0800bdf7
 800a928:	0800be08 	.word	0x0800be08

0800a92c <__pow5mult>:
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4615      	mov	r5, r2
 800a932:	f012 0203 	ands.w	r2, r2, #3
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	d007      	beq.n	800a94c <__pow5mult+0x20>
 800a93c:	4c25      	ldr	r4, [pc, #148]	; (800a9d4 <__pow5mult+0xa8>)
 800a93e:	3a01      	subs	r2, #1
 800a940:	2300      	movs	r3, #0
 800a942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a946:	f7ff fe9b 	bl	800a680 <__multadd>
 800a94a:	4607      	mov	r7, r0
 800a94c:	10ad      	asrs	r5, r5, #2
 800a94e:	d03d      	beq.n	800a9cc <__pow5mult+0xa0>
 800a950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a952:	b97c      	cbnz	r4, 800a974 <__pow5mult+0x48>
 800a954:	2010      	movs	r0, #16
 800a956:	f7ff fe1b 	bl	800a590 <malloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	6270      	str	r0, [r6, #36]	; 0x24
 800a95e:	b928      	cbnz	r0, 800a96c <__pow5mult+0x40>
 800a960:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <__pow5mult+0xac>)
 800a962:	481e      	ldr	r0, [pc, #120]	; (800a9dc <__pow5mult+0xb0>)
 800a964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a968:	f000 fbcc 	bl	800b104 <__assert_func>
 800a96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a970:	6004      	str	r4, [r0, #0]
 800a972:	60c4      	str	r4, [r0, #12]
 800a974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a97c:	b94c      	cbnz	r4, 800a992 <__pow5mult+0x66>
 800a97e:	f240 2171 	movw	r1, #625	; 0x271
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ff16 	bl	800a7b4 <__i2b>
 800a988:	2300      	movs	r3, #0
 800a98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a98e:	4604      	mov	r4, r0
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	f04f 0900 	mov.w	r9, #0
 800a996:	07eb      	lsls	r3, r5, #31
 800a998:	d50a      	bpl.n	800a9b0 <__pow5mult+0x84>
 800a99a:	4639      	mov	r1, r7
 800a99c:	4622      	mov	r2, r4
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ff1e 	bl	800a7e0 <__multiply>
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff fe47 	bl	800a63c <_Bfree>
 800a9ae:	4647      	mov	r7, r8
 800a9b0:	106d      	asrs	r5, r5, #1
 800a9b2:	d00b      	beq.n	800a9cc <__pow5mult+0xa0>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	b938      	cbnz	r0, 800a9c8 <__pow5mult+0x9c>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7ff ff0f 	bl	800a7e0 <__multiply>
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	f8c0 9000 	str.w	r9, [r0]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	e7e4      	b.n	800a996 <__pow5mult+0x6a>
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800bf58 	.word	0x0800bf58
 800a9d8:	0800bd81 	.word	0x0800bd81
 800a9dc:	0800be08 	.word	0x0800be08

0800a9e0 <__lshift>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	6849      	ldr	r1, [r1, #4]
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	4691      	mov	r9, r2
 800a9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9f8:	f108 0601 	add.w	r6, r8, #1
 800a9fc:	42b3      	cmp	r3, r6
 800a9fe:	db0b      	blt.n	800aa18 <__lshift+0x38>
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff fddb 	bl	800a5bc <_Balloc>
 800aa06:	4605      	mov	r5, r0
 800aa08:	b948      	cbnz	r0, 800aa1e <__lshift+0x3e>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	4b28      	ldr	r3, [pc, #160]	; (800aab0 <__lshift+0xd0>)
 800aa0e:	4829      	ldr	r0, [pc, #164]	; (800aab4 <__lshift+0xd4>)
 800aa10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa14:	f000 fb76 	bl	800b104 <__assert_func>
 800aa18:	3101      	adds	r1, #1
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	e7ee      	b.n	800a9fc <__lshift+0x1c>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f100 0114 	add.w	r1, r0, #20
 800aa24:	f100 0210 	add.w	r2, r0, #16
 800aa28:	4618      	mov	r0, r3
 800aa2a:	4553      	cmp	r3, sl
 800aa2c:	db33      	blt.n	800aa96 <__lshift+0xb6>
 800aa2e:	6920      	ldr	r0, [r4, #16]
 800aa30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa34:	f104 0314 	add.w	r3, r4, #20
 800aa38:	f019 091f 	ands.w	r9, r9, #31
 800aa3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa44:	d02b      	beq.n	800aa9e <__lshift+0xbe>
 800aa46:	f1c9 0e20 	rsb	lr, r9, #32
 800aa4a:	468a      	mov	sl, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	fa00 f009 	lsl.w	r0, r0, r9
 800aa54:	4302      	orrs	r2, r0
 800aa56:	f84a 2b04 	str.w	r2, [sl], #4
 800aa5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa5e:	459c      	cmp	ip, r3
 800aa60:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa64:	d8f3      	bhi.n	800aa4e <__lshift+0x6e>
 800aa66:	ebac 0304 	sub.w	r3, ip, r4
 800aa6a:	3b15      	subs	r3, #21
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	3304      	adds	r3, #4
 800aa72:	f104 0015 	add.w	r0, r4, #21
 800aa76:	4584      	cmp	ip, r0
 800aa78:	bf38      	it	cc
 800aa7a:	2304      	movcc	r3, #4
 800aa7c:	50ca      	str	r2, [r1, r3]
 800aa7e:	b10a      	cbz	r2, 800aa84 <__lshift+0xa4>
 800aa80:	f108 0602 	add.w	r6, r8, #2
 800aa84:	3e01      	subs	r6, #1
 800aa86:	4638      	mov	r0, r7
 800aa88:	612e      	str	r6, [r5, #16]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f7ff fdd6 	bl	800a63c <_Bfree>
 800aa90:	4628      	mov	r0, r5
 800aa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa96:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	e7c5      	b.n	800aa2a <__lshift+0x4a>
 800aa9e:	3904      	subs	r1, #4
 800aaa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaa8:	459c      	cmp	ip, r3
 800aaaa:	d8f9      	bhi.n	800aaa0 <__lshift+0xc0>
 800aaac:	e7ea      	b.n	800aa84 <__lshift+0xa4>
 800aaae:	bf00      	nop
 800aab0:	0800bdf7 	.word	0x0800bdf7
 800aab4:	0800be08 	.word	0x0800be08

0800aab8 <__mcmp>:
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	6902      	ldr	r2, [r0, #16]
 800aabc:	690c      	ldr	r4, [r1, #16]
 800aabe:	1b12      	subs	r2, r2, r4
 800aac0:	d10e      	bne.n	800aae0 <__mcmp+0x28>
 800aac2:	f100 0314 	add.w	r3, r0, #20
 800aac6:	3114      	adds	r1, #20
 800aac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aacc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aad8:	42a5      	cmp	r5, r4
 800aada:	d003      	beq.n	800aae4 <__mcmp+0x2c>
 800aadc:	d305      	bcc.n	800aaea <__mcmp+0x32>
 800aade:	2201      	movs	r2, #1
 800aae0:	4610      	mov	r0, r2
 800aae2:	bd30      	pop	{r4, r5, pc}
 800aae4:	4283      	cmp	r3, r0
 800aae6:	d3f3      	bcc.n	800aad0 <__mcmp+0x18>
 800aae8:	e7fa      	b.n	800aae0 <__mcmp+0x28>
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaee:	e7f7      	b.n	800aae0 <__mcmp+0x28>

0800aaf0 <__mdiff>:
 800aaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	4611      	mov	r1, r2
 800aafa:	4620      	mov	r0, r4
 800aafc:	4617      	mov	r7, r2
 800aafe:	f7ff ffdb 	bl	800aab8 <__mcmp>
 800ab02:	1e05      	subs	r5, r0, #0
 800ab04:	d110      	bne.n	800ab28 <__mdiff+0x38>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff fd57 	bl	800a5bc <_Balloc>
 800ab0e:	b930      	cbnz	r0, 800ab1e <__mdiff+0x2e>
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <__mdiff+0x108>)
 800ab12:	4602      	mov	r2, r0
 800ab14:	f240 2132 	movw	r1, #562	; 0x232
 800ab18:	4838      	ldr	r0, [pc, #224]	; (800abfc <__mdiff+0x10c>)
 800ab1a:	f000 faf3 	bl	800b104 <__assert_func>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab28:	bfa4      	itt	ge
 800ab2a:	463b      	movge	r3, r7
 800ab2c:	4627      	movge	r7, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	bfa6      	itte	ge
 800ab34:	461c      	movge	r4, r3
 800ab36:	2500      	movge	r5, #0
 800ab38:	2501      	movlt	r5, #1
 800ab3a:	f7ff fd3f 	bl	800a5bc <_Balloc>
 800ab3e:	b920      	cbnz	r0, 800ab4a <__mdiff+0x5a>
 800ab40:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <__mdiff+0x108>)
 800ab42:	4602      	mov	r2, r0
 800ab44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab48:	e7e6      	b.n	800ab18 <__mdiff+0x28>
 800ab4a:	693e      	ldr	r6, [r7, #16]
 800ab4c:	60c5      	str	r5, [r0, #12]
 800ab4e:	6925      	ldr	r5, [r4, #16]
 800ab50:	f107 0114 	add.w	r1, r7, #20
 800ab54:	f104 0914 	add.w	r9, r4, #20
 800ab58:	f100 0e14 	add.w	lr, r0, #20
 800ab5c:	f107 0210 	add.w	r2, r7, #16
 800ab60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ab64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ab68:	46f2      	mov	sl, lr
 800ab6a:	2700      	movs	r7, #0
 800ab6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab74:	fa1f f883 	uxth.w	r8, r3
 800ab78:	fa17 f78b 	uxtah	r7, r7, fp
 800ab7c:	0c1b      	lsrs	r3, r3, #16
 800ab7e:	eba7 0808 	sub.w	r8, r7, r8
 800ab82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab8a:	fa1f f888 	uxth.w	r8, r8
 800ab8e:	141f      	asrs	r7, r3, #16
 800ab90:	454d      	cmp	r5, r9
 800ab92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab96:	f84a 3b04 	str.w	r3, [sl], #4
 800ab9a:	d8e7      	bhi.n	800ab6c <__mdiff+0x7c>
 800ab9c:	1b2b      	subs	r3, r5, r4
 800ab9e:	3b15      	subs	r3, #21
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	3304      	adds	r3, #4
 800aba6:	3415      	adds	r4, #21
 800aba8:	42a5      	cmp	r5, r4
 800abaa:	bf38      	it	cc
 800abac:	2304      	movcc	r3, #4
 800abae:	4419      	add	r1, r3
 800abb0:	4473      	add	r3, lr
 800abb2:	469e      	mov	lr, r3
 800abb4:	460d      	mov	r5, r1
 800abb6:	4565      	cmp	r5, ip
 800abb8:	d30e      	bcc.n	800abd8 <__mdiff+0xe8>
 800abba:	f10c 0203 	add.w	r2, ip, #3
 800abbe:	1a52      	subs	r2, r2, r1
 800abc0:	f022 0203 	bic.w	r2, r2, #3
 800abc4:	3903      	subs	r1, #3
 800abc6:	458c      	cmp	ip, r1
 800abc8:	bf38      	it	cc
 800abca:	2200      	movcc	r2, #0
 800abcc:	441a      	add	r2, r3
 800abce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abd2:	b17b      	cbz	r3, 800abf4 <__mdiff+0x104>
 800abd4:	6106      	str	r6, [r0, #16]
 800abd6:	e7a5      	b.n	800ab24 <__mdiff+0x34>
 800abd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800abdc:	fa17 f488 	uxtah	r4, r7, r8
 800abe0:	1422      	asrs	r2, r4, #16
 800abe2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800abe6:	b2a4      	uxth	r4, r4
 800abe8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800abec:	f84e 4b04 	str.w	r4, [lr], #4
 800abf0:	1417      	asrs	r7, r2, #16
 800abf2:	e7e0      	b.n	800abb6 <__mdiff+0xc6>
 800abf4:	3e01      	subs	r6, #1
 800abf6:	e7ea      	b.n	800abce <__mdiff+0xde>
 800abf8:	0800bdf7 	.word	0x0800bdf7
 800abfc:	0800be08 	.word	0x0800be08

0800ac00 <__d2b>:
 800ac00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	4689      	mov	r9, r1
 800ac06:	2101      	movs	r1, #1
 800ac08:	ec57 6b10 	vmov	r6, r7, d0
 800ac0c:	4690      	mov	r8, r2
 800ac0e:	f7ff fcd5 	bl	800a5bc <_Balloc>
 800ac12:	4604      	mov	r4, r0
 800ac14:	b930      	cbnz	r0, 800ac24 <__d2b+0x24>
 800ac16:	4602      	mov	r2, r0
 800ac18:	4b25      	ldr	r3, [pc, #148]	; (800acb0 <__d2b+0xb0>)
 800ac1a:	4826      	ldr	r0, [pc, #152]	; (800acb4 <__d2b+0xb4>)
 800ac1c:	f240 310a 	movw	r1, #778	; 0x30a
 800ac20:	f000 fa70 	bl	800b104 <__assert_func>
 800ac24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac2c:	bb35      	cbnz	r5, 800ac7c <__d2b+0x7c>
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	d028      	beq.n	800ac86 <__d2b+0x86>
 800ac34:	4668      	mov	r0, sp
 800ac36:	9600      	str	r6, [sp, #0]
 800ac38:	f7ff fd8c 	bl	800a754 <__lo0bits>
 800ac3c:	9900      	ldr	r1, [sp, #0]
 800ac3e:	b300      	cbz	r0, 800ac82 <__d2b+0x82>
 800ac40:	9a01      	ldr	r2, [sp, #4]
 800ac42:	f1c0 0320 	rsb	r3, r0, #32
 800ac46:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	40c2      	lsrs	r2, r0
 800ac4e:	6163      	str	r3, [r4, #20]
 800ac50:	9201      	str	r2, [sp, #4]
 800ac52:	9b01      	ldr	r3, [sp, #4]
 800ac54:	61a3      	str	r3, [r4, #24]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2202      	movne	r2, #2
 800ac5c:	2201      	moveq	r2, #1
 800ac5e:	6122      	str	r2, [r4, #16]
 800ac60:	b1d5      	cbz	r5, 800ac98 <__d2b+0x98>
 800ac62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac66:	4405      	add	r5, r0
 800ac68:	f8c9 5000 	str.w	r5, [r9]
 800ac6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac70:	f8c8 0000 	str.w	r0, [r8]
 800ac74:	4620      	mov	r0, r4
 800ac76:	b003      	add	sp, #12
 800ac78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac80:	e7d5      	b.n	800ac2e <__d2b+0x2e>
 800ac82:	6161      	str	r1, [r4, #20]
 800ac84:	e7e5      	b.n	800ac52 <__d2b+0x52>
 800ac86:	a801      	add	r0, sp, #4
 800ac88:	f7ff fd64 	bl	800a754 <__lo0bits>
 800ac8c:	9b01      	ldr	r3, [sp, #4]
 800ac8e:	6163      	str	r3, [r4, #20]
 800ac90:	2201      	movs	r2, #1
 800ac92:	6122      	str	r2, [r4, #16]
 800ac94:	3020      	adds	r0, #32
 800ac96:	e7e3      	b.n	800ac60 <__d2b+0x60>
 800ac98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aca0:	f8c9 0000 	str.w	r0, [r9]
 800aca4:	6918      	ldr	r0, [r3, #16]
 800aca6:	f7ff fd35 	bl	800a714 <__hi0bits>
 800acaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acae:	e7df      	b.n	800ac70 <__d2b+0x70>
 800acb0:	0800bdf7 	.word	0x0800bdf7
 800acb4:	0800be08 	.word	0x0800be08

0800acb8 <_calloc_r>:
 800acb8:	b513      	push	{r0, r1, r4, lr}
 800acba:	434a      	muls	r2, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	9201      	str	r2, [sp, #4]
 800acc0:	f000 f85a 	bl	800ad78 <_malloc_r>
 800acc4:	4604      	mov	r4, r0
 800acc6:	b118      	cbz	r0, 800acd0 <_calloc_r+0x18>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	2100      	movs	r1, #0
 800accc:	f7fe f93c 	bl	8008f48 <memset>
 800acd0:	4620      	mov	r0, r4
 800acd2:	b002      	add	sp, #8
 800acd4:	bd10      	pop	{r4, pc}
	...

0800acd8 <_free_r>:
 800acd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acda:	2900      	cmp	r1, #0
 800acdc:	d048      	beq.n	800ad70 <_free_r+0x98>
 800acde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace2:	9001      	str	r0, [sp, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f1a1 0404 	sub.w	r4, r1, #4
 800acea:	bfb8      	it	lt
 800acec:	18e4      	addlt	r4, r4, r3
 800acee:	f000 fa65 	bl	800b1bc <__malloc_lock>
 800acf2:	4a20      	ldr	r2, [pc, #128]	; (800ad74 <_free_r+0x9c>)
 800acf4:	9801      	ldr	r0, [sp, #4]
 800acf6:	6813      	ldr	r3, [r2, #0]
 800acf8:	4615      	mov	r5, r2
 800acfa:	b933      	cbnz	r3, 800ad0a <_free_r+0x32>
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	6014      	str	r4, [r2, #0]
 800ad00:	b003      	add	sp, #12
 800ad02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad06:	f000 ba5f 	b.w	800b1c8 <__malloc_unlock>
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	d90b      	bls.n	800ad26 <_free_r+0x4e>
 800ad0e:	6821      	ldr	r1, [r4, #0]
 800ad10:	1862      	adds	r2, r4, r1
 800ad12:	4293      	cmp	r3, r2
 800ad14:	bf04      	itt	eq
 800ad16:	681a      	ldreq	r2, [r3, #0]
 800ad18:	685b      	ldreq	r3, [r3, #4]
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	bf04      	itt	eq
 800ad1e:	1852      	addeq	r2, r2, r1
 800ad20:	6022      	streq	r2, [r4, #0]
 800ad22:	602c      	str	r4, [r5, #0]
 800ad24:	e7ec      	b.n	800ad00 <_free_r+0x28>
 800ad26:	461a      	mov	r2, r3
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b10b      	cbz	r3, 800ad30 <_free_r+0x58>
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	d9fa      	bls.n	800ad26 <_free_r+0x4e>
 800ad30:	6811      	ldr	r1, [r2, #0]
 800ad32:	1855      	adds	r5, r2, r1
 800ad34:	42a5      	cmp	r5, r4
 800ad36:	d10b      	bne.n	800ad50 <_free_r+0x78>
 800ad38:	6824      	ldr	r4, [r4, #0]
 800ad3a:	4421      	add	r1, r4
 800ad3c:	1854      	adds	r4, r2, r1
 800ad3e:	42a3      	cmp	r3, r4
 800ad40:	6011      	str	r1, [r2, #0]
 800ad42:	d1dd      	bne.n	800ad00 <_free_r+0x28>
 800ad44:	681c      	ldr	r4, [r3, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	6053      	str	r3, [r2, #4]
 800ad4a:	4421      	add	r1, r4
 800ad4c:	6011      	str	r1, [r2, #0]
 800ad4e:	e7d7      	b.n	800ad00 <_free_r+0x28>
 800ad50:	d902      	bls.n	800ad58 <_free_r+0x80>
 800ad52:	230c      	movs	r3, #12
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	e7d3      	b.n	800ad00 <_free_r+0x28>
 800ad58:	6825      	ldr	r5, [r4, #0]
 800ad5a:	1961      	adds	r1, r4, r5
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	bf04      	itt	eq
 800ad60:	6819      	ldreq	r1, [r3, #0]
 800ad62:	685b      	ldreq	r3, [r3, #4]
 800ad64:	6063      	str	r3, [r4, #4]
 800ad66:	bf04      	itt	eq
 800ad68:	1949      	addeq	r1, r1, r5
 800ad6a:	6021      	streq	r1, [r4, #0]
 800ad6c:	6054      	str	r4, [r2, #4]
 800ad6e:	e7c7      	b.n	800ad00 <_free_r+0x28>
 800ad70:	b003      	add	sp, #12
 800ad72:	bd30      	pop	{r4, r5, pc}
 800ad74:	200005a4 	.word	0x200005a4

0800ad78 <_malloc_r>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	1ccd      	adds	r5, r1, #3
 800ad7c:	f025 0503 	bic.w	r5, r5, #3
 800ad80:	3508      	adds	r5, #8
 800ad82:	2d0c      	cmp	r5, #12
 800ad84:	bf38      	it	cc
 800ad86:	250c      	movcc	r5, #12
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	db01      	blt.n	800ad92 <_malloc_r+0x1a>
 800ad8e:	42a9      	cmp	r1, r5
 800ad90:	d903      	bls.n	800ad9a <_malloc_r+0x22>
 800ad92:	230c      	movs	r3, #12
 800ad94:	6033      	str	r3, [r6, #0]
 800ad96:	2000      	movs	r0, #0
 800ad98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9a:	f000 fa0f 	bl	800b1bc <__malloc_lock>
 800ad9e:	4921      	ldr	r1, [pc, #132]	; (800ae24 <_malloc_r+0xac>)
 800ada0:	680a      	ldr	r2, [r1, #0]
 800ada2:	4614      	mov	r4, r2
 800ada4:	b99c      	cbnz	r4, 800adce <_malloc_r+0x56>
 800ada6:	4f20      	ldr	r7, [pc, #128]	; (800ae28 <_malloc_r+0xb0>)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	b923      	cbnz	r3, 800adb6 <_malloc_r+0x3e>
 800adac:	4621      	mov	r1, r4
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f998 	bl	800b0e4 <_sbrk_r>
 800adb4:	6038      	str	r0, [r7, #0]
 800adb6:	4629      	mov	r1, r5
 800adb8:	4630      	mov	r0, r6
 800adba:	f000 f993 	bl	800b0e4 <_sbrk_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d123      	bne.n	800ae0a <_malloc_r+0x92>
 800adc2:	230c      	movs	r3, #12
 800adc4:	6033      	str	r3, [r6, #0]
 800adc6:	4630      	mov	r0, r6
 800adc8:	f000 f9fe 	bl	800b1c8 <__malloc_unlock>
 800adcc:	e7e3      	b.n	800ad96 <_malloc_r+0x1e>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	1b5b      	subs	r3, r3, r5
 800add2:	d417      	bmi.n	800ae04 <_malloc_r+0x8c>
 800add4:	2b0b      	cmp	r3, #11
 800add6:	d903      	bls.n	800ade0 <_malloc_r+0x68>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	441c      	add	r4, r3
 800addc:	6025      	str	r5, [r4, #0]
 800adde:	e004      	b.n	800adea <_malloc_r+0x72>
 800ade0:	6863      	ldr	r3, [r4, #4]
 800ade2:	42a2      	cmp	r2, r4
 800ade4:	bf0c      	ite	eq
 800ade6:	600b      	streq	r3, [r1, #0]
 800ade8:	6053      	strne	r3, [r2, #4]
 800adea:	4630      	mov	r0, r6
 800adec:	f000 f9ec 	bl	800b1c8 <__malloc_unlock>
 800adf0:	f104 000b 	add.w	r0, r4, #11
 800adf4:	1d23      	adds	r3, r4, #4
 800adf6:	f020 0007 	bic.w	r0, r0, #7
 800adfa:	1ac2      	subs	r2, r0, r3
 800adfc:	d0cc      	beq.n	800ad98 <_malloc_r+0x20>
 800adfe:	1a1b      	subs	r3, r3, r0
 800ae00:	50a3      	str	r3, [r4, r2]
 800ae02:	e7c9      	b.n	800ad98 <_malloc_r+0x20>
 800ae04:	4622      	mov	r2, r4
 800ae06:	6864      	ldr	r4, [r4, #4]
 800ae08:	e7cc      	b.n	800ada4 <_malloc_r+0x2c>
 800ae0a:	1cc4      	adds	r4, r0, #3
 800ae0c:	f024 0403 	bic.w	r4, r4, #3
 800ae10:	42a0      	cmp	r0, r4
 800ae12:	d0e3      	beq.n	800addc <_malloc_r+0x64>
 800ae14:	1a21      	subs	r1, r4, r0
 800ae16:	4630      	mov	r0, r6
 800ae18:	f000 f964 	bl	800b0e4 <_sbrk_r>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d1dd      	bne.n	800addc <_malloc_r+0x64>
 800ae20:	e7cf      	b.n	800adc2 <_malloc_r+0x4a>
 800ae22:	bf00      	nop
 800ae24:	200005a4 	.word	0x200005a4
 800ae28:	200005a8 	.word	0x200005a8

0800ae2c <__ssputs_r>:
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	688e      	ldr	r6, [r1, #8]
 800ae32:	429e      	cmp	r6, r3
 800ae34:	4682      	mov	sl, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	4690      	mov	r8, r2
 800ae3a:	461f      	mov	r7, r3
 800ae3c:	d838      	bhi.n	800aeb0 <__ssputs_r+0x84>
 800ae3e:	898a      	ldrh	r2, [r1, #12]
 800ae40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae44:	d032      	beq.n	800aeac <__ssputs_r+0x80>
 800ae46:	6825      	ldr	r5, [r4, #0]
 800ae48:	6909      	ldr	r1, [r1, #16]
 800ae4a:	eba5 0901 	sub.w	r9, r5, r1
 800ae4e:	6965      	ldr	r5, [r4, #20]
 800ae50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae58:	3301      	adds	r3, #1
 800ae5a:	444b      	add	r3, r9
 800ae5c:	106d      	asrs	r5, r5, #1
 800ae5e:	429d      	cmp	r5, r3
 800ae60:	bf38      	it	cc
 800ae62:	461d      	movcc	r5, r3
 800ae64:	0553      	lsls	r3, r2, #21
 800ae66:	d531      	bpl.n	800aecc <__ssputs_r+0xa0>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7ff ff85 	bl	800ad78 <_malloc_r>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	b950      	cbnz	r0, 800ae88 <__ssputs_r+0x5c>
 800ae72:	230c      	movs	r3, #12
 800ae74:	f8ca 3000 	str.w	r3, [sl]
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae88:	6921      	ldr	r1, [r4, #16]
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	f7ff fb88 	bl	800a5a0 <memcpy>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	6126      	str	r6, [r4, #16]
 800ae9e:	6165      	str	r5, [r4, #20]
 800aea0:	444e      	add	r6, r9
 800aea2:	eba5 0509 	sub.w	r5, r5, r9
 800aea6:	6026      	str	r6, [r4, #0]
 800aea8:	60a5      	str	r5, [r4, #8]
 800aeaa:	463e      	mov	r6, r7
 800aeac:	42be      	cmp	r6, r7
 800aeae:	d900      	bls.n	800aeb2 <__ssputs_r+0x86>
 800aeb0:	463e      	mov	r6, r7
 800aeb2:	4632      	mov	r2, r6
 800aeb4:	6820      	ldr	r0, [r4, #0]
 800aeb6:	4641      	mov	r1, r8
 800aeb8:	f000 f966 	bl	800b188 <memmove>
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	1b9b      	subs	r3, r3, r6
 800aec2:	4432      	add	r2, r6
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	6022      	str	r2, [r4, #0]
 800aec8:	2000      	movs	r0, #0
 800aeca:	e7db      	b.n	800ae84 <__ssputs_r+0x58>
 800aecc:	462a      	mov	r2, r5
 800aece:	f000 f981 	bl	800b1d4 <_realloc_r>
 800aed2:	4606      	mov	r6, r0
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1e1      	bne.n	800ae9c <__ssputs_r+0x70>
 800aed8:	6921      	ldr	r1, [r4, #16]
 800aeda:	4650      	mov	r0, sl
 800aedc:	f7ff fefc 	bl	800acd8 <_free_r>
 800aee0:	e7c7      	b.n	800ae72 <__ssputs_r+0x46>
	...

0800aee4 <_svfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4698      	mov	r8, r3
 800aeea:	898b      	ldrh	r3, [r1, #12]
 800aeec:	061b      	lsls	r3, r3, #24
 800aeee:	b09d      	sub	sp, #116	; 0x74
 800aef0:	4607      	mov	r7, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	d50e      	bpl.n	800af16 <_svfiprintf_r+0x32>
 800aef8:	690b      	ldr	r3, [r1, #16]
 800aefa:	b963      	cbnz	r3, 800af16 <_svfiprintf_r+0x32>
 800aefc:	2140      	movs	r1, #64	; 0x40
 800aefe:	f7ff ff3b 	bl	800ad78 <_malloc_r>
 800af02:	6028      	str	r0, [r5, #0]
 800af04:	6128      	str	r0, [r5, #16]
 800af06:	b920      	cbnz	r0, 800af12 <_svfiprintf_r+0x2e>
 800af08:	230c      	movs	r3, #12
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af10:	e0d1      	b.n	800b0b6 <_svfiprintf_r+0x1d2>
 800af12:	2340      	movs	r3, #64	; 0x40
 800af14:	616b      	str	r3, [r5, #20]
 800af16:	2300      	movs	r3, #0
 800af18:	9309      	str	r3, [sp, #36]	; 0x24
 800af1a:	2320      	movs	r3, #32
 800af1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af20:	f8cd 800c 	str.w	r8, [sp, #12]
 800af24:	2330      	movs	r3, #48	; 0x30
 800af26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0d0 <_svfiprintf_r+0x1ec>
 800af2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af2e:	f04f 0901 	mov.w	r9, #1
 800af32:	4623      	mov	r3, r4
 800af34:	469a      	mov	sl, r3
 800af36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3a:	b10a      	cbz	r2, 800af40 <_svfiprintf_r+0x5c>
 800af3c:	2a25      	cmp	r2, #37	; 0x25
 800af3e:	d1f9      	bne.n	800af34 <_svfiprintf_r+0x50>
 800af40:	ebba 0b04 	subs.w	fp, sl, r4
 800af44:	d00b      	beq.n	800af5e <_svfiprintf_r+0x7a>
 800af46:	465b      	mov	r3, fp
 800af48:	4622      	mov	r2, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7ff ff6d 	bl	800ae2c <__ssputs_r>
 800af52:	3001      	adds	r0, #1
 800af54:	f000 80aa 	beq.w	800b0ac <_svfiprintf_r+0x1c8>
 800af58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af5a:	445a      	add	r2, fp
 800af5c:	9209      	str	r2, [sp, #36]	; 0x24
 800af5e:	f89a 3000 	ldrb.w	r3, [sl]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80a2 	beq.w	800b0ac <_svfiprintf_r+0x1c8>
 800af68:	2300      	movs	r3, #0
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af72:	f10a 0a01 	add.w	sl, sl, #1
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	9307      	str	r3, [sp, #28]
 800af7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af7e:	931a      	str	r3, [sp, #104]	; 0x68
 800af80:	4654      	mov	r4, sl
 800af82:	2205      	movs	r2, #5
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	4851      	ldr	r0, [pc, #324]	; (800b0d0 <_svfiprintf_r+0x1ec>)
 800af8a:	f7f5 f949 	bl	8000220 <memchr>
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	b9d8      	cbnz	r0, 800afca <_svfiprintf_r+0xe6>
 800af92:	06d0      	lsls	r0, r2, #27
 800af94:	bf44      	itt	mi
 800af96:	2320      	movmi	r3, #32
 800af98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af9c:	0711      	lsls	r1, r2, #28
 800af9e:	bf44      	itt	mi
 800afa0:	232b      	movmi	r3, #43	; 0x2b
 800afa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afa6:	f89a 3000 	ldrb.w	r3, [sl]
 800afaa:	2b2a      	cmp	r3, #42	; 0x2a
 800afac:	d015      	beq.n	800afda <_svfiprintf_r+0xf6>
 800afae:	9a07      	ldr	r2, [sp, #28]
 800afb0:	4654      	mov	r4, sl
 800afb2:	2000      	movs	r0, #0
 800afb4:	f04f 0c0a 	mov.w	ip, #10
 800afb8:	4621      	mov	r1, r4
 800afba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afbe:	3b30      	subs	r3, #48	; 0x30
 800afc0:	2b09      	cmp	r3, #9
 800afc2:	d94e      	bls.n	800b062 <_svfiprintf_r+0x17e>
 800afc4:	b1b0      	cbz	r0, 800aff4 <_svfiprintf_r+0x110>
 800afc6:	9207      	str	r2, [sp, #28]
 800afc8:	e014      	b.n	800aff4 <_svfiprintf_r+0x110>
 800afca:	eba0 0308 	sub.w	r3, r0, r8
 800afce:	fa09 f303 	lsl.w	r3, r9, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	46a2      	mov	sl, r4
 800afd8:	e7d2      	b.n	800af80 <_svfiprintf_r+0x9c>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	1d19      	adds	r1, r3, #4
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	9103      	str	r1, [sp, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfbb      	ittet	lt
 800afe6:	425b      	neglt	r3, r3
 800afe8:	f042 0202 	orrlt.w	r2, r2, #2
 800afec:	9307      	strge	r3, [sp, #28]
 800afee:	9307      	strlt	r3, [sp, #28]
 800aff0:	bfb8      	it	lt
 800aff2:	9204      	strlt	r2, [sp, #16]
 800aff4:	7823      	ldrb	r3, [r4, #0]
 800aff6:	2b2e      	cmp	r3, #46	; 0x2e
 800aff8:	d10c      	bne.n	800b014 <_svfiprintf_r+0x130>
 800affa:	7863      	ldrb	r3, [r4, #1]
 800affc:	2b2a      	cmp	r3, #42	; 0x2a
 800affe:	d135      	bne.n	800b06c <_svfiprintf_r+0x188>
 800b000:	9b03      	ldr	r3, [sp, #12]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	9203      	str	r2, [sp, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bfb8      	it	lt
 800b00c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b010:	3402      	adds	r4, #2
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0e0 <_svfiprintf_r+0x1fc>
 800b018:	7821      	ldrb	r1, [r4, #0]
 800b01a:	2203      	movs	r2, #3
 800b01c:	4650      	mov	r0, sl
 800b01e:	f7f5 f8ff 	bl	8000220 <memchr>
 800b022:	b140      	cbz	r0, 800b036 <_svfiprintf_r+0x152>
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	eba0 000a 	sub.w	r0, r0, sl
 800b02a:	fa03 f000 	lsl.w	r0, r3, r0
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	4303      	orrs	r3, r0
 800b032:	3401      	adds	r4, #1
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	4826      	ldr	r0, [pc, #152]	; (800b0d4 <_svfiprintf_r+0x1f0>)
 800b03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b040:	2206      	movs	r2, #6
 800b042:	f7f5 f8ed 	bl	8000220 <memchr>
 800b046:	2800      	cmp	r0, #0
 800b048:	d038      	beq.n	800b0bc <_svfiprintf_r+0x1d8>
 800b04a:	4b23      	ldr	r3, [pc, #140]	; (800b0d8 <_svfiprintf_r+0x1f4>)
 800b04c:	bb1b      	cbnz	r3, 800b096 <_svfiprintf_r+0x1b2>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	f023 0307 	bic.w	r3, r3, #7
 800b056:	3308      	adds	r3, #8
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05c:	4433      	add	r3, r6
 800b05e:	9309      	str	r3, [sp, #36]	; 0x24
 800b060:	e767      	b.n	800af32 <_svfiprintf_r+0x4e>
 800b062:	fb0c 3202 	mla	r2, ip, r2, r3
 800b066:	460c      	mov	r4, r1
 800b068:	2001      	movs	r0, #1
 800b06a:	e7a5      	b.n	800afb8 <_svfiprintf_r+0xd4>
 800b06c:	2300      	movs	r3, #0
 800b06e:	3401      	adds	r4, #1
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	4619      	mov	r1, r3
 800b074:	f04f 0c0a 	mov.w	ip, #10
 800b078:	4620      	mov	r0, r4
 800b07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d903      	bls.n	800b08c <_svfiprintf_r+0x1a8>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0c5      	beq.n	800b014 <_svfiprintf_r+0x130>
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	e7c3      	b.n	800b014 <_svfiprintf_r+0x130>
 800b08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b090:	4604      	mov	r4, r0
 800b092:	2301      	movs	r3, #1
 800b094:	e7f0      	b.n	800b078 <_svfiprintf_r+0x194>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	462a      	mov	r2, r5
 800b09c:	4b0f      	ldr	r3, [pc, #60]	; (800b0dc <_svfiprintf_r+0x1f8>)
 800b09e:	a904      	add	r1, sp, #16
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f7fd fff9 	bl	8009098 <_printf_float>
 800b0a6:	1c42      	adds	r2, r0, #1
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	d1d6      	bne.n	800b05a <_svfiprintf_r+0x176>
 800b0ac:	89ab      	ldrh	r3, [r5, #12]
 800b0ae:	065b      	lsls	r3, r3, #25
 800b0b0:	f53f af2c 	bmi.w	800af0c <_svfiprintf_r+0x28>
 800b0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b6:	b01d      	add	sp, #116	; 0x74
 800b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	ab03      	add	r3, sp, #12
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <_svfiprintf_r+0x1f8>)
 800b0c4:	a904      	add	r1, sp, #16
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	f7fe fa8a 	bl	80095e0 <_printf_i>
 800b0cc:	e7eb      	b.n	800b0a6 <_svfiprintf_r+0x1c2>
 800b0ce:	bf00      	nop
 800b0d0:	0800bf64 	.word	0x0800bf64
 800b0d4:	0800bf6e 	.word	0x0800bf6e
 800b0d8:	08009099 	.word	0x08009099
 800b0dc:	0800ae2d 	.word	0x0800ae2d
 800b0e0:	0800bf6a 	.word	0x0800bf6a

0800b0e4 <_sbrk_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d06      	ldr	r5, [pc, #24]	; (800b100 <_sbrk_r+0x1c>)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	f7f6 fb3a 	bl	8001768 <_sbrk>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d102      	bne.n	800b0fe <_sbrk_r+0x1a>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	b103      	cbz	r3, 800b0fe <_sbrk_r+0x1a>
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	bd38      	pop	{r3, r4, r5, pc}
 800b100:	20001ef0 	.word	0x20001ef0

0800b104 <__assert_func>:
 800b104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b106:	4614      	mov	r4, r2
 800b108:	461a      	mov	r2, r3
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <__assert_func+0x2c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4605      	mov	r5, r0
 800b110:	68d8      	ldr	r0, [r3, #12]
 800b112:	b14c      	cbz	r4, 800b128 <__assert_func+0x24>
 800b114:	4b07      	ldr	r3, [pc, #28]	; (800b134 <__assert_func+0x30>)
 800b116:	9100      	str	r1, [sp, #0]
 800b118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b11c:	4906      	ldr	r1, [pc, #24]	; (800b138 <__assert_func+0x34>)
 800b11e:	462b      	mov	r3, r5
 800b120:	f000 f80e 	bl	800b140 <fiprintf>
 800b124:	f000 faa4 	bl	800b670 <abort>
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <__assert_func+0x38>)
 800b12a:	461c      	mov	r4, r3
 800b12c:	e7f3      	b.n	800b116 <__assert_func+0x12>
 800b12e:	bf00      	nop
 800b130:	20000190 	.word	0x20000190
 800b134:	0800bf75 	.word	0x0800bf75
 800b138:	0800bf82 	.word	0x0800bf82
 800b13c:	0800bfb0 	.word	0x0800bfb0

0800b140 <fiprintf>:
 800b140:	b40e      	push	{r1, r2, r3}
 800b142:	b503      	push	{r0, r1, lr}
 800b144:	4601      	mov	r1, r0
 800b146:	ab03      	add	r3, sp, #12
 800b148:	4805      	ldr	r0, [pc, #20]	; (800b160 <fiprintf+0x20>)
 800b14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14e:	6800      	ldr	r0, [r0, #0]
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	f000 f88f 	bl	800b274 <_vfiprintf_r>
 800b156:	b002      	add	sp, #8
 800b158:	f85d eb04 	ldr.w	lr, [sp], #4
 800b15c:	b003      	add	sp, #12
 800b15e:	4770      	bx	lr
 800b160:	20000190 	.word	0x20000190

0800b164 <__ascii_mbtowc>:
 800b164:	b082      	sub	sp, #8
 800b166:	b901      	cbnz	r1, 800b16a <__ascii_mbtowc+0x6>
 800b168:	a901      	add	r1, sp, #4
 800b16a:	b142      	cbz	r2, 800b17e <__ascii_mbtowc+0x1a>
 800b16c:	b14b      	cbz	r3, 800b182 <__ascii_mbtowc+0x1e>
 800b16e:	7813      	ldrb	r3, [r2, #0]
 800b170:	600b      	str	r3, [r1, #0]
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	1e10      	subs	r0, r2, #0
 800b176:	bf18      	it	ne
 800b178:	2001      	movne	r0, #1
 800b17a:	b002      	add	sp, #8
 800b17c:	4770      	bx	lr
 800b17e:	4610      	mov	r0, r2
 800b180:	e7fb      	b.n	800b17a <__ascii_mbtowc+0x16>
 800b182:	f06f 0001 	mvn.w	r0, #1
 800b186:	e7f8      	b.n	800b17a <__ascii_mbtowc+0x16>

0800b188 <memmove>:
 800b188:	4288      	cmp	r0, r1
 800b18a:	b510      	push	{r4, lr}
 800b18c:	eb01 0402 	add.w	r4, r1, r2
 800b190:	d902      	bls.n	800b198 <memmove+0x10>
 800b192:	4284      	cmp	r4, r0
 800b194:	4623      	mov	r3, r4
 800b196:	d807      	bhi.n	800b1a8 <memmove+0x20>
 800b198:	1e43      	subs	r3, r0, #1
 800b19a:	42a1      	cmp	r1, r4
 800b19c:	d008      	beq.n	800b1b0 <memmove+0x28>
 800b19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1a6:	e7f8      	b.n	800b19a <memmove+0x12>
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	428a      	cmp	r2, r1
 800b1ae:	d100      	bne.n	800b1b2 <memmove+0x2a>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ba:	e7f7      	b.n	800b1ac <memmove+0x24>

0800b1bc <__malloc_lock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__malloc_lock+0x8>)
 800b1be:	f000 bc17 	b.w	800b9f0 <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20001ef8 	.word	0x20001ef8

0800b1c8 <__malloc_unlock>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__malloc_unlock+0x8>)
 800b1ca:	f000 bc12 	b.w	800b9f2 <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	20001ef8 	.word	0x20001ef8

0800b1d4 <_realloc_r>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	4614      	mov	r4, r2
 800b1da:	460e      	mov	r6, r1
 800b1dc:	b921      	cbnz	r1, 800b1e8 <_realloc_r+0x14>
 800b1de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	f7ff bdc8 	b.w	800ad78 <_malloc_r>
 800b1e8:	b922      	cbnz	r2, 800b1f4 <_realloc_r+0x20>
 800b1ea:	f7ff fd75 	bl	800acd8 <_free_r>
 800b1ee:	4625      	mov	r5, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1f4:	f000 fc62 	bl	800babc <_malloc_usable_size_r>
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d20f      	bcs.n	800b21c <_realloc_r+0x48>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	4638      	mov	r0, r7
 800b200:	f7ff fdba 	bl	800ad78 <_malloc_r>
 800b204:	4605      	mov	r5, r0
 800b206:	2800      	cmp	r0, #0
 800b208:	d0f2      	beq.n	800b1f0 <_realloc_r+0x1c>
 800b20a:	4631      	mov	r1, r6
 800b20c:	4622      	mov	r2, r4
 800b20e:	f7ff f9c7 	bl	800a5a0 <memcpy>
 800b212:	4631      	mov	r1, r6
 800b214:	4638      	mov	r0, r7
 800b216:	f7ff fd5f 	bl	800acd8 <_free_r>
 800b21a:	e7e9      	b.n	800b1f0 <_realloc_r+0x1c>
 800b21c:	4635      	mov	r5, r6
 800b21e:	e7e7      	b.n	800b1f0 <_realloc_r+0x1c>

0800b220 <__sfputc_r>:
 800b220:	6893      	ldr	r3, [r2, #8]
 800b222:	3b01      	subs	r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	b410      	push	{r4}
 800b228:	6093      	str	r3, [r2, #8]
 800b22a:	da08      	bge.n	800b23e <__sfputc_r+0x1e>
 800b22c:	6994      	ldr	r4, [r2, #24]
 800b22e:	42a3      	cmp	r3, r4
 800b230:	db01      	blt.n	800b236 <__sfputc_r+0x16>
 800b232:	290a      	cmp	r1, #10
 800b234:	d103      	bne.n	800b23e <__sfputc_r+0x1e>
 800b236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23a:	f000 b94b 	b.w	800b4d4 <__swbuf_r>
 800b23e:	6813      	ldr	r3, [r2, #0]
 800b240:	1c58      	adds	r0, r3, #1
 800b242:	6010      	str	r0, [r2, #0]
 800b244:	7019      	strb	r1, [r3, #0]
 800b246:	4608      	mov	r0, r1
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <__sfputs_r>:
 800b24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	4614      	mov	r4, r2
 800b256:	18d5      	adds	r5, r2, r3
 800b258:	42ac      	cmp	r4, r5
 800b25a:	d101      	bne.n	800b260 <__sfputs_r+0x12>
 800b25c:	2000      	movs	r0, #0
 800b25e:	e007      	b.n	800b270 <__sfputs_r+0x22>
 800b260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b264:	463a      	mov	r2, r7
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ffda 	bl	800b220 <__sfputc_r>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d1f3      	bne.n	800b258 <__sfputs_r+0xa>
 800b270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b274 <_vfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	460d      	mov	r5, r1
 800b27a:	b09d      	sub	sp, #116	; 0x74
 800b27c:	4614      	mov	r4, r2
 800b27e:	4698      	mov	r8, r3
 800b280:	4606      	mov	r6, r0
 800b282:	b118      	cbz	r0, 800b28c <_vfiprintf_r+0x18>
 800b284:	6983      	ldr	r3, [r0, #24]
 800b286:	b90b      	cbnz	r3, 800b28c <_vfiprintf_r+0x18>
 800b288:	f000 fb14 	bl	800b8b4 <__sinit>
 800b28c:	4b89      	ldr	r3, [pc, #548]	; (800b4b4 <_vfiprintf_r+0x240>)
 800b28e:	429d      	cmp	r5, r3
 800b290:	d11b      	bne.n	800b2ca <_vfiprintf_r+0x56>
 800b292:	6875      	ldr	r5, [r6, #4]
 800b294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b296:	07d9      	lsls	r1, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_vfiprintf_r+0x32>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	059a      	lsls	r2, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_vfiprintf_r+0x32>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a2:	f000 fba5 	bl	800b9f0 <__retarget_lock_acquire_recursive>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	071b      	lsls	r3, r3, #28
 800b2aa:	d501      	bpl.n	800b2b0 <_vfiprintf_r+0x3c>
 800b2ac:	692b      	ldr	r3, [r5, #16]
 800b2ae:	b9eb      	cbnz	r3, 800b2ec <_vfiprintf_r+0x78>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f000 f96e 	bl	800b594 <__swsetup_r>
 800b2b8:	b1c0      	cbz	r0, 800b2ec <_vfiprintf_r+0x78>
 800b2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2bc:	07dc      	lsls	r4, r3, #31
 800b2be:	d50e      	bpl.n	800b2de <_vfiprintf_r+0x6a>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c4:	b01d      	add	sp, #116	; 0x74
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	4b7b      	ldr	r3, [pc, #492]	; (800b4b8 <_vfiprintf_r+0x244>)
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	d101      	bne.n	800b2d4 <_vfiprintf_r+0x60>
 800b2d0:	68b5      	ldr	r5, [r6, #8]
 800b2d2:	e7df      	b.n	800b294 <_vfiprintf_r+0x20>
 800b2d4:	4b79      	ldr	r3, [pc, #484]	; (800b4bc <_vfiprintf_r+0x248>)
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	bf08      	it	eq
 800b2da:	68f5      	ldreq	r5, [r6, #12]
 800b2dc:	e7da      	b.n	800b294 <_vfiprintf_r+0x20>
 800b2de:	89ab      	ldrh	r3, [r5, #12]
 800b2e0:	0598      	lsls	r0, r3, #22
 800b2e2:	d4ed      	bmi.n	800b2c0 <_vfiprintf_r+0x4c>
 800b2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2e6:	f000 fb84 	bl	800b9f2 <__retarget_lock_release_recursive>
 800b2ea:	e7e9      	b.n	800b2c0 <_vfiprintf_r+0x4c>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2fa:	2330      	movs	r3, #48	; 0x30
 800b2fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4c0 <_vfiprintf_r+0x24c>
 800b300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b304:	f04f 0901 	mov.w	r9, #1
 800b308:	4623      	mov	r3, r4
 800b30a:	469a      	mov	sl, r3
 800b30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b310:	b10a      	cbz	r2, 800b316 <_vfiprintf_r+0xa2>
 800b312:	2a25      	cmp	r2, #37	; 0x25
 800b314:	d1f9      	bne.n	800b30a <_vfiprintf_r+0x96>
 800b316:	ebba 0b04 	subs.w	fp, sl, r4
 800b31a:	d00b      	beq.n	800b334 <_vfiprintf_r+0xc0>
 800b31c:	465b      	mov	r3, fp
 800b31e:	4622      	mov	r2, r4
 800b320:	4629      	mov	r1, r5
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff ff93 	bl	800b24e <__sfputs_r>
 800b328:	3001      	adds	r0, #1
 800b32a:	f000 80aa 	beq.w	800b482 <_vfiprintf_r+0x20e>
 800b32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b330:	445a      	add	r2, fp
 800b332:	9209      	str	r2, [sp, #36]	; 0x24
 800b334:	f89a 3000 	ldrb.w	r3, [sl]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 80a2 	beq.w	800b482 <_vfiprintf_r+0x20e>
 800b33e:	2300      	movs	r3, #0
 800b340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b348:	f10a 0a01 	add.w	sl, sl, #1
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	9307      	str	r3, [sp, #28]
 800b350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b354:	931a      	str	r3, [sp, #104]	; 0x68
 800b356:	4654      	mov	r4, sl
 800b358:	2205      	movs	r2, #5
 800b35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35e:	4858      	ldr	r0, [pc, #352]	; (800b4c0 <_vfiprintf_r+0x24c>)
 800b360:	f7f4 ff5e 	bl	8000220 <memchr>
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	b9d8      	cbnz	r0, 800b3a0 <_vfiprintf_r+0x12c>
 800b368:	06d1      	lsls	r1, r2, #27
 800b36a:	bf44      	itt	mi
 800b36c:	2320      	movmi	r3, #32
 800b36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b372:	0713      	lsls	r3, r2, #28
 800b374:	bf44      	itt	mi
 800b376:	232b      	movmi	r3, #43	; 0x2b
 800b378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b37c:	f89a 3000 	ldrb.w	r3, [sl]
 800b380:	2b2a      	cmp	r3, #42	; 0x2a
 800b382:	d015      	beq.n	800b3b0 <_vfiprintf_r+0x13c>
 800b384:	9a07      	ldr	r2, [sp, #28]
 800b386:	4654      	mov	r4, sl
 800b388:	2000      	movs	r0, #0
 800b38a:	f04f 0c0a 	mov.w	ip, #10
 800b38e:	4621      	mov	r1, r4
 800b390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b394:	3b30      	subs	r3, #48	; 0x30
 800b396:	2b09      	cmp	r3, #9
 800b398:	d94e      	bls.n	800b438 <_vfiprintf_r+0x1c4>
 800b39a:	b1b0      	cbz	r0, 800b3ca <_vfiprintf_r+0x156>
 800b39c:	9207      	str	r2, [sp, #28]
 800b39e:	e014      	b.n	800b3ca <_vfiprintf_r+0x156>
 800b3a0:	eba0 0308 	sub.w	r3, r0, r8
 800b3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	46a2      	mov	sl, r4
 800b3ae:	e7d2      	b.n	800b356 <_vfiprintf_r+0xe2>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	1d19      	adds	r1, r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	9103      	str	r1, [sp, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bfbb      	ittet	lt
 800b3bc:	425b      	neglt	r3, r3
 800b3be:	f042 0202 	orrlt.w	r2, r2, #2
 800b3c2:	9307      	strge	r3, [sp, #28]
 800b3c4:	9307      	strlt	r3, [sp, #28]
 800b3c6:	bfb8      	it	lt
 800b3c8:	9204      	strlt	r2, [sp, #16]
 800b3ca:	7823      	ldrb	r3, [r4, #0]
 800b3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ce:	d10c      	bne.n	800b3ea <_vfiprintf_r+0x176>
 800b3d0:	7863      	ldrb	r3, [r4, #1]
 800b3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d4:	d135      	bne.n	800b442 <_vfiprintf_r+0x1ce>
 800b3d6:	9b03      	ldr	r3, [sp, #12]
 800b3d8:	1d1a      	adds	r2, r3, #4
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	9203      	str	r2, [sp, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfb8      	it	lt
 800b3e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3e6:	3402      	adds	r4, #2
 800b3e8:	9305      	str	r3, [sp, #20]
 800b3ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4d0 <_vfiprintf_r+0x25c>
 800b3ee:	7821      	ldrb	r1, [r4, #0]
 800b3f0:	2203      	movs	r2, #3
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	f7f4 ff14 	bl	8000220 <memchr>
 800b3f8:	b140      	cbz	r0, 800b40c <_vfiprintf_r+0x198>
 800b3fa:	2340      	movs	r3, #64	; 0x40
 800b3fc:	eba0 000a 	sub.w	r0, r0, sl
 800b400:	fa03 f000 	lsl.w	r0, r3, r0
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	4303      	orrs	r3, r0
 800b408:	3401      	adds	r4, #1
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b410:	482c      	ldr	r0, [pc, #176]	; (800b4c4 <_vfiprintf_r+0x250>)
 800b412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b416:	2206      	movs	r2, #6
 800b418:	f7f4 ff02 	bl	8000220 <memchr>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d03f      	beq.n	800b4a0 <_vfiprintf_r+0x22c>
 800b420:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <_vfiprintf_r+0x254>)
 800b422:	bb1b      	cbnz	r3, 800b46c <_vfiprintf_r+0x1f8>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	3307      	adds	r3, #7
 800b428:	f023 0307 	bic.w	r3, r3, #7
 800b42c:	3308      	adds	r3, #8
 800b42e:	9303      	str	r3, [sp, #12]
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	443b      	add	r3, r7
 800b434:	9309      	str	r3, [sp, #36]	; 0x24
 800b436:	e767      	b.n	800b308 <_vfiprintf_r+0x94>
 800b438:	fb0c 3202 	mla	r2, ip, r2, r3
 800b43c:	460c      	mov	r4, r1
 800b43e:	2001      	movs	r0, #1
 800b440:	e7a5      	b.n	800b38e <_vfiprintf_r+0x11a>
 800b442:	2300      	movs	r3, #0
 800b444:	3401      	adds	r4, #1
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	4619      	mov	r1, r3
 800b44a:	f04f 0c0a 	mov.w	ip, #10
 800b44e:	4620      	mov	r0, r4
 800b450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b454:	3a30      	subs	r2, #48	; 0x30
 800b456:	2a09      	cmp	r2, #9
 800b458:	d903      	bls.n	800b462 <_vfiprintf_r+0x1ee>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0c5      	beq.n	800b3ea <_vfiprintf_r+0x176>
 800b45e:	9105      	str	r1, [sp, #20]
 800b460:	e7c3      	b.n	800b3ea <_vfiprintf_r+0x176>
 800b462:	fb0c 2101 	mla	r1, ip, r1, r2
 800b466:	4604      	mov	r4, r0
 800b468:	2301      	movs	r3, #1
 800b46a:	e7f0      	b.n	800b44e <_vfiprintf_r+0x1da>
 800b46c:	ab03      	add	r3, sp, #12
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	462a      	mov	r2, r5
 800b472:	4b16      	ldr	r3, [pc, #88]	; (800b4cc <_vfiprintf_r+0x258>)
 800b474:	a904      	add	r1, sp, #16
 800b476:	4630      	mov	r0, r6
 800b478:	f7fd fe0e 	bl	8009098 <_printf_float>
 800b47c:	4607      	mov	r7, r0
 800b47e:	1c78      	adds	r0, r7, #1
 800b480:	d1d6      	bne.n	800b430 <_vfiprintf_r+0x1bc>
 800b482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b484:	07d9      	lsls	r1, r3, #31
 800b486:	d405      	bmi.n	800b494 <_vfiprintf_r+0x220>
 800b488:	89ab      	ldrh	r3, [r5, #12]
 800b48a:	059a      	lsls	r2, r3, #22
 800b48c:	d402      	bmi.n	800b494 <_vfiprintf_r+0x220>
 800b48e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b490:	f000 faaf 	bl	800b9f2 <__retarget_lock_release_recursive>
 800b494:	89ab      	ldrh	r3, [r5, #12]
 800b496:	065b      	lsls	r3, r3, #25
 800b498:	f53f af12 	bmi.w	800b2c0 <_vfiprintf_r+0x4c>
 800b49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b49e:	e711      	b.n	800b2c4 <_vfiprintf_r+0x50>
 800b4a0:	ab03      	add	r3, sp, #12
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <_vfiprintf_r+0x258>)
 800b4a8:	a904      	add	r1, sp, #16
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7fe f898 	bl	80095e0 <_printf_i>
 800b4b0:	e7e4      	b.n	800b47c <_vfiprintf_r+0x208>
 800b4b2:	bf00      	nop
 800b4b4:	0800c0dc 	.word	0x0800c0dc
 800b4b8:	0800c0fc 	.word	0x0800c0fc
 800b4bc:	0800c0bc 	.word	0x0800c0bc
 800b4c0:	0800bf64 	.word	0x0800bf64
 800b4c4:	0800bf6e 	.word	0x0800bf6e
 800b4c8:	08009099 	.word	0x08009099
 800b4cc:	0800b24f 	.word	0x0800b24f
 800b4d0:	0800bf6a 	.word	0x0800bf6a

0800b4d4 <__swbuf_r>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	460e      	mov	r6, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	4605      	mov	r5, r0
 800b4dc:	b118      	cbz	r0, 800b4e6 <__swbuf_r+0x12>
 800b4de:	6983      	ldr	r3, [r0, #24]
 800b4e0:	b90b      	cbnz	r3, 800b4e6 <__swbuf_r+0x12>
 800b4e2:	f000 f9e7 	bl	800b8b4 <__sinit>
 800b4e6:	4b21      	ldr	r3, [pc, #132]	; (800b56c <__swbuf_r+0x98>)
 800b4e8:	429c      	cmp	r4, r3
 800b4ea:	d12b      	bne.n	800b544 <__swbuf_r+0x70>
 800b4ec:	686c      	ldr	r4, [r5, #4]
 800b4ee:	69a3      	ldr	r3, [r4, #24]
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	071a      	lsls	r2, r3, #28
 800b4f6:	d52f      	bpl.n	800b558 <__swbuf_r+0x84>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	b36b      	cbz	r3, 800b558 <__swbuf_r+0x84>
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	6820      	ldr	r0, [r4, #0]
 800b500:	1ac0      	subs	r0, r0, r3
 800b502:	6963      	ldr	r3, [r4, #20]
 800b504:	b2f6      	uxtb	r6, r6
 800b506:	4283      	cmp	r3, r0
 800b508:	4637      	mov	r7, r6
 800b50a:	dc04      	bgt.n	800b516 <__swbuf_r+0x42>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 f93c 	bl	800b78c <_fflush_r>
 800b514:	bb30      	cbnz	r0, 800b564 <__swbuf_r+0x90>
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	3b01      	subs	r3, #1
 800b51a:	60a3      	str	r3, [r4, #8]
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	6022      	str	r2, [r4, #0]
 800b522:	701e      	strb	r6, [r3, #0]
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	3001      	adds	r0, #1
 800b528:	4283      	cmp	r3, r0
 800b52a:	d004      	beq.n	800b536 <__swbuf_r+0x62>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	07db      	lsls	r3, r3, #31
 800b530:	d506      	bpl.n	800b540 <__swbuf_r+0x6c>
 800b532:	2e0a      	cmp	r6, #10
 800b534:	d104      	bne.n	800b540 <__swbuf_r+0x6c>
 800b536:	4621      	mov	r1, r4
 800b538:	4628      	mov	r0, r5
 800b53a:	f000 f927 	bl	800b78c <_fflush_r>
 800b53e:	b988      	cbnz	r0, 800b564 <__swbuf_r+0x90>
 800b540:	4638      	mov	r0, r7
 800b542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b544:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <__swbuf_r+0x9c>)
 800b546:	429c      	cmp	r4, r3
 800b548:	d101      	bne.n	800b54e <__swbuf_r+0x7a>
 800b54a:	68ac      	ldr	r4, [r5, #8]
 800b54c:	e7cf      	b.n	800b4ee <__swbuf_r+0x1a>
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <__swbuf_r+0xa0>)
 800b550:	429c      	cmp	r4, r3
 800b552:	bf08      	it	eq
 800b554:	68ec      	ldreq	r4, [r5, #12]
 800b556:	e7ca      	b.n	800b4ee <__swbuf_r+0x1a>
 800b558:	4621      	mov	r1, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	f000 f81a 	bl	800b594 <__swsetup_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	d0cb      	beq.n	800b4fc <__swbuf_r+0x28>
 800b564:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b568:	e7ea      	b.n	800b540 <__swbuf_r+0x6c>
 800b56a:	bf00      	nop
 800b56c:	0800c0dc 	.word	0x0800c0dc
 800b570:	0800c0fc 	.word	0x0800c0fc
 800b574:	0800c0bc 	.word	0x0800c0bc

0800b578 <__ascii_wctomb>:
 800b578:	b149      	cbz	r1, 800b58e <__ascii_wctomb+0x16>
 800b57a:	2aff      	cmp	r2, #255	; 0xff
 800b57c:	bf85      	ittet	hi
 800b57e:	238a      	movhi	r3, #138	; 0x8a
 800b580:	6003      	strhi	r3, [r0, #0]
 800b582:	700a      	strbls	r2, [r1, #0]
 800b584:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b588:	bf98      	it	ls
 800b58a:	2001      	movls	r0, #1
 800b58c:	4770      	bx	lr
 800b58e:	4608      	mov	r0, r1
 800b590:	4770      	bx	lr
	...

0800b594 <__swsetup_r>:
 800b594:	4b32      	ldr	r3, [pc, #200]	; (800b660 <__swsetup_r+0xcc>)
 800b596:	b570      	push	{r4, r5, r6, lr}
 800b598:	681d      	ldr	r5, [r3, #0]
 800b59a:	4606      	mov	r6, r0
 800b59c:	460c      	mov	r4, r1
 800b59e:	b125      	cbz	r5, 800b5aa <__swsetup_r+0x16>
 800b5a0:	69ab      	ldr	r3, [r5, #24]
 800b5a2:	b913      	cbnz	r3, 800b5aa <__swsetup_r+0x16>
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f000 f985 	bl	800b8b4 <__sinit>
 800b5aa:	4b2e      	ldr	r3, [pc, #184]	; (800b664 <__swsetup_r+0xd0>)
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	d10f      	bne.n	800b5d0 <__swsetup_r+0x3c>
 800b5b0:	686c      	ldr	r4, [r5, #4]
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b8:	0719      	lsls	r1, r3, #28
 800b5ba:	d42c      	bmi.n	800b616 <__swsetup_r+0x82>
 800b5bc:	06dd      	lsls	r5, r3, #27
 800b5be:	d411      	bmi.n	800b5e4 <__swsetup_r+0x50>
 800b5c0:	2309      	movs	r3, #9
 800b5c2:	6033      	str	r3, [r6, #0]
 800b5c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ce:	e03e      	b.n	800b64e <__swsetup_r+0xba>
 800b5d0:	4b25      	ldr	r3, [pc, #148]	; (800b668 <__swsetup_r+0xd4>)
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	d101      	bne.n	800b5da <__swsetup_r+0x46>
 800b5d6:	68ac      	ldr	r4, [r5, #8]
 800b5d8:	e7eb      	b.n	800b5b2 <__swsetup_r+0x1e>
 800b5da:	4b24      	ldr	r3, [pc, #144]	; (800b66c <__swsetup_r+0xd8>)
 800b5dc:	429c      	cmp	r4, r3
 800b5de:	bf08      	it	eq
 800b5e0:	68ec      	ldreq	r4, [r5, #12]
 800b5e2:	e7e6      	b.n	800b5b2 <__swsetup_r+0x1e>
 800b5e4:	0758      	lsls	r0, r3, #29
 800b5e6:	d512      	bpl.n	800b60e <__swsetup_r+0x7a>
 800b5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ea:	b141      	cbz	r1, 800b5fe <__swsetup_r+0x6a>
 800b5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5f0:	4299      	cmp	r1, r3
 800b5f2:	d002      	beq.n	800b5fa <__swsetup_r+0x66>
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff fb6f 	bl	800acd8 <_free_r>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	2300      	movs	r3, #0
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	f043 0308 	orr.w	r3, r3, #8
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	b94b      	cbnz	r3, 800b62e <__swsetup_r+0x9a>
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b624:	d003      	beq.n	800b62e <__swsetup_r+0x9a>
 800b626:	4621      	mov	r1, r4
 800b628:	4630      	mov	r0, r6
 800b62a:	f000 fa07 	bl	800ba3c <__smakebuf_r>
 800b62e:	89a0      	ldrh	r0, [r4, #12]
 800b630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b634:	f010 0301 	ands.w	r3, r0, #1
 800b638:	d00a      	beq.n	800b650 <__swsetup_r+0xbc>
 800b63a:	2300      	movs	r3, #0
 800b63c:	60a3      	str	r3, [r4, #8]
 800b63e:	6963      	ldr	r3, [r4, #20]
 800b640:	425b      	negs	r3, r3
 800b642:	61a3      	str	r3, [r4, #24]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	b943      	cbnz	r3, 800b65a <__swsetup_r+0xc6>
 800b648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b64c:	d1ba      	bne.n	800b5c4 <__swsetup_r+0x30>
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	0781      	lsls	r1, r0, #30
 800b652:	bf58      	it	pl
 800b654:	6963      	ldrpl	r3, [r4, #20]
 800b656:	60a3      	str	r3, [r4, #8]
 800b658:	e7f4      	b.n	800b644 <__swsetup_r+0xb0>
 800b65a:	2000      	movs	r0, #0
 800b65c:	e7f7      	b.n	800b64e <__swsetup_r+0xba>
 800b65e:	bf00      	nop
 800b660:	20000190 	.word	0x20000190
 800b664:	0800c0dc 	.word	0x0800c0dc
 800b668:	0800c0fc 	.word	0x0800c0fc
 800b66c:	0800c0bc 	.word	0x0800c0bc

0800b670 <abort>:
 800b670:	b508      	push	{r3, lr}
 800b672:	2006      	movs	r0, #6
 800b674:	f000 fa52 	bl	800bb1c <raise>
 800b678:	2001      	movs	r0, #1
 800b67a:	f7f5 fffd 	bl	8001678 <_exit>
	...

0800b680 <__sflush_r>:
 800b680:	898a      	ldrh	r2, [r1, #12]
 800b682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b686:	4605      	mov	r5, r0
 800b688:	0710      	lsls	r0, r2, #28
 800b68a:	460c      	mov	r4, r1
 800b68c:	d458      	bmi.n	800b740 <__sflush_r+0xc0>
 800b68e:	684b      	ldr	r3, [r1, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	dc05      	bgt.n	800b6a0 <__sflush_r+0x20>
 800b694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b696:	2b00      	cmp	r3, #0
 800b698:	dc02      	bgt.n	800b6a0 <__sflush_r+0x20>
 800b69a:	2000      	movs	r0, #0
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6a2:	2e00      	cmp	r6, #0
 800b6a4:	d0f9      	beq.n	800b69a <__sflush_r+0x1a>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6ac:	682f      	ldr	r7, [r5, #0]
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	d032      	beq.n	800b718 <__sflush_r+0x98>
 800b6b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	075a      	lsls	r2, r3, #29
 800b6b8:	d505      	bpl.n	800b6c6 <__sflush_r+0x46>
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	1ac0      	subs	r0, r0, r3
 800b6be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6c0:	b10b      	cbz	r3, 800b6c6 <__sflush_r+0x46>
 800b6c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6c4:	1ac0      	subs	r0, r0, r3
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6cc:	6a21      	ldr	r1, [r4, #32]
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b0      	blx	r6
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	d106      	bne.n	800b6e6 <__sflush_r+0x66>
 800b6d8:	6829      	ldr	r1, [r5, #0]
 800b6da:	291d      	cmp	r1, #29
 800b6dc:	d82c      	bhi.n	800b738 <__sflush_r+0xb8>
 800b6de:	4a2a      	ldr	r2, [pc, #168]	; (800b788 <__sflush_r+0x108>)
 800b6e0:	40ca      	lsrs	r2, r1
 800b6e2:	07d6      	lsls	r6, r2, #31
 800b6e4:	d528      	bpl.n	800b738 <__sflush_r+0xb8>
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	6062      	str	r2, [r4, #4]
 800b6ea:	04d9      	lsls	r1, r3, #19
 800b6ec:	6922      	ldr	r2, [r4, #16]
 800b6ee:	6022      	str	r2, [r4, #0]
 800b6f0:	d504      	bpl.n	800b6fc <__sflush_r+0x7c>
 800b6f2:	1c42      	adds	r2, r0, #1
 800b6f4:	d101      	bne.n	800b6fa <__sflush_r+0x7a>
 800b6f6:	682b      	ldr	r3, [r5, #0]
 800b6f8:	b903      	cbnz	r3, 800b6fc <__sflush_r+0x7c>
 800b6fa:	6560      	str	r0, [r4, #84]	; 0x54
 800b6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6fe:	602f      	str	r7, [r5, #0]
 800b700:	2900      	cmp	r1, #0
 800b702:	d0ca      	beq.n	800b69a <__sflush_r+0x1a>
 800b704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b708:	4299      	cmp	r1, r3
 800b70a:	d002      	beq.n	800b712 <__sflush_r+0x92>
 800b70c:	4628      	mov	r0, r5
 800b70e:	f7ff fae3 	bl	800acd8 <_free_r>
 800b712:	2000      	movs	r0, #0
 800b714:	6360      	str	r0, [r4, #52]	; 0x34
 800b716:	e7c1      	b.n	800b69c <__sflush_r+0x1c>
 800b718:	6a21      	ldr	r1, [r4, #32]
 800b71a:	2301      	movs	r3, #1
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b0      	blx	r6
 800b720:	1c41      	adds	r1, r0, #1
 800b722:	d1c7      	bne.n	800b6b4 <__sflush_r+0x34>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c4      	beq.n	800b6b4 <__sflush_r+0x34>
 800b72a:	2b1d      	cmp	r3, #29
 800b72c:	d001      	beq.n	800b732 <__sflush_r+0xb2>
 800b72e:	2b16      	cmp	r3, #22
 800b730:	d101      	bne.n	800b736 <__sflush_r+0xb6>
 800b732:	602f      	str	r7, [r5, #0]
 800b734:	e7b1      	b.n	800b69a <__sflush_r+0x1a>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	e7ad      	b.n	800b69c <__sflush_r+0x1c>
 800b740:	690f      	ldr	r7, [r1, #16]
 800b742:	2f00      	cmp	r7, #0
 800b744:	d0a9      	beq.n	800b69a <__sflush_r+0x1a>
 800b746:	0793      	lsls	r3, r2, #30
 800b748:	680e      	ldr	r6, [r1, #0]
 800b74a:	bf08      	it	eq
 800b74c:	694b      	ldreq	r3, [r1, #20]
 800b74e:	600f      	str	r7, [r1, #0]
 800b750:	bf18      	it	ne
 800b752:	2300      	movne	r3, #0
 800b754:	eba6 0807 	sub.w	r8, r6, r7
 800b758:	608b      	str	r3, [r1, #8]
 800b75a:	f1b8 0f00 	cmp.w	r8, #0
 800b75e:	dd9c      	ble.n	800b69a <__sflush_r+0x1a>
 800b760:	6a21      	ldr	r1, [r4, #32]
 800b762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b764:	4643      	mov	r3, r8
 800b766:	463a      	mov	r2, r7
 800b768:	4628      	mov	r0, r5
 800b76a:	47b0      	blx	r6
 800b76c:	2800      	cmp	r0, #0
 800b76e:	dc06      	bgt.n	800b77e <__sflush_r+0xfe>
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b77c:	e78e      	b.n	800b69c <__sflush_r+0x1c>
 800b77e:	4407      	add	r7, r0
 800b780:	eba8 0800 	sub.w	r8, r8, r0
 800b784:	e7e9      	b.n	800b75a <__sflush_r+0xda>
 800b786:	bf00      	nop
 800b788:	20400001 	.word	0x20400001

0800b78c <_fflush_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	690b      	ldr	r3, [r1, #16]
 800b790:	4605      	mov	r5, r0
 800b792:	460c      	mov	r4, r1
 800b794:	b913      	cbnz	r3, 800b79c <_fflush_r+0x10>
 800b796:	2500      	movs	r5, #0
 800b798:	4628      	mov	r0, r5
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	b118      	cbz	r0, 800b7a6 <_fflush_r+0x1a>
 800b79e:	6983      	ldr	r3, [r0, #24]
 800b7a0:	b90b      	cbnz	r3, 800b7a6 <_fflush_r+0x1a>
 800b7a2:	f000 f887 	bl	800b8b4 <__sinit>
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <_fflush_r+0x6c>)
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	d11b      	bne.n	800b7e4 <_fflush_r+0x58>
 800b7ac:	686c      	ldr	r4, [r5, #4]
 800b7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0ef      	beq.n	800b796 <_fflush_r+0xa>
 800b7b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7b8:	07d0      	lsls	r0, r2, #31
 800b7ba:	d404      	bmi.n	800b7c6 <_fflush_r+0x3a>
 800b7bc:	0599      	lsls	r1, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_fflush_r+0x3a>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f000 f915 	bl	800b9f0 <__retarget_lock_acquire_recursive>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7ff ff59 	bl	800b680 <__sflush_r>
 800b7ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7d0:	07da      	lsls	r2, r3, #31
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	d4e0      	bmi.n	800b798 <_fflush_r+0xc>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	059b      	lsls	r3, r3, #22
 800b7da:	d4dd      	bmi.n	800b798 <_fflush_r+0xc>
 800b7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7de:	f000 f908 	bl	800b9f2 <__retarget_lock_release_recursive>
 800b7e2:	e7d9      	b.n	800b798 <_fflush_r+0xc>
 800b7e4:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <_fflush_r+0x70>)
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d101      	bne.n	800b7ee <_fflush_r+0x62>
 800b7ea:	68ac      	ldr	r4, [r5, #8]
 800b7ec:	e7df      	b.n	800b7ae <_fflush_r+0x22>
 800b7ee:	4b04      	ldr	r3, [pc, #16]	; (800b800 <_fflush_r+0x74>)
 800b7f0:	429c      	cmp	r4, r3
 800b7f2:	bf08      	it	eq
 800b7f4:	68ec      	ldreq	r4, [r5, #12]
 800b7f6:	e7da      	b.n	800b7ae <_fflush_r+0x22>
 800b7f8:	0800c0dc 	.word	0x0800c0dc
 800b7fc:	0800c0fc 	.word	0x0800c0fc
 800b800:	0800c0bc 	.word	0x0800c0bc

0800b804 <std>:
 800b804:	2300      	movs	r3, #0
 800b806:	b510      	push	{r4, lr}
 800b808:	4604      	mov	r4, r0
 800b80a:	e9c0 3300 	strd	r3, r3, [r0]
 800b80e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b812:	6083      	str	r3, [r0, #8]
 800b814:	8181      	strh	r1, [r0, #12]
 800b816:	6643      	str	r3, [r0, #100]	; 0x64
 800b818:	81c2      	strh	r2, [r0, #14]
 800b81a:	6183      	str	r3, [r0, #24]
 800b81c:	4619      	mov	r1, r3
 800b81e:	2208      	movs	r2, #8
 800b820:	305c      	adds	r0, #92	; 0x5c
 800b822:	f7fd fb91 	bl	8008f48 <memset>
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <std+0x38>)
 800b828:	6263      	str	r3, [r4, #36]	; 0x24
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <std+0x3c>)
 800b82c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <std+0x40>)
 800b830:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b832:	4b05      	ldr	r3, [pc, #20]	; (800b848 <std+0x44>)
 800b834:	6224      	str	r4, [r4, #32]
 800b836:	6323      	str	r3, [r4, #48]	; 0x30
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop
 800b83c:	0800bb55 	.word	0x0800bb55
 800b840:	0800bb77 	.word	0x0800bb77
 800b844:	0800bbaf 	.word	0x0800bbaf
 800b848:	0800bbd3 	.word	0x0800bbd3

0800b84c <_cleanup_r>:
 800b84c:	4901      	ldr	r1, [pc, #4]	; (800b854 <_cleanup_r+0x8>)
 800b84e:	f000 b8af 	b.w	800b9b0 <_fwalk_reent>
 800b852:	bf00      	nop
 800b854:	0800b78d 	.word	0x0800b78d

0800b858 <__sfmoreglue>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	1e4a      	subs	r2, r1, #1
 800b85c:	2568      	movs	r5, #104	; 0x68
 800b85e:	4355      	muls	r5, r2
 800b860:	460e      	mov	r6, r1
 800b862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b866:	f7ff fa87 	bl	800ad78 <_malloc_r>
 800b86a:	4604      	mov	r4, r0
 800b86c:	b140      	cbz	r0, 800b880 <__sfmoreglue+0x28>
 800b86e:	2100      	movs	r1, #0
 800b870:	e9c0 1600 	strd	r1, r6, [r0]
 800b874:	300c      	adds	r0, #12
 800b876:	60a0      	str	r0, [r4, #8]
 800b878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b87c:	f7fd fb64 	bl	8008f48 <memset>
 800b880:	4620      	mov	r0, r4
 800b882:	bd70      	pop	{r4, r5, r6, pc}

0800b884 <__sfp_lock_acquire>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__sfp_lock_acquire+0x8>)
 800b886:	f000 b8b3 	b.w	800b9f0 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	20001efc 	.word	0x20001efc

0800b890 <__sfp_lock_release>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__sfp_lock_release+0x8>)
 800b892:	f000 b8ae 	b.w	800b9f2 <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	20001efc 	.word	0x20001efc

0800b89c <__sinit_lock_acquire>:
 800b89c:	4801      	ldr	r0, [pc, #4]	; (800b8a4 <__sinit_lock_acquire+0x8>)
 800b89e:	f000 b8a7 	b.w	800b9f0 <__retarget_lock_acquire_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	20001ef7 	.word	0x20001ef7

0800b8a8 <__sinit_lock_release>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	; (800b8b0 <__sinit_lock_release+0x8>)
 800b8aa:	f000 b8a2 	b.w	800b9f2 <__retarget_lock_release_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	20001ef7 	.word	0x20001ef7

0800b8b4 <__sinit>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	f7ff fff0 	bl	800b89c <__sinit_lock_acquire>
 800b8bc:	69a3      	ldr	r3, [r4, #24]
 800b8be:	b11b      	cbz	r3, 800b8c8 <__sinit+0x14>
 800b8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c4:	f7ff bff0 	b.w	800b8a8 <__sinit_lock_release>
 800b8c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b8ce:	4b13      	ldr	r3, [pc, #76]	; (800b91c <__sinit+0x68>)
 800b8d0:	4a13      	ldr	r2, [pc, #76]	; (800b920 <__sinit+0x6c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	bf04      	itt	eq
 800b8da:	2301      	moveq	r3, #1
 800b8dc:	61a3      	streq	r3, [r4, #24]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 f820 	bl	800b924 <__sfp>
 800b8e4:	6060      	str	r0, [r4, #4]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 f81c 	bl	800b924 <__sfp>
 800b8ec:	60a0      	str	r0, [r4, #8]
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 f818 	bl	800b924 <__sfp>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	60e0      	str	r0, [r4, #12]
 800b8f8:	2104      	movs	r1, #4
 800b8fa:	6860      	ldr	r0, [r4, #4]
 800b8fc:	f7ff ff82 	bl	800b804 <std>
 800b900:	68a0      	ldr	r0, [r4, #8]
 800b902:	2201      	movs	r2, #1
 800b904:	2109      	movs	r1, #9
 800b906:	f7ff ff7d 	bl	800b804 <std>
 800b90a:	68e0      	ldr	r0, [r4, #12]
 800b90c:	2202      	movs	r2, #2
 800b90e:	2112      	movs	r1, #18
 800b910:	f7ff ff78 	bl	800b804 <std>
 800b914:	2301      	movs	r3, #1
 800b916:	61a3      	str	r3, [r4, #24]
 800b918:	e7d2      	b.n	800b8c0 <__sinit+0xc>
 800b91a:	bf00      	nop
 800b91c:	0800bd3c 	.word	0x0800bd3c
 800b920:	0800b84d 	.word	0x0800b84d

0800b924 <__sfp>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	4607      	mov	r7, r0
 800b928:	f7ff ffac 	bl	800b884 <__sfp_lock_acquire>
 800b92c:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <__sfp+0x84>)
 800b92e:	681e      	ldr	r6, [r3, #0]
 800b930:	69b3      	ldr	r3, [r6, #24]
 800b932:	b913      	cbnz	r3, 800b93a <__sfp+0x16>
 800b934:	4630      	mov	r0, r6
 800b936:	f7ff ffbd 	bl	800b8b4 <__sinit>
 800b93a:	3648      	adds	r6, #72	; 0x48
 800b93c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b940:	3b01      	subs	r3, #1
 800b942:	d503      	bpl.n	800b94c <__sfp+0x28>
 800b944:	6833      	ldr	r3, [r6, #0]
 800b946:	b30b      	cbz	r3, 800b98c <__sfp+0x68>
 800b948:	6836      	ldr	r6, [r6, #0]
 800b94a:	e7f7      	b.n	800b93c <__sfp+0x18>
 800b94c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b950:	b9d5      	cbnz	r5, 800b988 <__sfp+0x64>
 800b952:	4b16      	ldr	r3, [pc, #88]	; (800b9ac <__sfp+0x88>)
 800b954:	60e3      	str	r3, [r4, #12]
 800b956:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b95a:	6665      	str	r5, [r4, #100]	; 0x64
 800b95c:	f000 f847 	bl	800b9ee <__retarget_lock_init_recursive>
 800b960:	f7ff ff96 	bl	800b890 <__sfp_lock_release>
 800b964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b96c:	6025      	str	r5, [r4, #0]
 800b96e:	61a5      	str	r5, [r4, #24]
 800b970:	2208      	movs	r2, #8
 800b972:	4629      	mov	r1, r5
 800b974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b978:	f7fd fae6 	bl	8008f48 <memset>
 800b97c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b984:	4620      	mov	r0, r4
 800b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b988:	3468      	adds	r4, #104	; 0x68
 800b98a:	e7d9      	b.n	800b940 <__sfp+0x1c>
 800b98c:	2104      	movs	r1, #4
 800b98e:	4638      	mov	r0, r7
 800b990:	f7ff ff62 	bl	800b858 <__sfmoreglue>
 800b994:	4604      	mov	r4, r0
 800b996:	6030      	str	r0, [r6, #0]
 800b998:	2800      	cmp	r0, #0
 800b99a:	d1d5      	bne.n	800b948 <__sfp+0x24>
 800b99c:	f7ff ff78 	bl	800b890 <__sfp_lock_release>
 800b9a0:	230c      	movs	r3, #12
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	e7ee      	b.n	800b984 <__sfp+0x60>
 800b9a6:	bf00      	nop
 800b9a8:	0800bd3c 	.word	0x0800bd3c
 800b9ac:	ffff0001 	.word	0xffff0001

0800b9b0 <_fwalk_reent>:
 800b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	4688      	mov	r8, r1
 800b9b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9bc:	2700      	movs	r7, #0
 800b9be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b9c6:	d505      	bpl.n	800b9d4 <_fwalk_reent+0x24>
 800b9c8:	6824      	ldr	r4, [r4, #0]
 800b9ca:	2c00      	cmp	r4, #0
 800b9cc:	d1f7      	bne.n	800b9be <_fwalk_reent+0xe>
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d4:	89ab      	ldrh	r3, [r5, #12]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d907      	bls.n	800b9ea <_fwalk_reent+0x3a>
 800b9da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	d003      	beq.n	800b9ea <_fwalk_reent+0x3a>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	47c0      	blx	r8
 800b9e8:	4307      	orrs	r7, r0
 800b9ea:	3568      	adds	r5, #104	; 0x68
 800b9ec:	e7e9      	b.n	800b9c2 <_fwalk_reent+0x12>

0800b9ee <__retarget_lock_init_recursive>:
 800b9ee:	4770      	bx	lr

0800b9f0 <__retarget_lock_acquire_recursive>:
 800b9f0:	4770      	bx	lr

0800b9f2 <__retarget_lock_release_recursive>:
 800b9f2:	4770      	bx	lr

0800b9f4 <__swhatbuf_r>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	460e      	mov	r6, r1
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	b096      	sub	sp, #88	; 0x58
 800ba00:	4614      	mov	r4, r2
 800ba02:	461d      	mov	r5, r3
 800ba04:	da07      	bge.n	800ba16 <__swhatbuf_r+0x22>
 800ba06:	2300      	movs	r3, #0
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	89b3      	ldrh	r3, [r6, #12]
 800ba0c:	061a      	lsls	r2, r3, #24
 800ba0e:	d410      	bmi.n	800ba32 <__swhatbuf_r+0x3e>
 800ba10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba14:	e00e      	b.n	800ba34 <__swhatbuf_r+0x40>
 800ba16:	466a      	mov	r2, sp
 800ba18:	f000 f902 	bl	800bc20 <_fstat_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	dbf2      	blt.n	800ba06 <__swhatbuf_r+0x12>
 800ba20:	9a01      	ldr	r2, [sp, #4]
 800ba22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba2a:	425a      	negs	r2, r3
 800ba2c:	415a      	adcs	r2, r3
 800ba2e:	602a      	str	r2, [r5, #0]
 800ba30:	e7ee      	b.n	800ba10 <__swhatbuf_r+0x1c>
 800ba32:	2340      	movs	r3, #64	; 0x40
 800ba34:	2000      	movs	r0, #0
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	b016      	add	sp, #88	; 0x58
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}

0800ba3c <__smakebuf_r>:
 800ba3c:	898b      	ldrh	r3, [r1, #12]
 800ba3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba40:	079d      	lsls	r5, r3, #30
 800ba42:	4606      	mov	r6, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	d507      	bpl.n	800ba58 <__smakebuf_r+0x1c>
 800ba48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	2301      	movs	r3, #1
 800ba52:	6163      	str	r3, [r4, #20]
 800ba54:	b002      	add	sp, #8
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	ab01      	add	r3, sp, #4
 800ba5a:	466a      	mov	r2, sp
 800ba5c:	f7ff ffca 	bl	800b9f4 <__swhatbuf_r>
 800ba60:	9900      	ldr	r1, [sp, #0]
 800ba62:	4605      	mov	r5, r0
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff f987 	bl	800ad78 <_malloc_r>
 800ba6a:	b948      	cbnz	r0, 800ba80 <__smakebuf_r+0x44>
 800ba6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d4ef      	bmi.n	800ba54 <__smakebuf_r+0x18>
 800ba74:	f023 0303 	bic.w	r3, r3, #3
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7e3      	b.n	800ba48 <__smakebuf_r+0xc>
 800ba80:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <__smakebuf_r+0x7c>)
 800ba82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	6163      	str	r3, [r4, #20]
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	6120      	str	r0, [r4, #16]
 800ba96:	b15b      	cbz	r3, 800bab0 <__smakebuf_r+0x74>
 800ba98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 f8d1 	bl	800bc44 <_isatty_r>
 800baa2:	b128      	cbz	r0, 800bab0 <__smakebuf_r+0x74>
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f023 0303 	bic.w	r3, r3, #3
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	89a0      	ldrh	r0, [r4, #12]
 800bab2:	4305      	orrs	r5, r0
 800bab4:	81a5      	strh	r5, [r4, #12]
 800bab6:	e7cd      	b.n	800ba54 <__smakebuf_r+0x18>
 800bab8:	0800b84d 	.word	0x0800b84d

0800babc <_malloc_usable_size_r>:
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f18      	subs	r0, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfbc      	itt	lt
 800bac6:	580b      	ldrlt	r3, [r1, r0]
 800bac8:	18c0      	addlt	r0, r0, r3
 800baca:	4770      	bx	lr

0800bacc <_raise_r>:
 800bacc:	291f      	cmp	r1, #31
 800bace:	b538      	push	{r3, r4, r5, lr}
 800bad0:	4604      	mov	r4, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	d904      	bls.n	800bae0 <_raise_r+0x14>
 800bad6:	2316      	movs	r3, #22
 800bad8:	6003      	str	r3, [r0, #0]
 800bada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bae2:	b112      	cbz	r2, 800baea <_raise_r+0x1e>
 800bae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bae8:	b94b      	cbnz	r3, 800bafe <_raise_r+0x32>
 800baea:	4620      	mov	r0, r4
 800baec:	f000 f830 	bl	800bb50 <_getpid_r>
 800baf0:	462a      	mov	r2, r5
 800baf2:	4601      	mov	r1, r0
 800baf4:	4620      	mov	r0, r4
 800baf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bafa:	f000 b817 	b.w	800bb2c <_kill_r>
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d00a      	beq.n	800bb18 <_raise_r+0x4c>
 800bb02:	1c59      	adds	r1, r3, #1
 800bb04:	d103      	bne.n	800bb0e <_raise_r+0x42>
 800bb06:	2316      	movs	r3, #22
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	e7e7      	b.n	800bade <_raise_r+0x12>
 800bb0e:	2400      	movs	r4, #0
 800bb10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb14:	4628      	mov	r0, r5
 800bb16:	4798      	blx	r3
 800bb18:	2000      	movs	r0, #0
 800bb1a:	e7e0      	b.n	800bade <_raise_r+0x12>

0800bb1c <raise>:
 800bb1c:	4b02      	ldr	r3, [pc, #8]	; (800bb28 <raise+0xc>)
 800bb1e:	4601      	mov	r1, r0
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	f7ff bfd3 	b.w	800bacc <_raise_r>
 800bb26:	bf00      	nop
 800bb28:	20000190 	.word	0x20000190

0800bb2c <_kill_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d07      	ldr	r5, [pc, #28]	; (800bb4c <_kill_r+0x20>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	4611      	mov	r1, r2
 800bb38:	602b      	str	r3, [r5, #0]
 800bb3a:	f7f5 fd8d 	bl	8001658 <_kill>
 800bb3e:	1c43      	adds	r3, r0, #1
 800bb40:	d102      	bne.n	800bb48 <_kill_r+0x1c>
 800bb42:	682b      	ldr	r3, [r5, #0]
 800bb44:	b103      	cbz	r3, 800bb48 <_kill_r+0x1c>
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20001ef0 	.word	0x20001ef0

0800bb50 <_getpid_r>:
 800bb50:	f7f5 bd7a 	b.w	8001648 <_getpid>

0800bb54 <__sread>:
 800bb54:	b510      	push	{r4, lr}
 800bb56:	460c      	mov	r4, r1
 800bb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5c:	f000 f894 	bl	800bc88 <_read_r>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	bfab      	itete	ge
 800bb64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb66:	89a3      	ldrhlt	r3, [r4, #12]
 800bb68:	181b      	addge	r3, r3, r0
 800bb6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb6e:	bfac      	ite	ge
 800bb70:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb72:	81a3      	strhlt	r3, [r4, #12]
 800bb74:	bd10      	pop	{r4, pc}

0800bb76 <__swrite>:
 800bb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7a:	461f      	mov	r7, r3
 800bb7c:	898b      	ldrh	r3, [r1, #12]
 800bb7e:	05db      	lsls	r3, r3, #23
 800bb80:	4605      	mov	r5, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	4616      	mov	r6, r2
 800bb86:	d505      	bpl.n	800bb94 <__swrite+0x1e>
 800bb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f000 f868 	bl	800bc64 <_lseek_r>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	4632      	mov	r2, r6
 800bba2:	463b      	mov	r3, r7
 800bba4:	4628      	mov	r0, r5
 800bba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	f000 b817 	b.w	800bbdc <_write_r>

0800bbae <__sseek>:
 800bbae:	b510      	push	{r4, lr}
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb6:	f000 f855 	bl	800bc64 <_lseek_r>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	bf15      	itete	ne
 800bbc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbca:	81a3      	strheq	r3, [r4, #12]
 800bbcc:	bf18      	it	ne
 800bbce:	81a3      	strhne	r3, [r4, #12]
 800bbd0:	bd10      	pop	{r4, pc}

0800bbd2 <__sclose>:
 800bbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd6:	f000 b813 	b.w	800bc00 <_close_r>
	...

0800bbdc <_write_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d07      	ldr	r5, [pc, #28]	; (800bbfc <_write_r+0x20>)
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	602a      	str	r2, [r5, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	f7f5 fd6b 	bl	80016c6 <_write>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_write_r+0x1e>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_write_r+0x1e>
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	20001ef0 	.word	0x20001ef0

0800bc00 <_close_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d06      	ldr	r5, [pc, #24]	; (800bc1c <_close_r+0x1c>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f5 fd77 	bl	80016fe <_close>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_close_r+0x1a>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_close_r+0x1a>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	20001ef0 	.word	0x20001ef0

0800bc20 <_fstat_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	; (800bc40 <_fstat_r+0x20>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f7f5 fd72 	bl	8001716 <_fstat>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d102      	bne.n	800bc3c <_fstat_r+0x1c>
 800bc36:	682b      	ldr	r3, [r5, #0]
 800bc38:	b103      	cbz	r3, 800bc3c <_fstat_r+0x1c>
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	20001ef0 	.word	0x20001ef0

0800bc44 <_isatty_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	; (800bc60 <_isatty_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f5 fd71 	bl	8001736 <_isatty>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_isatty_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_isatty_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20001ef0 	.word	0x20001ef0

0800bc64 <_lseek_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_lseek_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f5 fd6a 	bl	800174c <_lseek>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_lseek_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_lseek_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20001ef0 	.word	0x20001ef0

0800bc88 <_read_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_read_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f5 fcf8 	bl	800168c <_read>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_read_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_read_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20001ef0 	.word	0x20001ef0

0800bcac <_init>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr

0800bcb8 <_fini>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr
